import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value27 = basicVerifier0.newOperation(abstractInsnNode26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType("LLZ;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier15.merge(value20, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.copyOperation(abstractInsnNode14, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter13.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter13.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter37.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter37.copyOperation(abstractInsnNode40, value47);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter13.merge(value36, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found I", (java.lang.Object) type12, value49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.copyOperation(abstractInsnNode9, value49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type44);
        java.lang.Class<?> wildcardClass46 = basicVerifier39.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier27.newValue(type47);
        java.lang.String str49 = type47.getInternalName();
        java.lang.String str50 = type47.getInternalName();
        int int52 = type47.getOpcode(19);
        int int54 = type47.getOpcode(1024);
        java.lang.String str55 = type47.toString();
        java.lang.String str56 = type47.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier63.merge(value81, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value86);
        int int88 = value86.getSize();
        int int89 = value86.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.copyOperation(abstractInsnNode60, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str49, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str50, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1028 + "'", int54 == 1028);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter1.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        boolean boolean23 = type19.equals((java.lang.Object) 4);
        boolean boolean25 = type19.equals((java.lang.Object) 193);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        int int41 = type16.getOpcode((int) (short) 100);
        int int43 = type16.getOpcode(129);
        int int45 = type16.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier0.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = basicVerifier0.newOperation(abstractInsnNode47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Z" + "'", str38, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 129 + "'", int43 == 129);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 148 + "'", int45 == 148);
        org.junit.Assert.assertNotNull(value46);
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        int int62 = type61.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        boolean boolean68 = type64.equals((java.lang.Object) 4);
        java.lang.String str69 = type64.getClassName();
        java.lang.String str70 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type64);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        java.lang.String str75 = type72.getDescriptor();
        int int76 = type72.getSort();
        boolean boolean78 = type72.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass79 = type72.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.newValue(type83);
        java.lang.String str85 = type83.getDescriptor();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "V" + "'", str75, "V");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str80, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/Type" + "'", str81, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/Type" + "'", str82, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str85, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier42.merge(value60, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.copyOperation(abstractInsnNode41, value64);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str71 = type70.getInternalName();
        java.lang.String str72 = type70.getInternalName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type70);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("(ZV)V");
        int int76 = type75.getDimensions();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicInterpreter0.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier5.merge(value10, value15);
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter3.copyOperation(abstractInsnNode4, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter3.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        boolean boolean24 = type20.equals((java.lang.Object) 4);
        boolean boolean26 = type20.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter3.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        boolean boolean32 = type28.equals((java.lang.Object) 4);
        boolean boolean34 = type28.equals((java.lang.Object) 193);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type38, type39, type42, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray44);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter3.newValue(type28);
        boolean boolean49 = type2.equals((java.lang.Object) basicInterpreter3);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = basicInterpreter3.unaryOperation(abstractInsnNode50, value51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)V" + "'", str46, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Z" + "'", str47, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("LJVSZ)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;: expected F, but found I", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str61 = type60.getDescriptor();
        int int62 = type60.getSize();
        int int63 = type60.getSort();
        java.lang.String str64 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.newValue(type60);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.naryOperation(abstractInsnNode68, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "S" + "'", str61, "S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "short" + "'", str64, "short");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int25 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter28.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.copyOperation(abstractInsnNode35, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter34.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter34.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str61 = type60.toString();
        int int63 = type60.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier55.newValue(type60);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int68 = type66.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier55.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter34.copyOperation(abstractInsnNode54, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) "(ZV)L(JVSZ)Z;", value70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter28.copyOperation(abstractInsnNode31, value70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier76.merge(value81, value86);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter74.copyOperation(abstractInsnNode75, value87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter28.copyOperation(abstractInsnNode73, value87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.unaryOperation(abstractInsnNode27, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "V" + "'", str61, "V");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 175 + "'", int63 == 175);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException45);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException52);
        analyzerException45.addSuppressed((java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value59);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value64);
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value68);
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException69);
        java.lang.Throwable[] throwableArray71 = analyzerException65.getSuppressed();
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I", (java.lang.Throwable) analyzerException60);
        analyzerException45.addSuppressed((java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException87);
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException80);
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException80);
        java.lang.Throwable[] throwableArray93 = analyzerException80.getSuppressed();
        java.lang.String str94 = analyzerException80.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null" + "'", str94, "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null");
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        int int49 = type48.getSize();
        int int50 = type48.getSize();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type47, type48, type51, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray53);
        int int55 = type45.getSort();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier30.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        java.lang.String str75 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier57.newValue(type72);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier30.newValue(type72);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        boolean boolean82 = type78.equals((java.lang.Object) 4);
        int int83 = type78.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier30.newValue(type78);
        java.lang.Class<?> wildcardClass85 = value84.getClass();
        java.lang.String str86 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass85);
        java.lang.String str87 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.lang.String str89 = type88.getInternalName();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.newValue(type88);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType("F");
        java.lang.String str93 = type92.getClassName();
        java.lang.String str94 = type92.toString();
        int int95 = type92.getSize();
        java.lang.String str96 = type92.getDescriptor();
        org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.newValue(type92);
        int int99 = type92.getOpcode(0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(JVSZ)Z" + "'", str54, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "V" + "'", str75, "V");
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str86, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str87, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str89, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "float" + "'", str93, "float");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "F" + "'", str94, "F");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "F" + "'", str96, "F");
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        java.lang.Class<?> wildcardClass6 = type2.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier10.merge(value15, value20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter8.copyOperation(abstractInsnNode9, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter8.newValue(type23);
        int int25 = value24.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Object) wildcardClass6, value24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str27, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        boolean boolean6 = type1.equals((java.lang.Object) int5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType("(ZV)L(JVSZ)V;");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        int int15 = type14.getSize();
        int int16 = type14.getSize();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type13, type14, type17, type18 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray19);
        java.lang.String str21 = type11.getDescriptor();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        java.lang.String str32 = type29.getDescriptor();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type28, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray33);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray33);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray33);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray33);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray33);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "V" + "'", str32, "V");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(ZV)Z" + "'", str34, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(ZV)LZ;" + "'", str35, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(ZV)Z" + "'", str36, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str37, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)LZV)L(JVSZ)V;" + "'", str38, "(ZV)LZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str39, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("LLorg.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I;;");
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.toString();
        java.lang.String str2 = type0.getDescriptor();
        int int4 = type0.getOpcode(8);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "V" + "'", str1, "V");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("(ZV)Lorg/mockito/asm/Type;");
        boolean boolean6 = type1.equals((java.lang.Object) type5);
        java.lang.String str7 = type5.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LZ;" + "'", str2, "LZ;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LZ;" + "'", str3, "LZ;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LZV)Lorg/mockito/asm/Type;" + "'", str7, "LZV)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter15.newValue(type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean23 = type18.equals((java.lang.Object) analyzerException22);
        int int25 = type18.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter15.newValue(type18);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str28 = type27.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter15.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getDescriptor();
        boolean boolean33 = type30.equals((java.lang.Object) 93);
        java.lang.String str34 = type30.getDescriptor();
        int int35 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter15.newValue(type30);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type30);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter0.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newOperation(abstractInsnNode40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 160 + "'", int25 == 160);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "D" + "'", str28, "D");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Z" + "'", str31, "Z");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value39);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        java.lang.Class<?> wildcardClass62 = value61.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.lang.String str66 = type65.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str64, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str66, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("LLLZ;", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type44);
        java.lang.Class<?> wildcardClass46 = basicVerifier39.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier27.newValue(type47);
        java.lang.String str49 = type47.getInternalName();
        java.lang.String str50 = type47.getInternalName();
        int int52 = type47.getOpcode(19);
        int int54 = type47.getOpcode(1024);
        java.lang.String str55 = type47.toString();
        java.lang.String str56 = type47.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier64.merge(value69, value74);
        boolean boolean76 = type63.equals((java.lang.Object) value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLorg/mockito/asm/Type;;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I", value74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = basicVerifier0.unaryOperation(abstractInsnNode58, value74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str49, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str50, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1028 + "'", int54 == 1028);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.copyOperation(abstractInsnNode35, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier50.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter34.copyOperation(abstractInsnNode49, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean66 = type61.equals((java.lang.Object) analyzerException65);
        int int68 = type61.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter58.newValue(type61);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier76.merge(value81, value86);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter74.copyOperation(abstractInsnNode75, value87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter74.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter58.copyOperation(abstractInsnNode73, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.merge(value56, value90);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        int int95 = type94.getDimensions();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.newValue(type94);
        int int97 = value96.getSize();
        int int98 = value96.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 160 + "'", int68 == 160);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "D" + "'", str71, "D");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        java.lang.String str53 = type50.getDescriptor();
        boolean boolean55 = type50.equals((java.lang.Object) 129);
        java.lang.String str56 = type50.getClassName();
        java.lang.String str57 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.newValue(type50);
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value62);
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value66);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException67);
        java.lang.Throwable[] throwableArray69 = analyzerException63.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException63);
        java.lang.Class<?> wildcardClass71 = analyzerException63.getClass();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "V" + "'", str53, "V");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "void" + "'", str56, "void");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "V" + "'", str57, "V");
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        java.lang.Class<?> wildcardClass9 = basicVerifier2.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type11.getDimensions();
        int int14 = type11.getOpcode(109);
        int int15 = type11.getSize();
        java.lang.String str16 = type11.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;");
        java.lang.Throwable[] throwableArray25 = analyzerException24.getSuppressed();
        analyzerException22.addSuppressed((java.lang.Throwable) analyzerException24);
        boolean boolean27 = type11.equals((java.lang.Object) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type[]", (java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException22);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 113 + "'", int14 == 113);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str16, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLorg/mockito/asm/Type;;");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        int int8 = type7.getSize();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean12 = type7.equals((java.lang.Object) analyzerException11);
        int int14 = type7.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter4.newValue(type7);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.toString();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        int int20 = type19.getSize();
        int int21 = type19.getSize();
        java.lang.String str22 = type19.getDescriptor();
        int int23 = type19.getSort();
        boolean boolean25 = type19.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter4.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier27.newValue(type31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter4, value32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        boolean boolean37 = type34.equals((java.lang.Object) 0L);
        java.lang.String str38 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier41.merge(value46, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter39.copyOperation(abstractInsnNode40, value52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter39.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        boolean boolean61 = type57.equals((java.lang.Object) 4);
        boolean boolean63 = type57.equals((java.lang.Object) 193);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        int int69 = type68.getSize();
        int int70 = type68.getSize();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type67, type68, type71, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray73);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray73);
        int int80 = type34.getOpcode(146);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter4.newValue(type34);
        boolean boolean82 = type1.equals((java.lang.Object) basicInterpreter4);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        int int84 = type83.getSize();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean88 = type83.equals((java.lang.Object) analyzerException87);
        int int90 = type83.getOpcode(155);
        int int91 = type83.getSize();
        int int92 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter4.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        org.mockito.asm.tree.analysis.Value value95 = null;
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter4.copyOperation(abstractInsnNode94, value95);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter4.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.Type" + "'", str2, "Lorg.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 160 + "'", int14 == 160);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "D" + "'", str17, "D");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "V" + "'", str22, "V");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "V" + "'", str38, "V");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)Z" + "'", str74, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(JVSZ)V" + "'", str75, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JVSZ)Z" + "'", str76, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(JVSZ)Z" + "'", str77, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)V" + "'", str78, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 151 + "'", int80 == 151);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 160 + "'", int90 == 160);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNull(value93);
        org.junit.Assert.assertNull(value96);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException31);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray37 = analyzerException3.getSuppressed();
        java.lang.Class<?> wildcardClass38 = analyzerException3.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value19, value39, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) true, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;", (java.lang.Object) 91, value59);
        int int63 = value59.getSize();
        java.lang.Class<?> wildcardClass64 = value59.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str65, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)LZV)L(JVSZ)V;");
        int int3 = type1.getOpcode(123);
        int int4 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        int int7 = type6.getSize();
        int int8 = type6.getSort();
        boolean boolean9 = type1.equals((java.lang.Object) int8);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 127 + "'", int3 == 127);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)D");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)D" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)D");
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        int int53 = type51.getSize();
        int int55 = type51.getOpcode(143);
        int int57 = type51.getOpcode(97);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 146 + "'", int55 == 146);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        java.lang.Throwable[] throwableArray17 = analyzerException16.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException16);
        java.lang.Throwable[] throwableArray19 = analyzerException16.getSuppressed();
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException16);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSize();
        boolean boolean4 = type0.equals((java.lang.Object) 4);
        boolean boolean6 = type0.equals((java.lang.Object) 193);
        java.lang.String str7 = type0.getClassName();
        java.lang.String str8 = type0.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = analyzerException19.getSuppressed();
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value27);
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value31);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException38);
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException39);
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass42 = analyzerException39.getClass();
        boolean boolean43 = type0.equals((java.lang.Object) analyzerException39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray28);
        java.lang.String str30 = type24.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type35, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray40);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int46 = type45.getDimensions();
        int int47 = type45.getDimensions();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = basicVerifier0.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)F" + "'", str29, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "F" + "'", str30, "F");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Z" + "'", str41, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)F" + "'", str42, "(ZV)F");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        java.lang.String str24 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier6.newValue(type21);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier6.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        java.lang.String str47 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier29.newValue(type44);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier6.newValue(type44);
        int int51 = type44.getOpcode(5);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier54.merge(value59, value64);
        boolean boolean66 = type53.equals((java.lang.Object) value64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.Type[] typeArray71 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray71);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray71);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray71);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray71);
        java.lang.String str77 = type2.toString();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier0.newValue(type2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str3, "JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "V" + "'", str24, "V");
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "V" + "'", str47, "V");
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)F" + "'", str72, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str73, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)V" + "'", str74, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(JVSZ)Z" + "'", str75, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str76, "(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str77, "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        int int68 = type67.getSort();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier63.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean78 = type73.equals((java.lang.Object) analyzerException77);
        int int80 = type73.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter70.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str83 = type82.toString();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter70.newValue(type82);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier63.newValue(type82);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str88 = type87.toString();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier63.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode62, value89);
        int int91 = value89.getSize();
        int int92 = value89.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 160 + "'", int80 == 160);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "D" + "'", str83, "D");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LC;" + "'", str88, "LC;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType("F");
        java.lang.String str68 = type67.getClassName();
        int int70 = type67.getOpcode(256);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type67);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newOperation(abstractInsnNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 258 + "'", int70 == 258);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Throwable[] throwableArray46 = analyzerException45.getSuppressed();
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException45);
        java.lang.Class<?> wildcardClass48 = analyzerException37.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier0.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier53.merge(value58, value63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter51.copyOperation(abstractInsnNode52, value64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter51.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        int int72 = type69.getSort();
        int int73 = type69.getSize();
        java.lang.Object obj74 = null;
        boolean boolean75 = type69.equals(obj74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter51.newValue(type69);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str79 = type78.getInternalName();
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter51.newValue(type78);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter51.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.merge(value83, value84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        java.util.List list87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicVerifier0.naryOperation(abstractInsnNode86, list87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/Type" + "'", str79, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ldouble;");
        int int2 = type1.getSort();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("F");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value8);
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = analyzerException9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException9.getSuppressed();
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value16);
        java.lang.Throwable[] throwableArray18 = analyzerException17.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value23);
        java.lang.Throwable[] throwableArray25 = analyzerException24.getSuppressed();
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value28);
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException29);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException24);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException17);
        boolean boolean33 = type1.equals((java.lang.Object) analyzerException17);
        int int34 = type1.getSort();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = type1.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.toString();
        int int6 = type1.getOpcode(24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        int int12 = type11.getSort();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier16.merge(value21, value26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter14.copyOperation(abstractInsnNode15, value27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter14.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier7.newValue(type29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str34 = type33.getInternalName();
        int int36 = type33.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier7.newValue(type33);
        int int39 = type33.getOpcode(141);
        org.mockito.asm.Type[] typeArray41 = org.mockito.asm.Type.getArgumentTypes("LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray41);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(JVSZ)Z;" + "'", str4, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 28 + "'", int6 == 28);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 177 + "'", int36 == 177);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 145 + "'", int39 == 145);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str42, "(JVSZ)L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str43, "(JVSZ)L(JVSZ)Z;");
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;;");
        int int3 = type1.getOpcode(193);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("F");
        java.lang.String str7 = type6.getClassName();
        java.lang.String str8 = type6.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter9.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        boolean boolean31 = type27.equals((java.lang.Object) 4);
        boolean boolean33 = type27.equals((java.lang.Object) 193);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray43);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray43);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray43);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray43);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray43);
        int int51 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 197 + "'", int3 == 197);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)V" + "'", str45, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Z" + "'", str47, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)F" + "'", str48, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)C" + "'", str49, "(JVSZ)C");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str50, "(JVSZ)L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        boolean boolean57 = type53.equals((java.lang.Object) 4);
        boolean boolean59 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type53);
        java.lang.Class<?> wildcardClass61 = type53.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        int int64 = type63.getDimensions();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str62, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.Type[]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.BasicValue" + "'", str2, "rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str3, "Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lckito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lckito/asm/tree/analysis/BasicVerifier;" + "'", str3, "Lckito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getSort();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = type5.getInternalName();
        int int7 = type5.getSort();
        int int8 = type5.getSort();
        int int9 = type5.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Z" + "'", str2, "Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass68 = type67.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean78 = type73.equals((java.lang.Object) analyzerException77);
        int int80 = type73.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter70.newValue(type73);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter70.newValue(type83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;", (java.lang.Object) wildcardClass68, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.copyOperation(abstractInsnNode65, value84);
        java.lang.Class<?> wildcardClass87 = value86.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/Type" + "'", str69, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 160 + "'", int80 == 160);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str88, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        int int18 = type4.getOpcode((int) '4');
        java.lang.String str19 = type4.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter20.merge(value39, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        java.lang.String str64 = type61.getDescriptor();
        int int65 = type61.getSort();
        boolean boolean67 = type61.equals((java.lang.Object) (byte) 0);
        int int68 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter20.newValue(type61);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType("F");
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter20.newValue(type71);
        boolean boolean74 = type4.equals((java.lang.Object) type71);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = type4.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)J: expected 0, but found R");
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException9);
        java.lang.Throwable[] throwableArray11 = analyzerException9.getSuppressed();
        java.lang.Class<?> wildcardClass12 = analyzerException9.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str13, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException29);
        java.lang.Throwable[] throwableArray32 = analyzerException29.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", (java.lang.Throwable) analyzerException29);
        java.lang.String str34 = analyzerException29.toString();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I" + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I");
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getInternalName();
        int int5 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JVSZ)Z" + "'", str4, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        int int8 = type7.getSize();
        int int9 = type7.getSize();
        java.lang.String str10 = type7.getDescriptor();
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type6, type7 };
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray11);
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray14);
        int int16 = type3.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type41, type42, type45, type46 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray47);
        int int49 = type39.getSort();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier24.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type55, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray60);
        boolean boolean63 = type17.equals((java.lang.Object) typeArray60);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray60);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray60);
        java.lang.String str66 = type1.getInternalName();
        java.lang.String str67 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "V" + "'", str10, "V");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(ZV)Z" + "'", str12, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JVSZ)Z" + "'", str15, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)Z" + "'", str48, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)Z" + "'", str61, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;" + "'", str65, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F" + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;" + "'", str67, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;");
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getDescriptor();
        java.lang.String str4 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;" + "'", str3, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;" + "'", str4, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;");
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.naryOperation(abstractInsnNode17, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier54.newValue(type60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier54.newValue(type63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = type67.getElementType();
        java.lang.String str70 = type69.getDescriptor();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier54.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.Type type80 = type78.getElementType();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier73.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter82 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter82.newValue(type83);
        java.lang.String str85 = type83.getDescriptor();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier73.newValue(type83);
        java.lang.Class<?> wildcardClass87 = basicVerifier73.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier54.newValue(type90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicVerifier0.copyOperation(abstractInsnNode53, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)Z" + "'", str68, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "J" + "'", str70, "J");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)Z" + "'", str79, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "V" + "'", str85, "V");
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str88, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str89, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", obj12, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.merge(value31, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        java.util.List list61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.naryOperation(abstractInsnNode60, list61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value59);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int28 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str32 = type31.getClassName();
        java.lang.String str33 = type31.toString();
        java.lang.String str34 = type31.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean41 = type36.equals((java.lang.Object) analyzerException40);
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value44);
        java.lang.Throwable[] throwableArray46 = analyzerException45.getSuppressed();
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException45);
        java.lang.Class<?> wildcardClass48 = analyzerException40.getClass();
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        int int52 = type51.getDimensions();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        int int57 = type55.getOpcode(208);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean68 = type63.equals((java.lang.Object) analyzerException67);
        int int70 = type63.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter60.newValue(type63);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str73 = type72.toString();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.newValue(type72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        java.lang.String str78 = type75.getDescriptor();
        int int79 = type75.getSort();
        boolean boolean81 = type75.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter60.newValue(type75);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str84 = type83.toString();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter60.newValue(type83);
        int int86 = value85.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicVerifier0.unaryOperation(abstractInsnNode59, value85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L(JVSZ)Z;" + "'", str33, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "L(JVSZ)Z;" + "'", str34, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str49, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 212 + "'", int57 == 212);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 160 + "'", int70 == 160);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "D" + "'", str73, "D");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "V" + "'", str78, "V");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "C" + "'", str84, "C");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str54 = type53.toString();
        int int55 = type53.getSort();
        java.lang.Class<?> wildcardClass56 = type53.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str58 = type57.getInternalName();
        int int59 = type57.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier60.newValue(type66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str70 = type69.toString();
        int int71 = type69.getSort();
        java.lang.String str72 = type69.getDescriptor();
        org.mockito.asm.Type[] typeArray74 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray74);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier60.newValue(type69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.Type, but found I", (java.lang.Object) type57, value76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = basicVerifier0.copyOperation(abstractInsnNode50, value76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Z" + "'", str54, "Z");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/Type" + "'", str58, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "LLZ;;" + "'", str70, "LLZ;;");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LLZ;;" + "'", str72, "LLZ;;");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)LLZ;;" + "'", str75, "(ZV)LLZ;;");
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier22.merge(value40, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value20, value40, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) true, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;", (java.lang.Object) 91, value60);
        java.lang.Throwable[] throwableArray64 = analyzerException63.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException63);
        java.lang.String str66 = analyzerException65.toString();
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)L(ZV)L(JVSZ)Z;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str3 = type2.toString();
        int int4 = type2.getSort();
        java.lang.Class<?> wildcardClass5 = type2.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        java.lang.String str8 = type6.getClassName();
        int int10 = type6.getOpcode(96);
        java.lang.String str11 = type6.getInternalName();
        int int12 = type6.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier15.merge(value20, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.copyOperation(abstractInsnNode14, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter13.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean34 = type32.equals((java.lang.Object) "(JVSZ)Z");
        int int35 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter13.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        boolean boolean51 = type41.equals((java.lang.Object) analyzerException50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter38.newValue(type41);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter13.newValue(type41);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str57 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier60.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str68 = type67.getDescriptor();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier60.newValue(type67);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str72 = type71.getInternalName();
        int int74 = type71.getOpcode(15);
        org.mockito.asm.Type type75 = type71.getElementType();
        java.lang.String str76 = type71.getDescriptor();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier60.newValue(type71);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter13.copyOperation(abstractInsnNode59, value77);
        int int79 = value77.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;", (java.lang.Object) int12, value77);
        java.lang.String str81 = analyzerException80.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Z" + "'", str3, "Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Ldouble;" + "'", str57, "Ldouble;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str68, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 19 + "'", int74 == 19);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L(JVSZ)Z;" + "'", str76, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;: expected 10, but found R" + "'", str81, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;: expected 10, but found R");
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier29.newValue(type34);
        java.lang.Class<?> wildcardClass36 = basicVerifier29.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getDimensions();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier41.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier53.newValue(type58);
        java.lang.Class<?> wildcardClass60 = basicVerifier53.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier41.newValue(type61);
        java.lang.String str63 = type61.getInternalName();
        java.lang.String str64 = type61.getInternalName();
        java.lang.String str65 = type61.getClassName();
        int int67 = type61.getOpcode(131);
        int int68 = type61.getSort();
        int int69 = type61.getSort();
        org.mockito.asm.Type type70 = type61.getElementType();
        int int71 = type70.getDimensions();
        java.lang.String str72 = type70.getDescriptor();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        java.util.List list75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.naryOperation(abstractInsnNode74, list75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str38, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str63, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str64, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str65, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 135 + "'", int67 == 135);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str72, "Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Lckito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ckito.asm.tree.analysis.BasicVerifier" + "'", str3, "ckito.asm.tree.analysis.BasicVerifier");
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.newValue(type63);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.copyOperation(abstractInsnNode46, value65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str69 = type68.getInternalName();
        int int70 = type68.getSize();
        java.lang.String str71 = type68.getClassName();
        java.lang.String str72 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type68);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str76 = type75.toString();
        org.mockito.asm.Type type77 = type75.getElementType();
        org.mockito.asm.Type type78 = type75.getElementType();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter0.newValue(type75);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "S" + "'", str44, "S");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str69, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str72, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LLZ;;" + "'", str76, "LLZ;;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str8, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier13.merge(value21, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier9.merge(value27, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", obj8, value27);
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.merge(value27, value34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = basicVerifier0.newOperation(abstractInsnNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value35);
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value19, value39, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 178, value39);
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value64);
        java.lang.Throwable[] throwableArray66 = analyzerException65.getSuppressed();
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value69);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value73);
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException74);
        java.lang.Throwable[] throwableArray76 = analyzerException70.getSuppressed();
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException70);
        analyzerException61.addSuppressed((java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LZ;", (java.lang.Throwable) analyzerException79);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean44 = type39.equals((java.lang.Object) analyzerException43);
        int int46 = type39.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter36.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        int int55 = type51.getSort();
        boolean boolean57 = type51.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter36.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.merge(value33, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        java.lang.String str67 = type66.toString();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicVerifier0.naryOperation(abstractInsnNode69, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 160 + "'", int46 == 160);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "D" + "'", str49, "D");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;" + "'", str67, "L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type7, type8, type11, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray13);
        java.lang.Class<?> wildcardClass15 = type5.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter19.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean40 = type38.equals((java.lang.Object) "(JVSZ)Z");
        int int41 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter19.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        boolean boolean57 = type47.equals((java.lang.Object) analyzerException56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter44.newValue(type47);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter19.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean70 = type65.equals((java.lang.Object) analyzerException69);
        int int72 = type65.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter62.newValue(type65);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.toString();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter62.newValue(type74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        int int78 = type77.getSize();
        int int79 = type77.getSize();
        java.lang.String str80 = type77.getDescriptor();
        int int81 = type77.getSort();
        boolean boolean83 = type77.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter62.newValue(type77);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str86 = type85.toString();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter62.newValue(type85);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter19.copyOperation(abstractInsnNode61, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)V", (java.lang.Object) type18, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        analyzerException89.addSuppressed((java.lang.Throwable) analyzerException91);
        java.lang.Throwable[] throwableArray93 = analyzerException91.getSuppressed();
        boolean boolean94 = type1.equals((java.lang.Object) throwableArray93);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(JVSZ)Z" + "'", str14, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 160 + "'", int72 == 160);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "D" + "'", str75, "D");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "V" + "'", str80, "V");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException33);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException34);
        java.lang.Throwable[] throwableArray36 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)J: expected 0, but found R", (java.lang.Throwable) analyzerException37);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean5 = type0.equals((java.lang.Object) analyzerException4);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value8);
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass12 = analyzerException4.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str17, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str2 = type1.getInternalName();
        boolean boolean4 = type1.equals((java.lang.Object) 104);
        int int5 = type1.getSort();
        java.lang.Class<?> wildcardClass6 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier18.merge(value26, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier14.merge(value32, value36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLLorg/mockito/asm/Type;;;", (java.lang.Throwable) analyzerException40);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException40);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLZ;;");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type4 = type1.getElementType();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type7, type8, type11, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray13);
        java.lang.Class<?> wildcardClass15 = type5.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = type16.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter18.newValue(type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean26 = type21.equals((java.lang.Object) analyzerException25);
        int int28 = type21.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter18.newValue(type21);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.toString();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.newValue(type30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        int int37 = type33.getSort();
        boolean boolean39 = type33.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter18.newValue(type33);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str42 = type41.toString();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter18.newValue(type41);
        boolean boolean44 = type16.equals((java.lang.Object) basicInterpreter18);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType("F");
        java.lang.String str47 = type46.getClassName();
        java.lang.String str48 = type46.toString();
        int int49 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter18.newValue(type46);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("char");
        java.lang.String str53 = type52.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter18.newValue(type52);
        boolean boolean55 = type1.equals((java.lang.Object) type52);
        java.lang.String str56 = type52.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLZ;" + "'", str2, "LLZ;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLZ;" + "'", str3, "LLZ;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(JVSZ)Z" + "'", str14, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 160 + "'", int28 == 160);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "D" + "'", str31, "D");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "C" + "'", str42, "C");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "F" + "'", str48, "F");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lchar;" + "'", str53, "Lchar;");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lchar;" + "'", str56, "Lchar;");
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        boolean boolean8 = type2.equals((java.lang.Object) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Ldouble;", (java.lang.Throwable) analyzerException6);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("LLZ;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.copyOperation(abstractInsnNode26, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter25.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter25.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter49.newValue(type50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter49.copyOperation(abstractInsnNode52, value59);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter25.merge(value48, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found I", (java.lang.Object) type24, value61);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str67 = type66.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier70.merge(value75, value80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter68.copyOperation(abstractInsnNode69, value81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter68.newValue(type83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;", (java.lang.Object) type66, value85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.merge(value61, value85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F" + "'", str20, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Ldouble;" + "'", str67, "Ldouble;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        int int63 = type56.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter53.newValue(type56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type56);
        java.lang.Class<?> wildcardClass66 = type56.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray77);
        java.lang.String str79 = type73.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier80.newValue(type81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        int int86 = type85.getSize();
        int int87 = type85.getSize();
        java.lang.String str88 = type85.getDescriptor();
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type84, type85 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray89);
        boolean boolean93 = type67.equals((java.lang.Object) typeArray89);
        int int94 = type67.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 160 + "'", int63 == 160);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)F" + "'", str78, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "V" + "'", str88, "V");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(ZV)Z" + "'", str90, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(ZV)F" + "'", str91, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(ZV)Z" + "'", str92, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        int int24 = type20.getSort();
        java.lang.String str25 = type20.getInternalName();
        java.lang.String str26 = type20.getInternalName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter27.merge(value46, value66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter69.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter69.copyOperation(abstractInsnNode72, value79);
        int int82 = value79.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter27.copyOperation(abstractInsnNode68, value79);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType("L(ZV)F;");
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter27.newValue(type85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str88 = type87.getClassName();
        int int89 = type87.getSize();
        boolean boolean91 = type87.equals((java.lang.Object) 4);
        boolean boolean93 = type87.equals((java.lang.Object) 193);
        java.lang.String str94 = type87.getClassName();
        java.lang.String str95 = type87.getClassName();
        java.lang.String str96 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter27.newValue(type87);
        int int98 = value97.getSize();
        boolean boolean99 = type20.equals((java.lang.Object) int98);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str25, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str26, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "boolean" + "'", str88, "boolean");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "boolean" + "'", str94, "boolean");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "boolean" + "'", str95, "boolean");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Z" + "'", str96, "Z");
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean58 = type53.equals((java.lang.Object) analyzerException57);
        int int60 = type53.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter50.newValue(type53);
        java.lang.String str62 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type53);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getReturnType("(JVSZ)V");
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier0.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str69 = type68.getInternalName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type68);
        java.lang.String str71 = type68.getInternalName();
        int int72 = type68.getDimensions();
        java.lang.String str73 = type68.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 160 + "'", int60 == 160);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str69, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;" + "'", str73, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        java.lang.Class<?> wildcardClass45 = value44.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.Throwable throwable50 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", throwable50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I", (java.lang.Throwable) analyzerException52);
        boolean boolean54 = type46.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = type28.getElementType();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier23.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        int int33 = type32.getSize();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean37 = type32.equals((java.lang.Object) analyzerException36);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier23.newValue(type32);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier23.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str44 = type43.getDescriptor();
        int int45 = type43.getSort();
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier23.newValue(type43);
        int int48 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        java.util.List list51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.naryOperation(abstractInsnNode50, list51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "L(JVSZ)Z;" + "'", str44, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier: expected , but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        int int10 = type0.getSort();
        boolean boolean12 = type0.equals((java.lang.Object) 95);
        java.lang.Class<?> wildcardClass13 = type0.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        boolean boolean17 = type15.equals((java.lang.Object) 8202);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.Value value2 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        boolean boolean7 = type3.equals((java.lang.Object) 4);
        boolean boolean9 = type3.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        int int35 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier10.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type41, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray46);
        boolean boolean49 = type3.equals((java.lang.Object) typeArray46);
        int int50 = type3.getSize();
        int int51 = type3.getSort();
        int int52 = type3.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type3);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.unaryOperation(abstractInsnNode54, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(ZV)Z" + "'", str47, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)Z" + "'", str48, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        java.lang.String str22 = type1.toString();
        java.lang.String str23 = type1.getDescriptor();
        int int25 = type1.getOpcode(164);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "L(JVSZ)V;" + "'", str22, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "L(JVSZ)V;" + "'", str23, "L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 168 + "'", int25 == 168);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int23 = type1.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter31.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier24.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str51 = type50.getInternalName();
        int int53 = type50.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier24.newValue(type50);
        boolean boolean55 = type1.equals((java.lang.Object) type50);
        int int57 = type50.getOpcode(18);
        org.mockito.asm.Type type58 = type50.getElementType();
        java.lang.String str59 = type50.getDescriptor();
        int int60 = type50.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 172 + "'", int23 == 172);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 177 + "'", int53 == 177);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "L(JVSZ)Z;" + "'", str59, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type33, type34, type37, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray39);
        int int41 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier16.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        java.lang.String str61 = type58.getDescriptor();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier43.newValue(type58);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier16.newValue(type58);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        boolean boolean68 = type64.equals((java.lang.Object) 4);
        int int69 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier16.newValue(type64);
        java.lang.Class<?> wildcardClass71 = value70.getClass();
        java.lang.String str72 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        java.lang.String str75 = type74.getInternalName();
        java.lang.String str76 = type74.getInternalName();
        java.lang.String str77 = type74.getInternalName();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter1.newValue(type74);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier79.newValue(type81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Object) type74, value82);
        int int84 = type74.getSize();
        java.lang.String str85 = type74.getInternalName();
        int int86 = type74.getSort();
        int int87 = type74.getSize();
        java.lang.String str88 = type74.getDescriptor();
        java.lang.String str89 = type74.getClassName();
        int int90 = type74.getSort();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "V" + "'", str61, "V");
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str72, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str73, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str75, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str76, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str77, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str85, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str88, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str89, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)V");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int6 = type5.getSize();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType("Z");
        int int10 = type8.getOpcode(101);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        boolean boolean15 = type11.equals((java.lang.Object) 4);
        boolean boolean17 = type11.equals((java.lang.Object) 193);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray27);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue");
        java.lang.Throwable[] throwableArray35 = analyzerException34.getSuppressed();
        boolean boolean36 = type5.equals((java.lang.Object) throwableArray35);
        java.lang.String str37 = type5.getDescriptor();
        boolean boolean38 = type3.equals((java.lang.Object) type5);
        java.lang.String str39 = type5.getInternalName();
        java.lang.String str40 = type5.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 101 + "'", int10 == 101);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)V" + "'", str29, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Z" + "'", str30, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)Z" + "'", str31, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)LLorg/mockito/asm/Type;;" + "'", str32, "(JVSZ)LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str37, "LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str39, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str40, "Lorg.mockito.asm.Type;");
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        java.lang.String str24 = type16.getClassName();
        java.lang.String str25 = type16.getDescriptor();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        java.util.List list28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value29 = basicInterpreter0.naryOperation(abstractInsnNode27, list28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "void" + "'", str24, "void");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNull(value26);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        int int22 = type18.getSort();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier48.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter46.copyOperation(abstractInsnNode47, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter46.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier39.newValue(type61);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.merge(value38, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        boolean boolean70 = type65.equals((java.lang.Object) 129);
        java.lang.String str71 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type65);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type75 = type74.getElementType();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter0.newValue(type75);
        java.lang.String str77 = type75.getClassName();
        int int78 = type75.getSort();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "void" + "'", str71, "void");
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "rg.mockito.asm.Type" + "'", str77, "rg.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int23 = type1.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter31.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier24.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str51 = type50.getInternalName();
        int int53 = type50.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier24.newValue(type50);
        boolean boolean55 = type1.equals((java.lang.Object) type50);
        int int57 = type50.getOpcode(18);
        org.mockito.asm.Type type58 = type50.getElementType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type59 = type58.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 172 + "'", int23 == 172);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 177 + "'", int53 == 177);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.copyOperation(abstractInsnNode19, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode17, value31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("LLZ;;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier39.merge(value44, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter37.copyOperation(abstractInsnNode38, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier53.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter37.copyOperation(abstractInsnNode52, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter37.copyOperation(abstractInsnNode61, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) "LLZ;;", value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.merge(value66, value71);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value4);
        java.lang.Throwable[] throwableArray6 = analyzerException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value10);
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = analyzerException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = analyzerException11.getSuppressed();
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Throwable) analyzerException5);
        java.lang.Throwable[] throwableArray18 = analyzerException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = analyzerException17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(ZV)L(ZV)L(JVSZ)Z;;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier18.merge(value36, value40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException42);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException43);
        java.lang.Throwable[] throwableArray45 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value49);
        java.lang.Throwable[] throwableArray51 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray53 = analyzerException50.getSuppressed();
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value57);
        java.lang.Throwable[] throwableArray59 = analyzerException58.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException58);
        analyzerException50.addSuppressed((java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value64);
        java.lang.Throwable[] throwableArray66 = analyzerException65.getSuppressed();
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value69);
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException70);
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Throwable) analyzerException65);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Throwable) analyzerException13);
        java.lang.Throwable[] throwableArray76 = analyzerException13.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = type14.getElementType();
        java.lang.String str17 = type16.getClassName();
        int int19 = type16.getOpcode(52);
        int int20 = type16.getSort();
        java.lang.String str21 = type16.getClassName();
        java.lang.String str22 = type16.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "g.mockito.asm.Type" + "'", str17, "g.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 56 + "'", int19 == 56);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "g.mockito.asm.Type" + "'", str21, "g.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lg/mockito/asm/Type;" + "'", str22, "Lg/mockito/asm/Type;");
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("LZ;");
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = type1.equals((java.lang.Object) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier52.merge(value70, value74);
        int int76 = value75.getSize();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier4.merge(value46, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)F", (java.lang.Object) 188, value77);
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value81);
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value85);
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException86);
        analyzerException78.addSuppressed((java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("Ldouble;", (java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("(V)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException89);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        java.lang.String str9 = type5.getDescriptor();
        int int10 = type5.getSort();
        java.lang.String str11 = type5.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "L(JVSZ)Z;" + "'", str9, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "L(JVSZ)Z;" + "'", str11, "L(JVSZ)Z;");
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        int int17 = type15.getSort();
        int int18 = type15.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        java.lang.Class<?> wildcardClass20 = basicInterpreter0.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = type21.toString();
        int int23 = type21.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str22, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: double");
        int int3 = type2.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier6.merge(value24, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter5.merge(value24, value44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter5.copyOperation(abstractInsnNode46, value61);
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Object) basicInterpreter5, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        int int69 = type68.getSize();
        int int70 = type68.getSize();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type67, type68, type71, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        java.lang.Class<?> wildcardClass75 = type65.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass75);
        java.lang.String str81 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        java.lang.String str82 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter5.newValue(type84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I;", (java.lang.Object) type2, value85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType("LZ;");
        java.lang.Class<?> wildcardClass89 = type88.getClass();
        java.lang.String str90 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass89);
        boolean boolean91 = type2.equals((java.lang.Object) str90);
        java.lang.String str92 = type2.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)Z" + "'", str74, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str76, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/Type" + "'", str80, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str81, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str82, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str90, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: double;" + "'", str92, "Lorg.mockito.asm.tree.analysis.AnalyzerException: double;");
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter22.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier15.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str42 = type41.getInternalName();
        int int44 = type41.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier15.newValue(type41);
        int int47 = type41.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        int int53 = type52.getSize();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean57 = type52.equals((java.lang.Object) analyzerException56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.newValue(type52);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type61 = type60.getElementType();
        int int63 = type60.getOpcode(195);
        int int65 = type60.getOpcode(60);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 177 + "'", int44 == 177);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 145 + "'", int47 == 145);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 199 + "'", int63 == 199);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 64 + "'", int65 == 64);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int12 = type10.getOpcode(36);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value32, value52, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value8, value15, value52);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type76);
        int int78 = type76.getSize();
        org.mockito.asm.Type type79 = type76.getElementType();
        int int80 = type76.getSort();
        org.mockito.asm.Type type81 = type76.getElementType();
        java.lang.Class<?> wildcardClass82 = type76.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier4.merge(value9, value14);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter2.copyOperation(abstractInsnNode3, value15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter2.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        int int23 = type20.getSort();
        int int24 = type20.getSize();
        java.lang.Object obj25 = null;
        boolean boolean26 = type20.equals(obj25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter2.newValue(type20);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str30 = type29.getInternalName();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter2.newValue(type29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter2.newValue(type33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type40, type41, type44, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray46);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray46);
        int int50 = type35.getSort();
        java.lang.String str51 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter2.newValue(type35);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        int int56 = type54.getOpcode(48);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter2.newValue(type54);
        boolean boolean59 = type1.equals((java.lang.Object) value58);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Z" + "'", str47, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)V" + "'", str48, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)V" + "'", str49, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "void" + "'", str51, "void");
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Z" + "'", str57, "Z");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        int int14 = type10.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier9.newValue(type10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean20 = type18.equals((java.lang.Object) "(JVSZ)Z");
        int int21 = type18.getSize();
        java.lang.String str22 = type18.getClassName();
        java.lang.String str23 = type18.getDescriptor();
        int int25 = type18.getOpcode(114);
        java.lang.String str26 = type18.getClassName();
        java.lang.Class<?> wildcardClass27 = type18.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier32.merge(value37, value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter30.copyOperation(abstractInsnNode31, value43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter30.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        boolean boolean51 = type47.equals((java.lang.Object) 4);
        boolean boolean53 = type47.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter30.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type73, type74, type77, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        int int81 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier56.newValue(type71);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter30.copyOperation(abstractInsnNode55, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected Z, but found I", (java.lang.Object) str29, value83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I;", (java.lang.Object) basicVerifier9, value83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = basicVerifier0.copyOperation(abstractInsnNode7, value83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 157 + "'", int14 == 157);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Z" + "'", str23, "Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 114 + "'", int25 == 114);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.Type" + "'", str29, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Z" + "'", str80, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        int int13 = type3.getOpcode((int) (byte) -1);
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = type3.equals(obj17);
        int int19 = type3.getSort();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = type3.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(JVSZ)V" + "'", str16, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = analyzerException13.getSuppressed();
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException13);
        java.lang.Throwable[] throwableArray18 = analyzerException7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = analyzerException7.getSuppressed();
        java.lang.Throwable[] throwableArray20 = analyzerException7.getSuppressed();
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException7);
        java.lang.String str22 = analyzerException3.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double" + "'", str22, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double");
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass68 = type67.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean78 = type73.equals((java.lang.Object) analyzerException77);
        int int80 = type73.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter70.newValue(type73);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter70.newValue(type83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;", (java.lang.Object) wildcardClass68, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.copyOperation(abstractInsnNode65, value84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int89 = type88.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray92 = analyzerException91.getSuppressed();
        boolean boolean93 = type88.equals((java.lang.Object) analyzerException91);
        java.lang.Object obj94 = null;
        boolean boolean95 = type88.equals(obj94);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.newValue(type88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/Type" + "'", str69, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 160 + "'", int80 == 160);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        java.lang.Object obj6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter7.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int11 = type10.getSize();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean15 = type10.equals((java.lang.Object) analyzerException14);
        int int17 = type10.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter7.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter7.merge(value33, value34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        int int41 = type40.getSize();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean45 = type40.equals((java.lang.Object) analyzerException44);
        int int47 = type40.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter37.newValue(type40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.toString();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter37.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.copyOperation(abstractInsnNode54, value66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter53.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter37.copyOperation(abstractInsnNode52, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter7.copyOperation(abstractInsnNode36, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;", obj6, value69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.copyOperation(abstractInsnNode4, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 160 + "'", int17 == 160);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 160 + "'", int47 == 160);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "D" + "'", str50, "D");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier10.newValue(type15);
        java.lang.Class<?> wildcardClass17 = basicVerifier10.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        boolean boolean22 = type0.equals((java.lang.Object) type21);
        java.lang.String str23 = type21.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str18, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str20, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str23, "org.mockito.asm.tree.analysis.BasicVerifier");
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;");
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier0.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = basicVerifier0.copyOperation(abstractInsnNode39, value40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(JVSZ)Z;");
        int int2 = type1.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier15.newValue(type20);
        java.lang.Class<?> wildcardClass22 = basicVerifier15.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier3.newValue(type23);
        java.lang.String str25 = type23.getInternalName();
        java.lang.String str26 = type23.getInternalName();
        java.lang.String str27 = type23.getClassName();
        int int29 = type23.getOpcode(131);
        int int30 = type23.getSort();
        int int31 = type23.getSort();
        org.mockito.asm.Type type32 = type23.getElementType();
        org.mockito.asm.Type type33 = type32.getElementType();
        org.mockito.asm.Type type34 = type33.getElementType();
        int int35 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)V;");
        int int39 = type37.getOpcode(10);
        org.mockito.asm.Type type40 = type37.getElementType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier44.newValue(type49);
        java.lang.Class<?> wildcardClass51 = basicVerifier44.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        int int54 = type53.getSort();
        int int56 = type53.getOpcode(165);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str58 = type57.toString();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type62, type63, type66, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray68);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray68);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray68);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray68);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray68);
        boolean boolean75 = type42.equals((java.lang.Object) str74);
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray77);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray77);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray77);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str25, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str26, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str27, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 135 + "'", int29 == 135);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 165 + "'", int56 == 165);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)Z" + "'", str69, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)V" + "'", str70, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)V" + "'", str71, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)S" + "'", str72, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str73, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)I" + "'", str74, "(JVSZ)I");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)LD;" + "'", str78, "(JVSZ)LD;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str79, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Lckito/asm/tree/analysis/BasicVerifier;" + "'", str80, "(JVSZ)Lckito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JVSZ)LL(JVSZ)Z;;" + "'", str81, "(JVSZ)LL(JVSZ)Z;;");
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type41);
        java.lang.String str46 = type41.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type49, type50, type53, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier57.newValue(type62);
        java.lang.Class<?> wildcardClass64 = basicVerifier57.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        boolean boolean69 = type47.equals((java.lang.Object) type68);
        int int70 = type47.getSort();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/AnalyzerException");
        int int73 = type72.getSize();
        org.mockito.asm.Type[] typeArray75 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)S");
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray75);
        int int80 = type41.getOpcode(191);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "S" + "'", str44, "S");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "S" + "'", str46, "S");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)Z" + "'", str56, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str65, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(JVSZ)Z" + "'", str77, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)S" + "'", str78, "(JVSZ)S");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 191 + "'", int80 == 191);
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter1, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I", (java.lang.Throwable) analyzerException33);
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException34);
        java.lang.Throwable[] throwableArray36 = analyzerException34.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.mockito.asm.Type[] typeArray2 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)I");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type14, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray19);
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray22);
        int int24 = type11.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier3.newValue(type11);
        int int26 = value25.getSize();
        int int27 = value25.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LZV)LZ;", (java.lang.Object) typeArray2, value25);
        java.lang.String str29 = analyzerException28.toString();
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(ZV)Z" + "'", str20, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        int int63 = type62.getSize();
        int int64 = type62.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type61, type62, type65, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray67);
        java.lang.Class<?> wildcardClass69 = type59.getClass();
        java.lang.String str70 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type75 = type74.getElementType();
        boolean boolean76 = type57.equals((java.lang.Object) type74);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)Z" + "'", str68, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str70, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str71, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str72, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/Type" + "'", str73, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "S" + "'", str44, "S");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier31.merge(value39, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier27.merge(value45, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier55.merge(value63, value68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier51.merge(value69, value73);
        int int75 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier3.merge(value45, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Object) 18, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        analyzerException77.addSuppressed((java.lang.Throwable) analyzerException79);
        java.lang.Throwable[] throwableArray81 = analyzerException79.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I", (java.lang.Throwable) analyzerException79);
        java.lang.String str83 = analyzerException82.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I" + "'", str83, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter22.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier15.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str42 = type41.getInternalName();
        int int44 = type41.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier15.newValue(type41);
        int int47 = type41.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        int int57 = type56.getSort();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier52.newValue(type56);
        java.lang.Class<?> wildcardClass59 = basicVerifier52.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str65 = type64.getInternalName();
        int int67 = type64.getOpcode(15);
        org.mockito.asm.Type type68 = type64.getElementType();
        org.mockito.asm.Type type69 = type64.getElementType();
        int int70 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier73.newValue(type74);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.copyOperation(abstractInsnNode72, value76);
        int int78 = value76.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 177 + "'", int44 == 177);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 145 + "'", int47 == 145);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str60, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)Z" + "'", str65, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)C: expected Lorg/mockito/asm/tree/analysis/BasicVerifier;, but found null");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)C: expected Lorg/mockito/asm/tree/analysis/BasicVerifier;, but found null" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)C: expected Lorg/mockito/asm/tree/analysis/BasicVerifier;, but found null");
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str5 = type4.getInternalName();
        java.lang.String str6 = type4.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException11);
        boolean boolean15 = type4.equals((java.lang.Object) analyzerException14);
        int int16 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean34 = type29.equals((java.lang.Object) analyzerException33);
        int int36 = type29.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter26.newValue(type29);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type38);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier19.newValue(type38);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str44 = type43.toString();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier19.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter0.copyOperation(abstractInsnNode18, value45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I");
        int int49 = type48.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        java.lang.String str54 = type51.getDescriptor();
        int int56 = type51.getOpcode(160);
        int int57 = type51.getSort();
        boolean boolean58 = type48.equals((java.lang.Object) type51);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.newValue(type48);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("(ZV)LJ;");
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.newOperation(abstractInsnNode63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 160 + "'", int36 == 160);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "D" + "'", str39, "D");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "LC;" + "'", str44, "LC;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Z" + "'", str54, "Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 160 + "'", int56 == 160);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier30.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.copyOperation(abstractInsnNode29, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        boolean boolean47 = type43.equals((java.lang.Object) 4);
        java.lang.String str48 = type43.getClassName();
        java.lang.String str49 = type43.getClassName();
        java.lang.String str50 = type43.toString();
        java.lang.String str51 = type43.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter28.newValue(type43);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str55 = type54.getClassName();
        java.lang.String str56 = type54.toString();
        java.lang.String str57 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.copyOperation(abstractInsnNode27, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException65);
        boolean boolean67 = type61.equals((java.lang.Object) analyzerException65);
        org.mockito.asm.Type type68 = type61.getElementType();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        java.lang.String str74 = type71.getDescriptor();
        int int76 = type71.getOpcode(160);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean80 = type78.equals((java.lang.Object) "(JVSZ)Z");
        int int81 = type78.getSize();
        boolean boolean82 = type71.equals((java.lang.Object) type78);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.newValue(type78);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        java.util.List list85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.naryOperation(abstractInsnNode84, list85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)Z;" + "'", str56, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L(JVSZ)Z;" + "'", str57, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Z" + "'", str74, "Z");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 160 + "'", int76 == 160);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type27, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        org.mockito.asm.Type[] typeArray35 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int37 = type24.getSort();
        java.lang.String str38 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        boolean boolean47 = type44.equals((java.lang.Object) 169);
        java.lang.String str48 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type44);
        int int50 = type44.getSort();
        int int51 = type44.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type52 = type44.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(ZV)Z" + "'", str33, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(15);
        java.lang.String str5 = type1.toString();
        org.mockito.asm.Type type6 = type1.getElementType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        boolean boolean14 = type10.equals((java.lang.Object) 4);
        boolean boolean16 = type10.equals((java.lang.Object) 193);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray26);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        int int30 = type10.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier32.merge(value50, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter31.merge(value50, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type10, value70);
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException78);
        analyzerException72.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)D", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Throwable) analyzerException82);
        boolean boolean84 = type1.equals((java.lang.Object) analyzerException82);
        org.mockito.asm.Type type85 = type1.getElementType();
        int int86 = type1.getSize();
        java.lang.Class<?> wildcardClass87 = type1.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)Z;" + "'", str5, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str88, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Throwable[] throwableArray46 = analyzerException45.getSuppressed();
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException45);
        java.lang.Throwable[] throwableArray48 = analyzerException37.getSuppressed();
        java.lang.Throwable[] throwableArray49 = analyzerException37.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException37);
        analyzerException34.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass54 = analyzerException53.getClass();
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getClassName();
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        int int11 = type8.getSort();
        int int12 = type8.getSize();
        boolean boolean14 = type8.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type32, type33, type36, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        int int40 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier15.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        java.lang.String str50 = type47.getDescriptor();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type46, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray51);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray51);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray51);
        java.lang.String str57 = type1.toString();
        java.lang.String str58 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "V" + "'", str50, "V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)Z" + "'", str52, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(ZV)Z" + "'", str53, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(ZV)Z" + "'", str54, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(ZV)F" + "'", str55, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(ZV)Z" + "'", str56, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Z" + "'", str57, "Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Z" + "'", str58, "Z");
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        int int22 = type18.getSort();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier48.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter46.copyOperation(abstractInsnNode47, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter46.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier39.newValue(type61);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.merge(value38, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        boolean boolean70 = type65.equals((java.lang.Object) 129);
        java.lang.String str71 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "void" + "'", str71, "void");
        org.junit.Assert.assertNull(value72);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter7.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int11 = type10.getSize();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean15 = type10.equals((java.lang.Object) analyzerException14);
        int int17 = type10.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter7.newValue(type10);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.toString();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.newValue(type19);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type19);
        java.lang.Class<?> wildcardClass23 = basicVerifier0.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 160 + "'", int17 == 160);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str24, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str26, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I;");
        int int3 = type1.getOpcode(185);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 189 + "'", int3 == 189);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type29);
        java.lang.Class<?> wildcardClass31 = basicVerifier24.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str34 = type33.toString();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type33);
        int int36 = type33.getSize();
        int int37 = type33.getSize();
        org.mockito.asm.Type type38 = type33.getElementType();
        int int40 = type38.getOpcode(107);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = type38.getElementType();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str32, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str34, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 111 + "'", int40 == 111);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "g.mockito.asm.tree.analysis.BasicVerifier" + "'", str41, "g.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(type42);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;: expected class org.mockito.asm.Type, but found R", (java.lang.Throwable) analyzerException2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("LLorg/mockito/asm/tree/analysis/BasicValue;;", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LL(JVSZ)Z;;", (java.lang.Throwable) analyzerException11);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.String str10 = type0.getDescriptor();
        java.lang.String str11 = type0.toString();
        java.lang.String str12 = type0.toString();
        java.lang.String str13 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLZ;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLZ;" + "'", str2, "LLZ;");
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier20.newValue(type25);
        java.lang.Class<?> wildcardClass27 = basicVerifier20.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier8.newValue(type28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier8.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int36 = type35.getSort();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier8.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str40 = type39.getClassName();
        java.lang.String str41 = type39.toString();
        java.lang.String str42 = type39.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier8.newValue(type39);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type46, type47, type50, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray52);
        java.lang.Class<?> wildcardClass54 = type44.getClass();
        java.lang.String str55 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        int int60 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier8.newValue(type59);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.unaryOperation(abstractInsnNode7, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str32, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "L(JVSZ)Z;" + "'", str41, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "L(JVSZ)Z;" + "'", str42, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(JVSZ)Z" + "'", str53, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str55, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str58, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int22 = type1.getSize();
        int int24 = type1.getOpcode(102);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str39 = type38.getDescriptor();
        java.lang.String str40 = type38.getInternalName();
        java.lang.String str41 = type38.getInternalName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type;");
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray45);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray45);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray45);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 106 + "'", int24 == 106);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str39, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/Type" + "'", str40, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type;;" + "'", str46, "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type;;");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str47, "(JVSZ)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str48, "(JVSZ)L(JVSZ)V;");
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", throwable1);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value14);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException15);
        java.lang.Throwable[] throwableArray17 = analyzerException11.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException11);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException18);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException18);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException18);
        java.lang.Class<?> wildcardClass22 = analyzerException18.getClass();
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass22);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str23, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str52 = type51.getInternalName();
        org.mockito.asm.Type type53 = type51.getElementType();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str62 = type61.toString();
        int int64 = type61.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier56.newValue(type61);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier56.newValue(type67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.copyOperation(abstractInsnNode55, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str52, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 175 + "'", int64 == 175);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)V" + "'", str68, "(JVSZ)V");
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier2.merge(value20, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier26.merge(value44, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier50.merge(value68, value72);
        int int74 = value73.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier2.merge(value44, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)F", (java.lang.Object) 188, value75);
        java.lang.Throwable[] throwableArray77 = analyzerException76.getSuppressed();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lrg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.Type", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier37.merge(value55, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.Type", (java.lang.Throwable) analyzerException62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: F: expected 178, but found I");
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("g/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException65);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException65);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str14 = type13.getInternalName();
        int int16 = type13.getOpcode(110);
        int int17 = type13.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 114 + "'", int16 == 114);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type14.getOpcode(12);
        int int17 = type14.getDimensions();
        int int19 = type14.getOpcode(120);
        org.mockito.asm.Type type20 = type14.getElementType();
        int int21 = type20.getSize();
        java.lang.String str22 = type20.getClassName();
        int int23 = type20.getSize();
        int int25 = type20.getOpcode(0);
        java.lang.String str26 = type20.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 124 + "'", int19 == 124);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "g.mockito.asm.Type" + "'", str22, "g.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "g/mockito/asm/Type" + "'", str26, "g/mockito/asm/Type");
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        boolean boolean59 = type46.equals((java.lang.Object) value57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray64);
        int int67 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type46);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;");
        org.mockito.asm.Type type75 = type74.getElementType();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.newValue(type75);
        int int78 = type75.getOpcode(196661);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)F" + "'", str65, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str66, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 196665 + "'", int78 == 196665);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LJ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)D");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException6);
        java.lang.String str8 = analyzerException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str8, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        java.lang.String str29 = type23.getInternalName();
        int int31 = type23.getOpcode(60);
        org.mockito.asm.Type type32 = type23.getElementType();
        java.lang.String str33 = type32.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 64 + "'", int31 == 64);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "J" + "'", str33, "J");
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        int int16 = type13.getSort();
        int int17 = type13.getSize();
        boolean boolean19 = type13.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        int int45 = type35.getSort();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier20.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        int int53 = type52.getSize();
        int int54 = type52.getSize();
        java.lang.String str55 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type51, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray56);
        java.lang.String str60 = type13.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type13);
        int int62 = type13.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(ZV)Z" + "'", str57, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)Z" + "'", str59, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value57);
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value61);
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException62);
        java.lang.Throwable[] throwableArray64 = analyzerException58.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException58);
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str75 = type74.getClassName();
        int int76 = type74.getSize();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier73.newValue(type74);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier78 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str80 = type79.getClassName();
        int int81 = type79.getSize();
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier78.newValue(type79);
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier69.merge(value77, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F", (java.lang.Object) analyzerException53, value83);
        int int86 = value83.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicVerifier0.copyOperation(abstractInsnNode50, value83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getDescriptor();
        java.lang.String str47 = type45.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter48.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException58);
        boolean boolean61 = type51.equals((java.lang.Object) analyzerException60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter48.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier63.merge(value71, value76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        int int82 = type81.getSize();
        int int83 = type81.getSize();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type80, type81, type84, type85 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray86);
        int int88 = type78.getSort();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier63.newValue(type78);
        java.lang.String str90 = type78.toString();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter48.newValue(type78);
        boolean boolean92 = type45.equals((java.lang.Object) value91);
        int int93 = value91.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.unaryOperation(abstractInsnNode44, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Z" + "'", str46, "Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Z" + "'", str47, "Z");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(JVSZ)Z" + "'", str87, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Z" + "'", str90, "Z");
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter16.merge(value35, value55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        java.lang.String str75 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier57.newValue(type72);
        int int77 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter16.newValue(type72);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = type80.getElementType();
        java.lang.String str83 = type80.getDescriptor();
        java.lang.Class<?> wildcardClass84 = type80.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter16.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.copyOperation(abstractInsnNode15, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newValue(type88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "V" + "'", str75, "V");
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JVSZ)Z" + "'", str81, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L(JVSZ)Z;" + "'", str83, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException15);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value25);
        java.lang.Throwable[] throwableArray27 = analyzerException26.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException30);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value39);
        java.lang.Throwable[] throwableArray41 = analyzerException40.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier55.merge(value63, value68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier51.merge(value69, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException76);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException78);
        analyzerException31.addSuppressed((java.lang.Throwable) analyzerException78);
        java.lang.Throwable[] throwableArray81 = analyzerException31.getSuppressed();
        boolean boolean82 = type1.equals((java.lang.Object) throwableArray81);
        java.lang.String str83 = type1.getInternalName();
        org.mockito.asm.Type type84 = type1.getElementType();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = type84.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLZ;;" + "'", str2, "LLZ;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "LZ;" + "'", str83, "LZ;");
        org.junit.Assert.assertNotNull(type84);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        int int7 = type4.getSort();
        int int8 = type4.getSort();
        java.lang.String str9 = type4.toString();
        java.lang.String str10 = type4.getClassName();
        java.lang.String str11 = type4.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "S" + "'", str9, "S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "short" + "'", str10, "short");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "S" + "'", str11, "S");
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        boolean boolean6 = type1.equals((java.lang.Object) analyzerException4);
        java.lang.String str7 = analyzerException4.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F" + "'", str7, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        int int6 = type2.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean12 = type10.equals((java.lang.Object) "(JVSZ)Z");
        int int13 = type10.getSize();
        java.lang.String str14 = type10.getClassName();
        java.lang.String str15 = type10.getDescriptor();
        int int17 = type10.getOpcode(114);
        java.lang.String str18 = type10.getClassName();
        java.lang.Class<?> wildcardClass19 = type10.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter22.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        boolean boolean43 = type39.equals((java.lang.Object) 4);
        boolean boolean45 = type39.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter22.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier48.merge(value56, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type65, type66, type69, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        int int73 = type63.getSort();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier48.newValue(type63);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter22.copyOperation(abstractInsnNode47, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected Z, but found I", (java.lang.Object) str21, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I;", (java.lang.Object) basicVerifier1, value75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicVerifier1.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 157 + "'", int6 == 157);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Z" + "'", str15, "Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 114 + "'", int17 == 114);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.mockito.asm.Type" + "'", str21, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        int int14 = type12.getOpcode(141);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.naryOperation(abstractInsnNode17, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 141 + "'", int14 == 141);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(value16);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LD;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.Type", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str9 = type8.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier12.merge(value17, value22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter10.copyOperation(abstractInsnNode11, value23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter10.newValue(type25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;", (java.lang.Object) type8, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)V", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier38.merge(value43, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.copyOperation(abstractInsnNode37, value49);
        int int51 = value50.getSize();
        int int52 = value50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)S", (java.lang.Throwable) analyzerException53);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException55);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException55);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ldouble;" + "'", str9, "Ldouble;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        int int62 = type61.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        boolean boolean68 = type64.equals((java.lang.Object) 4);
        java.lang.String str69 = type64.getClassName();
        java.lang.String str70 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier73.newValue(type74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.SHORT_TYPE;
        int int78 = type77.getSort();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier73.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter80.newValue(type81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        int int84 = type83.getSize();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean88 = type83.equals((java.lang.Object) analyzerException87);
        int int90 = type83.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter80.newValue(type83);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str93 = type92.toString();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter80.newValue(type92);
        org.mockito.asm.tree.analysis.Value value95 = basicVerifier73.newValue(type92);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.copyOperation(abstractInsnNode72, value95);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 160 + "'", int90 == 160);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "D" + "'", str93, "D");
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type15.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier24.merge(value42, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException48);
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException52);
        java.lang.Throwable[] throwableArray54 = analyzerException20.getSuppressed();
        java.lang.Class<?> wildcardClass55 = analyzerException20.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        boolean boolean57 = type15.equals((java.lang.Object) str56);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str56, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type29);
        java.lang.Class<?> wildcardClass31 = basicVerifier24.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str34 = type33.toString();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type43);
        java.lang.Class<?> wildcardClass46 = basicVerifier39.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        int int49 = type48.getDimensions();
        int int51 = type48.getOpcode(109);
        int int52 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type56, type57, type60, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier64.newValue(type69);
        java.lang.Class<?> wildcardClass71 = basicVerifier64.getClass();
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        boolean boolean76 = type54.equals((java.lang.Object) type75);
        int int77 = type54.getSort();
        int int78 = type54.getSort();
        java.lang.String str79 = type54.toString();
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter36.newValue(type54);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type54);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("B");
        int int84 = type83.getSize();
        int int86 = type83.getOpcode(82);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type83);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str32, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str34, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 113 + "'", int51 == 113);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(JVSZ)Z" + "'", str63, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str72, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str74, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Z" + "'", str79, "Z");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 82 + "'", int86 == 82);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        java.lang.String str42 = type39.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier24.newValue(type39);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier24.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier47.merge(value55, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        int int63 = type62.getSize();
        int int64 = type62.getSize();
        java.lang.String str65 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier47.newValue(type62);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier24.newValue(type62);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str70 = type69.getInternalName();
        int int72 = type69.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier24.newValue(type69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        int int78 = type77.getSize();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean82 = type77.equals((java.lang.Object) analyzerException81);
        int int84 = type77.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter74.newValue(type77);
        java.lang.String str86 = type77.getDescriptor();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier24.newValue(type77);
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier0.newValue(type77);
        java.lang.String str89 = type77.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "V" + "'", str42, "V");
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "V" + "'", str65, "V");
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)Z" + "'", str70, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 177 + "'", int72 == 177);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 160 + "'", int84 == 160);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "V" + "'", str86, "V");
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "void" + "'", str89, "void");
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type14.getOpcode(12);
        int int17 = type14.getDimensions();
        int int19 = type14.getOpcode(120);
        org.mockito.asm.Type type20 = type14.getElementType();
        int int21 = type20.getSize();
        java.lang.String str22 = type20.getClassName();
        int int23 = type20.getSize();
        int int25 = type20.getOpcode(0);
        int int26 = type20.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 124 + "'", int19 == 124);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "g.mockito.asm.Type" + "'", str22, "g.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier18.merge(value36, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type44, type45, type48, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray50);
        int int52 = type42.getSort();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier18.newValue(type42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException61);
        java.lang.Throwable[] throwableArray64 = analyzerException63.getSuppressed();
        analyzerException55.addSuppressed((java.lang.Throwable) analyzerException63);
        java.lang.Class<?> wildcardClass66 = analyzerException55.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier18.newValue(type67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier18.newValue(type69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.unaryOperation(abstractInsnNode17, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        int int7 = type4.getSort();
        int int8 = type4.getSort();
        int int9 = type4.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        boolean boolean8 = type4.equals((java.lang.Object) false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str11 = type10.toString();
        java.lang.String str12 = type10.toString();
        boolean boolean13 = type4.equals((java.lang.Object) type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        java.lang.Class<?> wildcardClass19 = type15.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type24 = type23.getElementType();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray33);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSort();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getDescriptor();
        java.lang.String str44 = type42.toString();
        boolean boolean45 = type41.equals((java.lang.Object) type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType("F");
        java.lang.String str48 = type47.getClassName();
        java.lang.String str49 = type47.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.copyOperation(abstractInsnNode51, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter50.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        boolean boolean72 = type68.equals((java.lang.Object) 4);
        boolean boolean74 = type68.equals((java.lang.Object) 193);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        int int80 = type79.getSize();
        int int81 = type79.getSize();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray84 = new org.mockito.asm.Type[] { type78, type79, type82, type83 };
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray84);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray84);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray84);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray84);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray84);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray84);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray84);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray84);
        java.lang.String str93 = type4.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = type4.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LZ;" + "'", str11, "LZ;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LZ;" + "'", str12, "LZ;");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str35, "(JVSZ)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)S" + "'", str36, "(JVSZ)S");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "F" + "'", str49, "F");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(JVSZ)Z" + "'", str85, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(JVSZ)V" + "'", str86, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(JVSZ)Z" + "'", str87, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JVSZ)Z" + "'", str88, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(JVSZ)F" + "'", str89, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(JVSZ)D" + "'", str90, "(JVSZ)D");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)F" + "'", str91, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)S" + "'", str92, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "S" + "'", str93, "S");
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value3);
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        java.lang.Throwable[] throwableArray10 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;", (java.lang.Throwable) analyzerException4);
        java.lang.Throwable throwable13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", throwable13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value22);
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value26);
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException27);
        java.lang.Throwable[] throwableArray29 = analyzerException23.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException23);
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException30);
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException30);
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException30);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass35 = analyzerException11.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("L(JVSZ)Z;");
        org.mockito.asm.Type[] typeArray60 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)F");
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier64.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        int int70 = type69.getSize();
        int int71 = type69.getSize();
        java.lang.String str72 = type69.getDescriptor();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type68, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray73);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicInterpreter0.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)LL(JVSZ)Z;;" + "'", str61, "(JVSZ)LL(JVSZ)Z;;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "V" + "'", str72, "V");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Z" + "'", str74, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)LZ;" + "'", str75, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)LL(JVSZ)Z;;" + "'", str76, "(ZV)LL(JVSZ)Z;;");
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;: expected 56, but found I");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier4.merge(value9, value14);
        boolean boolean16 = type3.equals((java.lang.Object) value14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.Type[] typeArray21 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray21);
        int int25 = type3.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException36);
        boolean boolean39 = type29.equals((java.lang.Object) analyzerException38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type58, type59, type62, type63 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray64);
        int int66 = type56.getSort();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier41.newValue(type56);
        java.lang.String str68 = type56.toString();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter26.newValue(type56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Object) int25, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException71.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)F" + "'", str22, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str23, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 172 + "'", int25 == 172);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)Z" + "'", str65, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("V");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("J");
        java.lang.String str26 = type25.getInternalName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter0.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.naryOperation(abstractInsnNode29, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "void" + "'", str19, "void");
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "J" + "'", str26, "J");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str14 = type13.getInternalName();
        org.mockito.asm.Type type15 = type13.getElementType();
        java.lang.String str16 = type15.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/Type;" + "'", str16, "Lg/mockito/asm/Type;");
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("C");
        int int45 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier0.newValue(type44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.copyOperation(abstractInsnNode47, value48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("J");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        int int4 = type3.getSort();
        int int6 = type3.getOpcode(165);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type12, type13, type16, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray18);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray18);
        java.lang.String str24 = type1.getInternalName();
        int int26 = type1.getOpcode(154);
        java.lang.String str27 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 165 + "'", int6 == 165);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)V" + "'", str20, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)S" + "'", str22, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)LJ;" + "'", str23, "(JVSZ)LJ;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "J" + "'", str24, "J");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 158 + "'", int26 == 158);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LJ;" + "'", str27, "LJ;");
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        java.lang.String str6 = type3.toString();
        int int7 = type3.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        int int25 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        int int32 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier27.newValue(type31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.copyOperation(abstractInsnNode35, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter34.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier27.newValue(type49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str54 = type53.getInternalName();
        int int56 = type53.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier27.newValue(type53);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier60.merge(value65, value70);
        boolean boolean72 = type59.equals((java.lang.Object) value70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray77);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier27.newValue(type59);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier8.merge(value26, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V", (java.lang.Object) type3, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException83.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JVSZ)Z" + "'", str4, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "L(JVSZ)Z;" + "'", str6, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(JVSZ)Z" + "'", str54, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 177 + "'", int56 == 177);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)F" + "'", str78, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str79, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str6 = type5.toString();
        int int8 = type5.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int13 = type11.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter16.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean37 = type35.equals((java.lang.Object) "(JVSZ)Z");
        int int38 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter16.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        boolean boolean54 = type44.equals((java.lang.Object) analyzerException53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.newValue(type44);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter16.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.SHORT_TYPE;
        int int63 = type62.getSort();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type62);
        java.lang.Class<?> wildcardClass65 = basicVerifier58.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = type66.toString();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter16.newValue(type66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.unaryOperation(abstractInsnNode15, value68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 175 + "'", int8 == 175);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str67, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        java.lang.String str4 = type1.toString();
        java.lang.String str5 = type1.toString();
        int int6 = type1.getSort();
        org.mockito.asm.Type type7 = type1.getElementType();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value10);
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = analyzerException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = analyzerException11.getSuppressed();
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException19);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException19);
        java.lang.Class<?> wildcardClass23 = analyzerException11.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = type24.getElementType();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        boolean boolean29 = type24.equals((java.lang.Object) typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray28);
        int int31 = type1.getSort();
        java.lang.String str32 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L(JVSZ)Z;" + "'", str3, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(JVSZ)Z;" + "'", str4, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)Z;" + "'", str5, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str30, "(JVSZ)L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        java.lang.Throwable throwable5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", throwable5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        analyzerException44.addSuppressed((java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException44);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException55);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException64);
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException71);
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException64);
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException75);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = type19.getElementType();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier14.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        java.lang.String str26 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier14.newValue(type24);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier14.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier34.merge(value39, value44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter32.copyOperation(abstractInsnNode33, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter32.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter32.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str59 = type58.toString();
        int int61 = type58.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier53.newValue(type58);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int66 = type64.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier53.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter32.copyOperation(abstractInsnNode52, value67);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.merge(value31, value68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.copyOperation(abstractInsnNode70, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "V" + "'", str26, "V");
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str30, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 175 + "'", int61 == 175);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        int int27 = value26.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter28.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter28.copyOperation(abstractInsnNode31, value38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Object) value26, value38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException41);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value40);
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("Lchar;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            analyzerException2.addSuppressed(throwable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("rg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)D", throwable1);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        int int43 = value42.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = basicInterpreter0.unaryOperation(abstractInsnNode25, value42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        java.lang.String str16 = type13.getDescriptor();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type12, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray17);
        org.mockito.asm.Type[] typeArray20 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray20);
        int int22 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier1.newValue(type9);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int26 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier1.newValue(type25);
        java.lang.String str28 = type25.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(ZV)Z" + "'", str18, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)Z" + "'", str21, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "L(JVSZ)L(JVSZ)V;;" + "'", str28, "L(JVSZ)L(JVSZ)V;;");
        org.junit.Assert.assertNotNull(value29);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier3.newValue(type18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier3.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier3.newValue(type41);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str49 = type48.getInternalName();
        int int51 = type48.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier3.newValue(type48);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier3.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        java.lang.String str59 = type58.getInternalName();
        int int60 = type58.getSort();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier3.newValue(type58);
        boolean boolean62 = type0.equals((java.lang.Object) basicVerifier3);
        int int63 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 177 + "'", int51 == 177);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str59, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.Value value2 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str4 = type3.toString();
        int int6 = type3.getOpcode(68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        int int26 = type25.getSize();
        int int27 = type25.getSize();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type24, type25, type28, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray30);
        int int32 = type22.getSort();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier7.newValue(type22);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        java.lang.String str36 = type35.getInternalName();
        java.lang.String str37 = type35.getDescriptor();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier7.newValue(type35);
        boolean boolean39 = type3.equals((java.lang.Object) value38);
        int int40 = value38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.merge(value38, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        java.util.List list44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = basicVerifier0.naryOperation(abstractInsnNode43, list44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 68 + "'", int6 == 68);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)Z" + "'", str31, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str36, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str37, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value42);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(15);
        org.mockito.asm.Type type5 = type1.getElementType();
        org.mockito.asm.Type type6 = type1.getElementType();
        int int7 = type1.getSort();
        int int9 = type1.getOpcode(128);
        java.lang.String str10 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 132 + "'", int9 == 132);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = type2.getElementType();
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        int int10 = type9.getSize();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean14 = type9.equals((java.lang.Object) analyzerException13);
        int int16 = type9.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter6.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier32.merge(value37, value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter30.copyOperation(abstractInsnNode31, value43);
        int int45 = value44.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.merge(value29, value44);
        int int47 = value46.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Object) type2, value46);
        int int49 = type2.getSort();
        java.lang.String str50 = type2.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(JVSZ)Z" + "'", str3, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 160 + "'", int16 == 160);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L(JVSZ)Z;" + "'", str50, "L(JVSZ)Z;");
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier12.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier26.merge(value31, value36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter24.copyOperation(abstractInsnNode25, value37);
        int int39 = value38.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value23, value38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str42 = type41.toString();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type46, type47, type50, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray52);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray52);
        int int56 = type41.getSort();
        java.lang.String str57 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        java.util.List list60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.naryOperation(abstractInsnNode59, list60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "V" + "'", str42, "V");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(JVSZ)Z" + "'", str53, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(JVSZ)V" + "'", str54, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)V" + "'", str55, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "void" + "'", str57, "void");
        org.junit.Assert.assertNull(value58);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("L(JVSZ)Z;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value11);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = analyzerException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException12.getSuppressed();
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;;", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ZV)LZ: expected Lorg.mockito.asm.Type, but found null", (java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray20 = analyzerException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        java.lang.String str34 = type24.getDescriptor();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type41, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray46);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray46);
        java.lang.String str50 = type24.toString();
        int int51 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type24);
        int int53 = value52.getSize();
        int int54 = value52.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(ZV)Z" + "'", str47, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)LZ;" + "'", str48, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("LLchar;;");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier33.merge(value41, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier29.merge(value47, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier53.merge(value71, value75);
        int int77 = value76.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier5.merge(value47, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) 123, value76);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException79);
        java.lang.String str81 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: LLchar;;" + "'", str81, "org.mockito.asm.tree.analysis.AnalyzerException: LLchar;;");
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(15);
        java.lang.String str5 = type1.getInternalName();
        int int7 = type1.getOpcode(165);
        org.mockito.asm.Type[] typeArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int3 = type2.getSize();
        java.lang.String str4 = type2.getClassName();
        java.lang.String str5 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter6.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter6.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        int int27 = type24.getSort();
        int int28 = type24.getSize();
        java.lang.Object obj29 = null;
        boolean boolean30 = type24.equals(obj29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter6.newValue(type24);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str34 = type33.getInternalName();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter6.newValue(type33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter6.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier41.merge(value59, value63);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter66.newValue(type67);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter66.copyOperation(abstractInsnNode69, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Object) value64, value76);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter6.copyOperation(abstractInsnNode39, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLLorg/mockito/asm/Type;;;", (java.lang.Object) type2, value76);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str4, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;" + "'", str5, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        int int5 = type1.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int9 = type8.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        boolean boolean13 = type8.equals((java.lang.Object) analyzerException11);
        int int14 = type8.getSize();
        java.lang.String str15 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier18.merge(value36, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier42.merge(value60, value64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        int int82 = type80.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier79.newValue(type80);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier70.merge(value78, value83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier85.newValue(type86);
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier66.merge(value84, value88);
        int int90 = value89.getSize();
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier18.merge(value60, value89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicVerifier0.copyOperation(abstractInsnNode17, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "float" + "'", str2, "float");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 157 + "'", int5 == 157);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("(JVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter3.newValue(type4);
        boolean boolean7 = type4.equals((java.lang.Object) 169);
        java.lang.String str8 = type4.getClassName();
        boolean boolean10 = type4.equals((java.lang.Object) "(ZV)D");
        java.lang.String str11 = type4.getDescriptor();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str15 = type14.getClassName();
        boolean boolean17 = type14.equals((java.lang.Object) "boolean");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier18.merge(value26, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type35, type36, type39, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        int int43 = type33.getSort();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier18.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        java.lang.String str53 = type50.getDescriptor();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type49, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray54);
        java.lang.String str57 = type33.getClassName();
        java.lang.String str58 = type33.getClassName();
        boolean boolean59 = type14.equals((java.lang.Object) str58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type64, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "void" + "'", str8, "void");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "double" + "'", str15, "double");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "V" + "'", str53, "V");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(ZV)Z" + "'", str55, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(ZV)Z" + "'", str56, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(ZV)Z" + "'", str70, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)D" + "'", str71, "(ZV)D");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;" + "'", str72, "(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)V" + "'", str73, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)LJVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;" + "'", str74, "(ZV)LJVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)Lckito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(ZV)Lckito/asm/tree/analysis/BasicVerifier;;" + "'", str2, "L(ZV)Lckito/asm/tree/analysis/BasicVerifier;;");
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", obj12, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.merge(value31, value55);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.Type;");
        int int62 = type61.getSize();
        int int63 = type61.getDimensions();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        int int71 = type70.getSize();
        int int72 = type70.getSize();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type69, type70, type73, type74 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray75);
        java.lang.Class<?> wildcardClass77 = type67.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier66.newValue(type81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.copyOperation(abstractInsnNode65, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JVSZ)Z" + "'", str76, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str78, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLLorg/mockito/asm/Type;;;", (java.lang.Throwable) analyzerException2);
        java.lang.String str4 = analyzerException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)LLLorg/mockito/asm/Type;;;" + "'", str4, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)LLLorg/mockito/asm/Type;;;");
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getDescriptor();
        int int5 = type1.getSort();
        boolean boolean7 = type1.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass8 = type1.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        boolean boolean14 = type10.equals((java.lang.Object) 4);
        boolean boolean16 = type10.equals((java.lang.Object) 193);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray26);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        int int30 = type10.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier32.merge(value50, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter31.merge(value50, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type10, value70);
        int int73 = value70.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Object) wildcardClass8, value70);
        java.lang.Class<?> wildcardClass75 = analyzerException74.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V" + "'", str4, "V");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str76, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str80, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("LLorg/mockito/asm/tree/analysis/BasicValue;;", (java.lang.Throwable) analyzerException8);
        java.lang.String str11 = analyzerException8.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str11, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException41);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException42);
        java.lang.Class<?> wildcardClass44 = analyzerException12.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str48, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str49, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;, but found D");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getInternalName();
        java.lang.String str4 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str2, "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue" + "'", str3, "rg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str4, "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        int int25 = type24.getSize();
        int int26 = type24.getSize();
        java.lang.String str27 = type24.getDescriptor();
        boolean boolean29 = type24.equals((java.lang.Object) 129);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str33 = type32.toString();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier0.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        boolean boolean39 = type35.equals((java.lang.Object) 4);
        boolean boolean41 = type35.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        int int67 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier42.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        java.lang.String str77 = type74.getDescriptor();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type73, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray78);
        boolean boolean81 = type35.equals((java.lang.Object) typeArray78);
        int int82 = type35.getSize();
        int int83 = type35.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier0.newValue(type35);
        int int85 = value84.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Z" + "'", str33, "Z");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "V" + "'", str77, "V");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)Z" + "'", str79, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Z" + "'", str80, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)LLC;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter9.copyOperation(abstractInsnNode24, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter8.merge(value49, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException6, value49);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value73);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = analyzerException74.getSuppressed();
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value79);
        java.lang.Throwable[] throwableArray81 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = analyzerException80.getSuppressed();
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException85.addSuppressed((java.lang.Throwable) analyzerException87);
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.BasicValue", (java.lang.Throwable) analyzerException85);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str61 = type60.getDescriptor();
        int int62 = type60.getSize();
        int int63 = type60.getSort();
        java.lang.String str64 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier66.newValue(type71);
        java.lang.Class<?> wildcardClass73 = basicVerifier66.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str75 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str78 = type77.toString();
        java.lang.String str79 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier0.newValue(type77);
        int int82 = type77.getOpcode(94);
        int int83 = type77.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "S" + "'", str61, "S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "short" + "'", str64, "short");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str75, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str76, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str78, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str79, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 98 + "'", int82 == 98);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ldouble;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.toString();
        int int4 = type2.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Louble;" + "'", str3, "Louble;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException68);
        boolean boolean71 = type61.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type61);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier74.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.ternaryOperation(abstractInsnNode57, value72, value73, value80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str83 = type82.toString();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.newValue(type82);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.newValue(type85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "D" + "'", str83, "D");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean58 = type53.equals((java.lang.Object) analyzerException57);
        int int60 = type53.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter50.newValue(type53);
        java.lang.String str62 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type53);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        int int65 = type64.getSize();
        int int66 = type64.getSize();
        java.lang.String str67 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier71.merge(value76, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.copyOperation(abstractInsnNode70, value82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str85 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter69.newValue(type84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean90 = type88.equals((java.lang.Object) "(JVSZ)Z");
        int int91 = type88.getSize();
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter69.newValue(type88);
        java.lang.String str93 = type88.getClassName();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.newValue(type88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = basicVerifier0.newOperation(abstractInsnNode95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 160 + "'", int60 == 160);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "V" + "'", str67, "V");
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "boolean" + "'", str93, "boolean");
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier9.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier36.newValue(type51);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier9.newValue(type51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        boolean boolean61 = type57.equals((java.lang.Object) 4);
        int int62 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier9.newValue(type57);
        java.lang.Class<?> wildcardClass64 = value63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.newValue(type72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: [Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.newValue(type75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = basicVerifier0.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str65, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str66, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int25 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value44);
        int int46 = value44.getSize();
        int int47 = value44.getSize();
        int int48 = value44.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.copyOperation(abstractInsnNode27, value44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = type2.getElementType();
        java.lang.String str4 = type2.getClassName();
        java.lang.String str5 = type2.toString();
        java.lang.Class<?> wildcardClass6 = type2.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier13.merge(value21, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier9.merge(value27, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier33.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter8.merge(value27, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.copyOperation(abstractInsnNode54, value66);
        int int68 = value67.getSize();
        int int69 = value67.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value67);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter8.copyOperation(abstractInsnNode49, value67);
        int int72 = value67.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) wildcardClass6, value67);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str4, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str5, "LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str10 = type9.toString();
        java.lang.String str11 = type9.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type14, type15, type18, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray20);
        java.lang.Class<?> wildcardClass22 = type12.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        int int31 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.copyOperation(abstractInsnNode34, value46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter33.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier26.newValue(type48);
        org.mockito.asm.Type[] typeArray52 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray52);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray52);
        java.lang.String str56 = type9.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str10, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str11, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)Z" + "'", str21, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str24, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(ZV)S" + "'", str53, "(ZV)S");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str54, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type41);
        java.lang.String str46 = type41.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type49, type50, type53, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier57.newValue(type62);
        java.lang.Class<?> wildcardClass64 = basicVerifier57.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        boolean boolean69 = type47.equals((java.lang.Object) type68);
        int int70 = type47.getSort();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/AnalyzerException");
        int int73 = type72.getSize();
        org.mockito.asm.Type[] typeArray75 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)S");
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray75);
        int int79 = type41.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "S" + "'", str44, "S");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "S" + "'", str46, "S");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)Z" + "'", str56, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str65, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(JVSZ)Z" + "'", str77, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)S" + "'", str78, "(JVSZ)S");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier1.merge(value9, value14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        int int20 = type19.getSize();
        int int21 = type19.getSize();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type18, type19, type22, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        int int26 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type32, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray37);
        java.lang.String str40 = type16.getClassName();
        int int42 = type16.getOpcode(53);
        java.lang.String str43 = type16.getDescriptor();
        java.lang.String str44 = type16.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter45.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        int int49 = type48.getSize();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean53 = type48.equals((java.lang.Object) analyzerException52);
        int int55 = type48.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter45.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier59.merge(value64, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter57.copyOperation(abstractInsnNode58, value70);
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter45.merge(value71, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier;", (java.lang.Object) str44, value73);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)Z" + "'", str38, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)Z" + "'", str39, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 160 + "'", int55 == 160);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;", (java.lang.Throwable) analyzerException4);
        java.lang.Throwable[] throwableArray12 = analyzerException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        int int24 = type21.getSort();
        int int25 = type21.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean35 = type30.equals((java.lang.Object) analyzerException34);
        int int37 = type30.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter27.newValue(type30);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter27.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier45.merge(value50, value55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.copyOperation(abstractInsnNode44, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter43.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter27.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter27.newValue(type62);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.merge(value64, value66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int70 = type69.getSize();
        java.lang.String str71 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicVerifier0.copyOperation(abstractInsnNode73, value74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 160 + "'", int37 == 160);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "D" + "'", str40, "D");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str63, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = type2.getElementType();
        java.lang.String str5 = type2.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str5, "L(JVSZ)LLorg/mockito/asm/Type;;;");
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        java.lang.Class<?> wildcardClass14 = basicVerifier0.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str16, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        java.lang.String str25 = type15.getDescriptor();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type32, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray37);
        java.lang.String str42 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier43.newValue(type48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Object) type14, value51);
        int int53 = value51.getSize();
        java.lang.Class<?> wildcardClass54 = value51.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)Z" + "'", str38, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)LZ;" + "'", str39, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(ZV)Z" + "'", str40, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str41, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str57, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!");
        java.lang.Throwable[] throwableArray23 = analyzerException22.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier49.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter24.merge(value43, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) analyzerException22, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("LC;", (java.lang.Object) "L(JVSZ)F;", value64);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.copyOperation(abstractInsnNode17, value64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier71.merge(value76, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.copyOperation(abstractInsnNode70, value82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier85.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter69.copyOperation(abstractInsnNode84, value91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier94 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type95 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str96 = type95.getClassName();
        org.mockito.asm.tree.analysis.Value value97 = basicVerifier94.newValue(type95);
        org.mockito.asm.tree.analysis.Value value98 = basicInterpreter69.copyOperation(abstractInsnNode93, value97);
        org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.copyOperation(abstractInsnNode68, value97);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "boolean" + "'", str96, "boolean");
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertNotNull(value98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier52.merge(value70, value74);
        int int76 = value75.getSize();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier4.merge(value46, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) 123, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lrg/mockito/asm/Type;", (java.lang.Throwable) analyzerException78);
        java.lang.String str81 = analyzerException78.toString();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: C: expected 123, but found I" + "'", str81, "org.mockito.asm.tree.analysis.AnalyzerException: C: expected 123, but found I");
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        java.lang.String str27 = type15.getDescriptor();
        int int28 = type15.getSort();
        int int29 = type15.getSize();
        java.lang.String str30 = type15.toString();
        int int31 = type15.getSize();
        int int33 = type15.getOpcode(90);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Z" + "'", str30, "Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)LLorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        int int26 = type23.getSort();
        int int27 = type23.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        java.lang.Object obj1 = null;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str5 = type4.toString();
        java.lang.String str6 = type4.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        int int11 = type8.getSort();
        int int12 = type8.getSize();
        boolean boolean14 = type8.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type32, type33, type36, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        int int40 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier15.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        java.lang.String str50 = type47.getDescriptor();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type46, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray51);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray51);
        java.lang.Class<?> wildcardClass56 = type4.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter57.newValue(type58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean65 = type60.equals((java.lang.Object) analyzerException64);
        int int67 = type60.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter57.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier71.merge(value76, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.copyOperation(abstractInsnNode70, value82);
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter57.merge(value83, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) type4, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lg/mockito/asm/tree/analysis/BasicVerifier;", obj1, value85);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "V" + "'", str5, "V");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "V" + "'", str50, "V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)Z" + "'", str52, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(ZV)Z" + "'", str53, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(ZV)Z" + "'", str54, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(ZV)V" + "'", str55, "(ZV)V");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 160 + "'", int67 == 160);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSort();
        int int6 = type1.getSize();
        int int7 = type1.getSort();
        org.mockito.asm.Type type8 = type1.getElementType();
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)Z;" + "'", str2, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JVSZ)Z" + "'", str4, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier52.merge(value70, value74);
        int int76 = value75.getSize();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier4.merge(value46, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Object) 18, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        analyzerException78.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("short", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Z", (java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray84 = analyzerException82.getSuppressed();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter3.merge(value22, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        java.lang.String str56 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter3.newValue(type47);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter3.newValue(type59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Object) analyzerException2, value60);
        java.lang.Class<?> wildcardClass62 = value60.getClass();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str5 = type4.getInternalName();
        java.lang.String str6 = type4.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException11);
        boolean boolean15 = type4.equals((java.lang.Object) analyzerException14);
        int int16 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType("L(ZV)F;");
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        int int26 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier30.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.copyOperation(abstractInsnNode29, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter28.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier21.newValue(type43);
        org.mockito.asm.Type[] typeArray47 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray47);
        int int49 = type43.getSort();
        java.lang.Class<?> wildcardClass50 = type43.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        int int53 = type52.getDimensions();
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter0.newValue(type52);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.naryOperation(abstractInsnNode55, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)S" + "'", str48, "(ZV)S");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/Type" + "'", str51, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)B");
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        java.lang.String str27 = type15.toString();
        java.lang.Class<?> wildcardClass28 = type15.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = type30.getElementType();
        java.lang.String str32 = type31.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "g/mockito/asm/Type" + "'", str32, "g/mockito/asm/Type");
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LJVSZ)LJ;");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "J" + "'", str3, "J");
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier12.merge(value30, value34);
        int int36 = value35.getSize();
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.merge(value35, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.Type[] typeArray67 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray67);
        java.lang.String str69 = type63.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        java.lang.String str78 = type75.getDescriptor();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type74, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier39.newValue(type63);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int85 = type84.getDimensions();
        int int86 = type84.getDimensions();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier39.newValue(type84);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newValue(type84);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("(ZV)L(JVSZ)V;");
        java.lang.String str91 = type90.toString();
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.newValue(type90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = basicInterpreter0.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)F" + "'", str68, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "F" + "'", str69, "F");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "V" + "'", str78, "V");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Z" + "'", str80, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)F" + "'", str81, "(ZV)F");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L(ZV)L(JVSZ)V;;" + "'", str91, "L(ZV)L(JVSZ)V;;");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 142);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter3.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        int int7 = type6.getSize();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean11 = type6.equals((java.lang.Object) analyzerException10);
        int int13 = type6.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter3.newValue(type6);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str16 = type15.toString();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter3.newValue(type15);
        boolean boolean18 = type0.equals((java.lang.Object) value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter19.copyOperation(abstractInsnNode34, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier61.merge(value79, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter19.copyOperation(abstractInsnNode60, value83);
        boolean boolean86 = type0.equals((java.lang.Object) value85);
        java.lang.String str87 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 160 + "'", int13 == 160);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "D" + "'", str16, "D");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "char" + "'", str87, "char");
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        int int53 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type48);
        java.lang.Class<?> wildcardClass55 = value54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException66);
        boolean boolean68 = type62.equals((java.lang.Object) analyzerException66);
        org.mockito.asm.Type type69 = type62.getElementType();
        org.mockito.asm.Type[] typeArray71 = org.mockito.asm.Type.getArgumentTypes("(ZV)LL(JVSZ)Z;;");
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray71);
        java.lang.String str74 = type60.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str58, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)L.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;" + "'", str72, "(ZV)L.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str73, "(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str74, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        java.lang.String str2 = type0.getClassName();
        java.lang.String str3 = type0.getDescriptor();
        boolean boolean5 = type0.equals((java.lang.Object) 48);
        java.lang.String str6 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "void" + "'", str2, "void");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type12, type13, type16, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        java.lang.String str22 = type7.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier23.newValue(type44);
        java.lang.String str46 = type44.toString();
        boolean boolean47 = type7.equals((java.lang.Object) str46);
        int int48 = type7.getSort();
        int int50 = type7.getOpcode(8192);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier0.newValue(type7);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int54 = type53.getDimensions();
        int int55 = type53.getSort();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newOperation(abstractInsnNode57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)V" + "'", str20, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "V" + "'", str22, "V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8197 + "'", int50 == 8197);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(value56);
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("rg.mockito.asm.tree.analysis.AnalyzerException: C: expected LLZ");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type4, type5, type8, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray10);
        java.lang.String str12 = type2.getDescriptor();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray24);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray24);
        java.lang.String str28 = type2.toString();
        boolean boolean29 = type1.equals((java.lang.Object) type2);
        java.lang.String str30 = type2.getClassName();
        int int32 = type2.getOpcode(175);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)Z" + "'", str11, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(ZV)LZ;" + "'", str26, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(ZV)Z" + "'", str27, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Z" + "'", str28, "Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 175 + "'", int32 == 175);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean5 = type0.equals((java.lang.Object) analyzerException4);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value8);
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass12 = analyzerException4.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        int int14 = type13.getSort();
        java.lang.String str15 = type13.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.Type[] typeArray61 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray61);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier53.newValue(type57);
        java.lang.Object obj65 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str68 = type67.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray77);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier69.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type67, value79);
        int int81 = value79.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", obj65, value79);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.merge(value63, value79);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType("(JVSZ)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.newValue(type85);
        org.mockito.asm.Type type87 = type85.getElementType();
        int int88 = type87.getSort();
        int int89 = type87.getSort();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = type87.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)F" + "'", str62, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "D" + "'", str68, "D");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)F" + "'", str78, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        int int12 = type11.getSize();
        int int13 = type11.getSize();
        java.lang.String str14 = type11.getDescriptor();
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type10, type11 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray15);
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        int int20 = type7.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        boolean boolean25 = type21.equals((java.lang.Object) 4);
        boolean boolean27 = type21.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type45, type46, type49, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray51);
        int int53 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier28.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        java.lang.String str63 = type60.getDescriptor();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type59, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray64);
        boolean boolean67 = type21.equals((java.lang.Object) typeArray64);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray64);
        int int70 = type7.getOpcode(512);
        int int71 = type7.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException74);
        boolean boolean76 = type7.equals((java.lang.Object) analyzerException74);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException74);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException4);
        java.lang.String str79 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "V" + "'", str14, "V");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(ZV)Z" + "'", str16, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(JVSZ)Z" + "'", str52, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "V" + "'", str63, "V");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)Z" + "'", str66, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)Z" + "'", str68, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 512 + "'", int70 == 512);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: C" + "'", str79, "org.mockito.asm.tree.analysis.AnalyzerException: C");
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("D");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException2);
        java.lang.String str4 = analyzerException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: D" + "'", str4, "org.mockito.asm.tree.analysis.AnalyzerException: D");
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int5 = type1.getOpcode(193);
        java.lang.String str6 = type1.getDescriptor();
        java.lang.String str7 = type1.getDescriptor();
        org.mockito.asm.Type type8 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)Z;" + "'", str2, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 197 + "'", int5 == 197);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "L(JVSZ)Z;" + "'", str6, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "L(JVSZ)Z;" + "'", str7, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type63);
        java.lang.Class<?> wildcardClass65 = basicVerifier58.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        int int71 = type69.getSize();
        org.mockito.asm.Type[] typeArray73 = org.mockito.asm.Type.getArgumentTypes("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I;");
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray73);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str68, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str74, "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier12.merge(value17, value22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter10.copyOperation(abstractInsnNode11, value23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter10.newValue(type25);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean31 = type29.equals((java.lang.Object) "(JVSZ)Z");
        int int32 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter10.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter35.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException45);
        boolean boolean48 = type38.equals((java.lang.Object) analyzerException47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter35.newValue(type38);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter10.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        int int63 = type56.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter53.newValue(type56);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        int int69 = type68.getSize();
        int int70 = type68.getSize();
        java.lang.String str71 = type68.getDescriptor();
        int int72 = type68.getSort();
        boolean boolean74 = type68.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter53.newValue(type68);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str77 = type76.toString();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter53.newValue(type76);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter10.copyOperation(abstractInsnNode52, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I", (java.lang.Object) analyzerException8, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.Type[]", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Throwable) analyzerException8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 160 + "'", int63 == 160);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "D" + "'", str66, "D");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "V" + "'", str71, "V");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "C" + "'", str77, "C");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("rg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!, but found I");
        java.lang.String str4 = type3.toString();
        boolean boolean5 = type1.equals((java.lang.Object) type3);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type6 = type3.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!, but found I;" + "'", str4, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!, but found I;");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        java.lang.Throwable throwable2 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", throwable2);
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value13);
        java.lang.Throwable[] throwableArray15 = analyzerException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = analyzerException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = analyzerException14.getSuppressed();
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException19.addSuppressed((java.lang.Throwable) analyzerException21);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException19);
        java.lang.Throwable[] throwableArray24 = analyzerException19.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException19);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        int int66 = type63.getSort();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 3);
        java.lang.String str70 = type67.getDescriptor();
        int int72 = type67.getOpcode(0);
        boolean boolean73 = type63.equals((java.lang.Object) type67);
        int int74 = type67.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = analyzerException19.getSuppressed();
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException24);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier59.merge(value67, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter34.merge(value53, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean83 = type78.equals((java.lang.Object) analyzerException82);
        int int85 = type78.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter75.newValue(type78);
        java.lang.String str87 = type78.getDescriptor();
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter34.newValue(type78);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter34.newValue(type90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Object) analyzerException33, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;", (java.lang.Throwable) analyzerException33);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException33);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 160 + "'", int85 == 160);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "V" + "'", str87, "V");
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        boolean boolean15 = type2.equals((java.lang.Object) value13);
        java.lang.String str16 = type2.toString();
        java.lang.String str17 = type2.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        java.lang.Class<?> wildcardClass28 = type18.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean39 = type34.equals((java.lang.Object) analyzerException38);
        int int41 = type34.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter31.newValue(type34);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.toString();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.newValue(type43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        java.lang.String str49 = type46.getDescriptor();
        int int50 = type46.getSort();
        boolean boolean52 = type46.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter31.newValue(type46);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter31.newValue(type54);
        boolean boolean57 = type29.equals((java.lang.Object) basicInterpreter31);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("F");
        java.lang.String str60 = type59.getClassName();
        java.lang.String str61 = type59.toString();
        int int62 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter31.newValue(type59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Object) type2, value63);
        int int65 = value63.getSize();
        java.lang.Class<?> wildcardClass66 = value63.getClass();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)V;" + "'", str16, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)V" + "'", str17, "(JVSZ)V");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 160 + "'", int41 == 160);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "D" + "'", str44, "D");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "C" + "'", str55, "C");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "F" + "'", str61, "F");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter9.copyOperation(abstractInsnNode24, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter8.merge(value49, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException6, value49);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value73);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = analyzerException74.getSuppressed();
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value79);
        java.lang.Throwable[] throwableArray81 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = analyzerException80.getSuppressed();
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException85.addSuppressed((java.lang.Throwable) analyzerException87);
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException85);
        java.lang.Throwable[] throwableArray91 = analyzerException85.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(VSZ)L(JVSZ)Z;", (java.lang.Throwable) analyzerException85);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: [Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException4);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str9, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str11, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value8);
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier14.merge(value19, value24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter12.copyOperation(abstractInsnNode13, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter12.copyOperation(abstractInsnNode27, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier55.merge(value63, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter11.merge(value52, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException9, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z", (java.lang.Throwable) analyzerException73);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray77 = analyzerException76.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("JVSZ)Lorg/mockito/asm/Type", (java.lang.Throwable) analyzerException82);
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.String str85 = analyzerException82.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I" + "'", str85, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier11.merge(value29, value33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException36);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException36);
        java.lang.Throwable[] throwableArray39 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;: expected 21, but found I");
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLLorg/mockito/asm/Type;;;", (java.lang.Throwable) analyzerException5);
        java.lang.Throwable[] throwableArray45 = analyzerException44.getSuppressed();
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        java.lang.String str34 = type24.getDescriptor();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type41, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray46);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray46);
        java.lang.String str50 = type24.toString();
        int int51 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter54.newValue(type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean62 = type57.equals((java.lang.Object) analyzerException61);
        int int64 = type57.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter54.newValue(type57);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter54.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        int int70 = type69.getSize();
        int int71 = type69.getSize();
        java.lang.String str72 = type69.getDescriptor();
        boolean boolean74 = type69.equals((java.lang.Object) 129);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter54.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier77.newValue(type81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str85 = type84.getDescriptor();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier77.newValue(type84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str89 = type88.getInternalName();
        int int91 = type88.getOpcode(15);
        org.mockito.asm.Type type92 = type88.getElementType();
        java.lang.String str93 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier77.newValue(type88);
        int int95 = value94.getSize();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter54.copyOperation(abstractInsnNode76, value94);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.unaryOperation(abstractInsnNode53, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(ZV)Z" + "'", str47, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)LZ;" + "'", str48, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 160 + "'", int64 == 160);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "V" + "'", str72, "V");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str85, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(JVSZ)Z" + "'", str89, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 19 + "'", int91 == 19);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L(JVSZ)Z;" + "'", str93, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.Type[] typeArray32 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray32);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier24.newValue(type28);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = type35.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type52, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray57);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray57);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray57);
        java.lang.String str64 = type1.getInternalName();
        java.lang.String str65 = type1.toString();
        java.lang.String str66 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)F" + "'", str33, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)F" + "'", str61, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)V" + "'", str62, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)L(JVSZ)V;" + "'", str63, "(ZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)V" + "'", str64, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "L(JVSZ)V;" + "'", str65, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)V" + "'", str66, "(JVSZ)V");
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        int int24 = type14.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        int int41 = value39.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier44.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.copyOperation(abstractInsnNode43, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter42.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        boolean boolean63 = type59.equals((java.lang.Object) 4);
        boolean boolean65 = type59.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter42.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier68.merge(value76, value81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.VOID_TYPE;
        int int87 = type86.getSize();
        int int88 = type86.getSize();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type90 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray91 = new org.mockito.asm.Type[] { type85, type86, type89, type90 };
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray91);
        int int93 = type83.getSort();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier68.newValue(type83);
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter42.copyOperation(abstractInsnNode67, value94);
        org.mockito.asm.tree.analysis.Value value96 = basicVerifier0.merge(value39, value94);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicVerifier0.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)Z" + "'", str92, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)S");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier23.merge(value41, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter7.copyOperation(abstractInsnNode22, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter6.merge(value47, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException4, value47);
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("ZV)LZ", (java.lang.Object) "Lorg.mockito.asm.Type", value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LJ;;", (java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException73);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException88);
        analyzerException81.addSuppressed((java.lang.Throwable) analyzerException88);
        java.lang.Throwable[] throwableArray92 = analyzerException81.getSuppressed();
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException81);
        java.lang.Class<?> wildcardClass94 = analyzerException73.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.copyOperation(abstractInsnNode35, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier50.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter34.copyOperation(abstractInsnNode49, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean66 = type61.equals((java.lang.Object) analyzerException65);
        int int68 = type61.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter58.newValue(type61);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier76.merge(value81, value86);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter74.copyOperation(abstractInsnNode75, value87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter74.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter58.copyOperation(abstractInsnNode73, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.merge(value56, value90);
        int int93 = value92.getSize();
        int int94 = value92.getSize();
        int int95 = value92.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 160 + "'", int68 == 160);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "D" + "'", str71, "D");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        boolean boolean13 = type9.equals((java.lang.Object) 4);
        boolean boolean15 = type9.equals((java.lang.Object) 193);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        int int29 = type9.getSort();
        int int30 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier0.newValue(type9);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.Class<?> wildcardClass42 = type32.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type49 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier0.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.copyOperation(abstractInsnNode54, value66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter53.newValue(type68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        boolean boolean75 = type71.equals((java.lang.Object) 4);
        boolean boolean77 = type71.equals((java.lang.Object) 193);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.VOID_TYPE;
        int int83 = type82.getSize();
        int int84 = type82.getSize();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type81, type82, type85, type86 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray87);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray87);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray87);
        int int93 = type68.getOpcode((int) (short) 100);
        int int95 = type68.getOpcode(129);
        int int97 = type68.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value98 = basicVerifier52.newValue(type68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicVerifier0.copyOperation(abstractInsnNode51, value98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JVSZ)Z" + "'", str88, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(JVSZ)V" + "'", str89, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(JVSZ)Z" + "'", str90, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)Z" + "'", str91, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 129 + "'", int95 == 129);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 148 + "'", int97 == 148);
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSize();
        boolean boolean4 = type0.equals((java.lang.Object) 4);
        boolean boolean6 = type0.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        int int26 = type25.getSize();
        int int27 = type25.getSize();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type24, type25, type28, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray30);
        int int32 = type22.getSort();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier7.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        java.lang.String str42 = type39.getDescriptor();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type38, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray43);
        boolean boolean46 = type0.equals((java.lang.Object) typeArray43);
        int int47 = type0.getSize();
        int int48 = type0.getSort();
        java.lang.String str49 = type0.toString();
        java.lang.String str50 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)Z" + "'", str31, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "V" + "'", str42, "V");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(ZV)Z" + "'", str44, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)Z" + "'", str45, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        boolean boolean59 = type46.equals((java.lang.Object) value57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray64);
        int int67 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type46);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        java.util.List list72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.naryOperation(abstractInsnNode71, list72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)F" + "'", str65, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str66, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        int int10 = type0.getSort();
        boolean boolean12 = type0.equals((java.lang.Object) 95);
        java.lang.String str13 = type0.toString();
        java.lang.String str14 = type0.getClassName();
        int int15 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.Type", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException6);
        java.lang.String str8 = analyzerException6.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: rg.mockito.asm.Type" + "'", str8, "org.mockito.asm.tree.analysis.AnalyzerException: rg.mockito.asm.Type");
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type44);
        java.lang.Class<?> wildcardClass46 = basicVerifier39.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier27.newValue(type47);
        java.lang.String str49 = type47.getInternalName();
        java.lang.String str50 = type47.getInternalName();
        int int52 = type47.getOpcode(19);
        int int54 = type47.getOpcode(1024);
        java.lang.String str55 = type47.toString();
        java.lang.String str56 = type47.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier60.newValue(type65);
        java.lang.Class<?> wildcardClass67 = basicVerifier60.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass67);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type71);
        int int73 = value72.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str49, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str50, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1028 + "'", int54 == 1028);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str69, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str70, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter2.newValue(type3);
        boolean boolean6 = type3.equals((java.lang.Object) 169);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type12, type13, type16, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray18);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray18);
        int int24 = type1.getDimensions();
        java.lang.String str25 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)V" + "'", str20, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)V" + "'", str22, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str23, "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str25, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LJVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.toString();
        int int29 = type26.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier21.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int34 = type32.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter0.copyOperation(abstractInsnNode20, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter0.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier42.merge(value47, value52);
        boolean boolean54 = type41.equals((java.lang.Object) value52);
        java.lang.String str55 = type41.toString();
        java.lang.String str56 = type41.getDescriptor();
        java.lang.String str57 = type41.getClassName();
        org.mockito.asm.Type type58 = type41.getElementType();
        int int59 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type41);
        int int61 = type41.getSize();
        java.lang.String str62 = type41.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 175 + "'", int29 == 175);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(JVSZ)V;" + "'", str55, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)V;" + "'", str56, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)V" + "'", str57, "(JVSZ)V");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)V" + "'", str62, "(JVSZ)V");
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getSize();
        int int5 = type1.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray14);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier6.newValue(type10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier6.newValue(type17);
        boolean boolean20 = type1.equals((java.lang.Object) basicVerifier6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        java.lang.String str40 = type37.getDescriptor();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier22.newValue(type37);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier22.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        java.lang.String str63 = type60.getDescriptor();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier45.newValue(type60);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier22.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        int int70 = type69.getSize();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean74 = type69.equals((java.lang.Object) analyzerException73);
        int int76 = type69.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter66.newValue(type69);
        int int79 = type69.getOpcode((int) (byte) -1);
        java.lang.String str80 = type69.toString();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier22.newValue(type69);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str83 = type82.getDescriptor();
        int int84 = type82.getSize();
        int int85 = type82.getSort();
        java.lang.String str86 = type82.getClassName();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier22.newValue(type82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicVerifier6.copyOperation(abstractInsnNode21, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)Z;" + "'", str2, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JVSZ)F" + "'", str15, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V" + "'", str40, "V");
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "V" + "'", str63, "V");
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 160 + "'", int76 == 160);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "V" + "'", str80, "V");
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "S" + "'", str83, "S");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "short" + "'", str86, "short");
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str6 = type5.toString();
        int int8 = type5.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int13 = type11.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.newValue(type11);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter17.newValue(type18);
        java.lang.String str20 = type18.getDescriptor();
        java.lang.String str21 = type18.getDescriptor();
        java.lang.String str22 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter24.copyOperation(abstractInsnNode41, value42);
        java.lang.Class<?> wildcardClass44 = basicInterpreter24.getClass();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Object obj51 = null;
        boolean boolean52 = type50.equals(obj51);
        int int53 = type50.getSize();
        java.lang.String str54 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier67.newValue(type72);
        java.lang.Class<?> wildcardClass74 = basicVerifier67.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier55.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str79 = type78.getInternalName();
        java.lang.String str80 = type78.getInternalName();
        int int82 = type78.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier55.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier84.newValue(type85);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier84.newValue(type89);
        java.lang.Class<?> wildcardClass91 = basicVerifier84.getClass();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass91);
        java.lang.String str93 = type92.getDescriptor();
        int int94 = type92.getDimensions();
        org.mockito.asm.tree.analysis.Value value95 = basicVerifier55.newValue(type92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/Type;", (java.lang.Object) str54, value95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.copyOperation(abstractInsnNode47, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 175 + "'", int8 == 175);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "V" + "'", str20, "V");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "void" + "'", str22, "void");
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;" + "'", str54, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)Z" + "'", str79, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Z" + "'", str80, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 179 + "'", int82 == 179);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "boolean" + "'", str86, "boolean");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str93, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        boolean boolean13 = type9.equals((java.lang.Object) 4);
        boolean boolean15 = type9.equals((java.lang.Object) 193);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        int int29 = type9.getSort();
        int int30 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier0.newValue(type9);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.Class<?> wildcardClass42 = type32.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type49 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier0.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.Class<?> wildcardClass61 = type51.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.naryOperation(abstractInsnNode65, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str62, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("JVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier40.merge(value58, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value63);
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier34.merge(value63, value65);
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.merge(value63, value67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType("(JVSZ)LJ;");
        java.lang.String str71 = type70.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.newOperation(abstractInsnNode73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LJVSZ)LJ;" + "'", str71, "LJVSZ)LJ;");
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        int int12 = type11.getSize();
        int int13 = type11.getDimensions();
        org.mockito.asm.Type type14 = type11.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str9, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str10, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        java.lang.Class<?> wildcardClass8 = basicVerifier1.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(165);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray25);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray25);
        java.lang.String str32 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 165 + "'", int13 == 165);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)S" + "'", str29, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str30, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)I" + "'", str31, "(JVSZ)I");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int3 = type2.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = type39.getElementType();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        java.lang.String str46 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier34.newValue(type44);
        java.lang.Class<?> wildcardClass48 = basicVerifier34.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.Class<?> wildcardClass61 = type51.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str65 = type64.getDescriptor();
        java.lang.String str66 = type64.getInternalName();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean77 = type72.equals((java.lang.Object) analyzerException76);
        int int79 = type72.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter69.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str82 = type81.toString();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.newValue(type81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.VOID_TYPE;
        int int85 = type84.getSize();
        int int86 = type84.getSize();
        java.lang.String str87 = type84.getDescriptor();
        int int88 = type84.getSort();
        boolean boolean90 = type84.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter69.newValue(type84);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str93 = type92.toString();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter69.newValue(type92);
        int int95 = value94.getSize();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.copyOperation(abstractInsnNode68, value94);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str62, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str65, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 160 + "'", int79 == 160);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "D" + "'", str82, "D");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "V" + "'", str87, "V");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "C" + "'", str93, "C");
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = type6.getElementType();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier1.newValue(type6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter10.newValue(type11);
        java.lang.String str13 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier1.newValue(type11);
        java.lang.Class<?> wildcardClass15 = basicVerifier1.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier22.merge(value40, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLchar;;", (java.lang.Object) type21, value45);
        java.lang.Throwable[] throwableArray47 = analyzerException46.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(JVSZ)Z" + "'", str7, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "V" + "'", str13, "V");
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str16, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str17, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str19, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int3 = type2.getDimensions();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier6.merge(value11, value16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.copyOperation(abstractInsnNode5, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter4.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean25 = type23.equals((java.lang.Object) "(JVSZ)Z");
        int int26 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter4.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter29.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        boolean boolean42 = type32.equals((java.lang.Object) analyzerException41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter29.newValue(type32);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter4.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier49.merge(value57, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter4.copyOperation(abstractInsnNode46, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Object) type2, value63);
        java.lang.String str67 = type2.getClassName();
        int int68 = type2.getDimensions();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier" + "'", str67, "JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str26 = type25.getClassName();
        java.lang.String str27 = type25.toString();
        java.lang.String str28 = type25.getDescriptor();
        java.lang.String str29 = type25.getInternalName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type25);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.Type[] typeArray46 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier38.newValue(type42);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        int int53 = type52.getSize();
        int int54 = type52.getSize();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type51, type52, type55, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = type49.getDescriptor();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        int int68 = type67.getSize();
        int int69 = type67.getSize();
        java.lang.String str70 = type67.getDescriptor();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type66, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray71);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray71);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray71);
        java.lang.String str76 = type42.getClassName();
        boolean boolean78 = type42.equals((java.lang.Object) 148);
        java.lang.String str79 = type42.toString();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier34.newValue(type42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicVerifier0.copyOperation(abstractInsnNode33, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "L(JVSZ)Z;" + "'", str27, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "L(JVSZ)Z;" + "'", str28, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)F" + "'", str47, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(JVSZ)Z" + "'", str58, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Z" + "'", str59, "Z");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "V" + "'", str70, "V");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)Z" + "'", str72, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)LZ;" + "'", str73, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Z" + "'", str74, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)F" + "'", str75, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value32, value52, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value8, value15, value52);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type76);
        java.lang.String str78 = type76.getDescriptor();
        org.mockito.asm.Type type79 = type76.getElementType();
        java.lang.String str80 = type79.getClassName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "L(ZV)F;" + "'", str78, "L(ZV)F;");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        int int24 = type21.getSort();
        int int25 = type21.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        java.util.List list28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.naryOperation(abstractInsnNode27, list28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.Type[] typeArray32 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray32);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier24.newValue(type28);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = type35.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type52, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray57);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray57);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray57);
        java.lang.String str64 = type1.getInternalName();
        java.lang.String str65 = type1.toString();
        java.lang.String str66 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)F" + "'", str33, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)F" + "'", str61, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)V" + "'", str62, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)L(JVSZ)V;" + "'", str63, "(ZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)V" + "'", str64, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "L(JVSZ)V;" + "'", str65, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)V" + "'", str66, "(JVSZ)V");
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        int int67 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type66);
        java.lang.String str69 = type66.getDescriptor();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(VSZ)Lrg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        boolean boolean29 = type25.equals((java.lang.Object) 4);
        boolean boolean31 = type25.equals((java.lang.Object) 193);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type35, type36, type39, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getDescriptor();
        boolean boolean65 = type62.equals((java.lang.Object) 93);
        java.lang.String str66 = type62.getDescriptor();
        int int67 = type62.getSort();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter47.newValue(type62);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.copyOperation(abstractInsnNode46, value68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int72 = type71.getDimensions();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type71);
        java.lang.String str74 = type71.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)V" + "'", str43, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Z" + "'", str63, "Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Z" + "'", str66, "Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str74, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        boolean boolean19 = type15.equals((java.lang.Object) 4);
        java.lang.String str20 = type15.getClassName();
        java.lang.String str21 = type15.getClassName();
        java.lang.String str22 = type15.toString();
        java.lang.String str23 = type15.toString();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        int int32 = type31.getSize();
        int int33 = type31.getSize();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type30, type31, type34, type35 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray36);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray36);
        java.lang.String str40 = type25.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type25);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int46 = type43.getOpcode(93);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        boolean boolean60 = type50.equals((java.lang.Object) analyzerException59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("B", (java.lang.Object) type43, value61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier63.newValue(type68);
        int int70 = value69.getSize();
        int int71 = value69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.merge(value61, value69);
        int int73 = value61.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Z" + "'", str22, "Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Z" + "'", str23, "Z");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "V" + "'", str26, "V");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)Z" + "'", str37, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)V" + "'", str39, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V" + "'", str40, "V");
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 95 + "'", int46 == 95);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        int int53 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type48);
        java.lang.Class<?> wildcardClass55 = value54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str59 = type58.getInternalName();
        java.lang.String str60 = type58.getInternalName();
        java.lang.String str61 = type58.getInternalName();
        java.lang.String str62 = type58.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str60, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str61, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str62, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        java.lang.Class<?> wildcardClass20 = basicInterpreter0.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        int int23 = type21.getOpcode(188);
        java.lang.String str24 = type21.toString();
        java.lang.String str25 = type21.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 192 + "'", int23 == 192);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str24, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str25, "org/mockito/asm/tree/analysis/BasicInterpreter");
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;");
        int int2 = type1.getDimensions();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Throwable[] throwableArray6 = analyzerException5.getSuppressed();
        boolean boolean7 = type1.equals((java.lang.Object) analyzerException5);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str28 = type27.toString();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type32, type33, type36, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray38);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray38);
        java.lang.String str42 = type27.toString();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type27);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier0.newValue(type44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str50 = type49.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("S");
        java.lang.Throwable[] throwableArray54 = analyzerException53.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        int int60 = type59.getSort();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean70 = type65.equals((java.lang.Object) analyzerException69);
        int int72 = type65.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter62.newValue(type65);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.toString();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter62.newValue(type74);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier55.newValue(type74);
        int int78 = value77.getSize();
        int int79 = value77.getSize();
        int int80 = value77.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Object) analyzerException53, value77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)C", (java.lang.Object) str50, value77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.copyOperation(abstractInsnNode46, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "V" + "'", str28, "V");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)V" + "'", str40, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)V" + "'", str41, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "V" + "'", str42, "V");
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str50, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 160 + "'", int72 == 160);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "D" + "'", str75, "D");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.String str10 = type0.getDescriptor();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type17, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        int int33 = type32.getSize();
        int int34 = type32.getSize();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type31, type32, type35, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.Class<?> wildcardClass39 = type29.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.copyOperation(abstractInsnNode51, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter50.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier43.newValue(type65);
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type73 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(ZV)Z" + "'", str23, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(ZV)LZ;" + "'", str24, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Z" + "'", str38, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str41, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(ZV)S" + "'", str70, "(ZV)S");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str71, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)Z" + "'", str72, "(ZV)Z");
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        boolean boolean9 = type5.equals((java.lang.Object) 4);
        boolean boolean11 = type5.equals((java.lang.Object) 193);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type15, type16, type19, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray21);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        int int25 = type5.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier31.merge(value39, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier27.merge(value45, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier51.merge(value59, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter26.merge(value45, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type5, value65);
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException73);
        analyzerException67.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)D", (java.lang.Throwable) analyzerException67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org/mockito/asm/tree/analysis/AnalyzerException, but found D", (java.lang.Throwable) analyzerException77);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)Z" + "'", str22, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)V" + "'", str23, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)V;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray9);
        int int12 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)V" + "'", str11, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value58);
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier29.merge(value58, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.copyOperation(abstractInsnNode28, value60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("C");
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str69 = type68.toString();
        org.mockito.asm.Type type70 = type68.getElementType();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        int int67 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type66);
        int int69 = type66.getSort();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F");
        int int2 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean6 = type4.equals((java.lang.Object) "(JVSZ)Z");
        int int7 = type4.getSize();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getDescriptor();
        int int11 = type4.getOpcode(114);
        java.lang.String str12 = type4.getClassName();
        java.lang.Class<?> wildcardClass13 = type4.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        boolean boolean26 = type14.equals((java.lang.Object) typeArray24);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray24);
        java.lang.Class<?> wildcardClass28 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 114 + "'", int11 == 114);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;" + "'", str27, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        int int23 = type20.getOpcode(10);
        java.lang.String str24 = type20.toString();
        java.lang.String str25 = type20.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14 + "'", int23 == 14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str24, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str25, "org/mockito/asm/tree/analysis/BasicVerifier");
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str6 = type5.toString();
        int int8 = type5.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type28, type29, type32, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        int int36 = type26.getSort();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier11.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier38.newValue(type53);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier11.newValue(type53);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier11.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str63 = type62.getInternalName();
        org.mockito.asm.Type type64 = type62.getElementType();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier11.newValue(type64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = basicVerifier0.unaryOperation(abstractInsnNode10, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 175 + "'", int8 == 175);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)Z" + "'", str35, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str63, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = analyzerException19.getSuppressed();
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException24);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException7.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        int int34 = type33.getSort();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        java.lang.String str16 = type1.getDescriptor();
        java.lang.String str17 = type1.getClassName();
        int int18 = type1.getSort();
        java.lang.String str19 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)V;" + "'", str16, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)V" + "'", str17, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)V" + "'", str19, "(JVSZ)V");
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier8.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        int int29 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier8.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type35, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray43);
        int int45 = type32.getSort();
        java.lang.String str46 = type32.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier8.newValue(type32);
        int int48 = value47.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier58.merge(value63, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.copyOperation(abstractInsnNode57, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter56.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier49.newValue(type71);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier49.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.merge(value47, value75);
        java.lang.Class<?> wildcardClass77 = basicVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Z" + "'", str41, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Z" + "'", str46, "Z");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str78, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str79, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LLZ;;");
        org.mockito.asm.Type[] typeArray3 = org.mockito.asm.Type.getArgumentTypes("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I;");
        java.lang.String str4 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray3);
        int int5 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: LLZ;" + "'", str4, "(ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: LLZ;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("g/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter19.copyOperation(abstractInsnNode34, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Object) "", value59);
        int int61 = value59.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: F");
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int4 = type1.getOpcode(195);
        int int6 = type1.getOpcode(194);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        java.lang.String str25 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier7.newValue(type22);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier7.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type33, type34, type37, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray39);
        int int44 = type1.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        int int50 = type49.getSort();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier45.newValue(type49);
        boolean boolean53 = type49.equals((java.lang.Object) false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str56 = type55.toString();
        java.lang.String str57 = type55.toString();
        boolean boolean58 = type49.equals((java.lang.Object) type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        java.lang.Class<?> wildcardClass64 = type60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = type68.getElementType();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type72, type73, type76, type77 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray78);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray78);
        java.lang.String str83 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 199 + "'", int4 == 199);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 198 + "'", int6 == 198);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)V" + "'", str41, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)V" + "'", str42, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str43, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "LZ;" + "'", str56, "LZ;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "LZ;" + "'", str57, "LZ;");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str66, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/Type" + "'", str67, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)Z" + "'", str79, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str80, "(JVSZ)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JVSZ)S" + "'", str81, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str82, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L(JVSZ)V;" + "'", str83, "L(JVSZ)V;");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean5 = type0.equals((java.lang.Object) analyzerException4);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value8);
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass12 = analyzerException4.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        boolean boolean17 = type7.equals((java.lang.Object) analyzerException16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type7);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter3.newValue(type7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier22.merge(value27, value32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter20.copyOperation(abstractInsnNode21, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        int int59 = value58.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter3.merge(value33, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;", (java.lang.Object) 56, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;", (java.lang.Throwable) analyzerException61);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        java.lang.String str37 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier19.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier39.merge(value44, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier51.newValue(type56);
        java.lang.Class<?> wildcardClass58 = basicVerifier51.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier39.newValue(type59);
        java.lang.String str61 = type59.getInternalName();
        java.lang.String str62 = type59.getInternalName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier19.newValue(type59);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier66.merge(value71, value76);
        boolean boolean78 = type65.equals((java.lang.Object) value76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str80 = type79.getClassName();
        int int81 = type79.getSize();
        org.mockito.asm.Type[] typeArray83 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray83);
        int int86 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier19.newValue(type65);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("Z");
        java.lang.String str90 = type89.getInternalName();
        java.lang.String str91 = type89.getDescriptor();
        org.mockito.asm.tree.analysis.Value value92 = basicVerifier19.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicVerifier0.copyOperation(abstractInsnNode18, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str16, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str61, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str62, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)F" + "'", str84, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str85, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Z" + "'", str90, "Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "LZ;" + "'", str91, "LZ;");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = type9.getElementType();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier4.newValue(type9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter13.newValue(type14);
        java.lang.String str16 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier4.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        int int28 = type18.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier4.newValue(type18);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newOperation(abstractInsnNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        java.lang.String str20 = type17.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier2.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        int int26 = type23.getSort();
        int int27 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier2.newValue(type23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I", obj1, value28);
        int int30 = value28.getSize();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "V" + "'", str20, "V");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = type19.getElementType();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier14.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        java.lang.String str26 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier14.newValue(type24);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier14.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier34.merge(value39, value44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter32.copyOperation(abstractInsnNode33, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter32.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter32.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str59 = type58.toString();
        int int61 = type58.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier53.newValue(type58);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int66 = type64.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier53.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter32.copyOperation(abstractInsnNode52, value67);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.merge(value31, value68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "V" + "'", str26, "V");
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str30, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 175 + "'", int61 == 175);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        int int21 = type18.getSort();
        int int22 = type18.getSize();
        java.lang.Object obj23 = null;
        boolean boolean24 = type18.equals(obj23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter27.merge(value46, value66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter69.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter69.copyOperation(abstractInsnNode72, value79);
        int int82 = value79.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter27.copyOperation(abstractInsnNode68, value79);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.copyOperation(abstractInsnNode26, value83);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException4);
        java.lang.Throwable[] throwableArray7 = analyzerException4.getSuppressed();
        java.lang.String str8 = analyzerException4.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null" + "'", str8, "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null");
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean17 = type12.equals((java.lang.Object) analyzerException16);
        int int19 = type12.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter9.newValue(type12);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.newValue(type21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        int int25 = type24.getSize();
        int int26 = type24.getSize();
        java.lang.String str27 = type24.getDescriptor();
        int int28 = type24.getSort();
        boolean boolean30 = type24.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter9.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier32.newValue(type36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter9, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        int int63 = value62.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.merge(value37, value62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getReturnType("(ZV)LJ;");
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.newOperation(abstractInsnNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 160 + "'", int19 == 160);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "D" + "'", str22, "D");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        java.lang.Class<?> wildcardClass8 = basicVerifier1.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(165);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray25);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type9);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter0.newValue(type33);
        java.lang.String str35 = type33.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 165 + "'", int13 == 165);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)S" + "'", str29, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str30, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str35, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str9 = type8.toString();
        java.lang.String str10 = type8.getDescriptor();
        java.lang.String str11 = type8.getClassName();
        int int12 = type8.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)V;");
        int int3 = type1.getOpcode(10);
        int int4 = type1.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier5.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier17.newValue(type22);
        java.lang.Class<?> wildcardClass24 = basicVerifier17.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier5.newValue(type25);
        java.lang.String str27 = type25.getInternalName();
        java.lang.String str28 = type25.getInternalName();
        java.lang.String str29 = type25.getClassName();
        int int31 = type25.getOpcode(131);
        int int32 = type25.getSort();
        int int33 = type25.getSort();
        java.lang.String str34 = type25.getClassName();
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type1.equals((java.lang.Object) type36);
        int int38 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14 + "'", int3 == 14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str27, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str28, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str29, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 135 + "'", int31 == 135);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str34, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        boolean boolean48 = type45.equals((java.lang.Object) 169);
        boolean boolean49 = type38.equals((java.lang.Object) 169);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        java.lang.Throwable[] throwableArray60 = analyzerException59.getSuppressed();
        analyzerException51.addSuppressed((java.lang.Throwable) analyzerException59);
        java.lang.Throwable[] throwableArray62 = analyzerException51.getSuppressed();
        boolean boolean63 = type38.equals((java.lang.Object) analyzerException51);
        boolean boolean65 = type38.equals((java.lang.Object) 81);
        int int67 = type38.getOpcode(160);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 165 + "'", int67 == 165);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(JVSZ)LLorg/mockito/asm/Type;;;");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type" + "'", str2, "Lorg/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getInternalName();
        java.lang.String str6 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ldouble;" + "'", str2, "Ldouble;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "double" + "'", str4, "double");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "double" + "'", str5, "double");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "double" + "'", str6, "double");
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = type1.getElementType();
        int int5 = type3.getOpcode(113);
        int int7 = type3.getOpcode(196661);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 114 + "'", int5 == 114);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 196662 + "'", int7 == 196662);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type16);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type30);
        int int33 = value32.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected 185, but found null", (java.lang.Object) analyzerException3, value7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        boolean boolean14 = type10.equals((java.lang.Object) 4);
        boolean boolean16 = type10.equals((java.lang.Object) 193);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray26);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        int int30 = type10.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier32.merge(value50, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter31.merge(value50, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type10, value70);
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException78);
        analyzerException72.addSuppressed((java.lang.Throwable) analyzerException80);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Throwable) analyzerException8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        java.lang.String str16 = type1.getDescriptor();
        java.lang.String str17 = type1.getClassName();
        int int18 = type1.getSort();
        int int19 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)V;" + "'", str16, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)V" + "'", str17, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        boolean boolean48 = type44.equals((java.lang.Object) 4);
        boolean boolean50 = type44.equals((java.lang.Object) 193);
        java.lang.String str51 = type44.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.newValue(type44);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type55 = type54.getElementType();
        boolean boolean57 = type54.equals((java.lang.Object) 165);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str61 = type60.getClassName();
        int int63 = type60.getOpcode(83);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type60);
        int int65 = type60.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 83 + "'", int63 == 83);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier17.newValue(type22);
        int int24 = value23.getSize();
        int int25 = value23.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier26.merge(value44, value48);
        int int50 = value49.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.merge(value23, value49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int54 = type53.getSort();
        java.lang.String str55 = type53.toString();
        int int56 = type53.getSort();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.newValue(type53);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = type59.getElementType();
        java.lang.String str62 = type59.getDescriptor();
        java.lang.Class<?> wildcardClass63 = type59.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.Class<?> wildcardClass67 = type66.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.newValue(type68);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(JVSZ)L(JVSZ)V;;" + "'", str55, "L(JVSZ)L(JVSZ)V;;");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "L(JVSZ)Z;" + "'", str62, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I: expected I, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.String str11 = type4.toString();
        int int12 = type4.getSort();
        int int13 = type4.getSize();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.Class<?> wildcardClass24 = type14.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        boolean boolean30 = type4.equals((java.lang.Object) str29);
        java.lang.String str31 = type4.getClassName();
        java.lang.String str32 = type4.getClassName();
        int int33 = type4.getSort();
        int int35 = type4.getOpcode(141);
        int int36 = type4.getSort();
        int int37 = type4.getSort();
        int int38 = type4.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "F" + "'", str11, "F");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str25, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str27, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str29, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 143 + "'", int35 == 143);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        boolean boolean5 = type0.equals((java.lang.Object) 129);
        java.lang.String str6 = type0.getClassName();
        java.lang.String str7 = type0.getDescriptor();
        java.lang.String str8 = type0.toString();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str11 = type10.toString();
        boolean boolean12 = type0.equals((java.lang.Object) type10);
        java.lang.String str13 = type10.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = type10.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "V" + "'", str7, "V");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LC;" + "'", str11, "LC;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LC;" + "'", str13, "LC;");
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int68 = type67.getDimensions();
        int int69 = type67.getSort();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type67);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type73, type74, type77, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        java.lang.Class<?> wildcardClass81 = type71.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str87 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.newValue(type91);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type95 = type94.getElementType();
        int int96 = type94.getSize();
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.newValue(type94);
        int int99 = type94.getOpcode(265);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Z" + "'", str80, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str82, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str84, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str86, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str87, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str89, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/Type" + "'", str90, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 269 + "'", int99 == 269);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        boolean boolean4 = type1.equals((java.lang.Object) 169);
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter7.merge(value26, value46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier53.merge(value61, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier49.merge(value67, value71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        int int77 = type76.getSize();
        int int78 = type76.getSize();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type75, type76, type79, type80 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray81);
        int int83 = type73.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier49.newValue(type73);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter7.copyOperation(abstractInsnNode48, value84);
        int int86 = value85.getSize();
        int int87 = value85.getSize();
        boolean boolean88 = type1.equals((java.lang.Object) int87);
        int int89 = type1.getSize();
        java.lang.String str90 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "void" + "'", str90, "void");
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value58);
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier29.merge(value58, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.copyOperation(abstractInsnNode28, value60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("C");
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str69 = type68.toString();
        org.mockito.asm.Type type70 = type68.getElementType();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type74, type75, type78, type79 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray80);
        java.lang.Class<?> wildcardClass82 = type72.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str87 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.lang.String str90 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str92 = type91.getDescriptor();
        org.mockito.asm.Type type93 = type91.getElementType();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.newValue(type93);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JVSZ)Z" + "'", str81, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/Type" + "'", str87, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str88, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str89, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str90, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str92, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        int int25 = value24.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Object) int25, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!");
        java.lang.Throwable[] throwableArray45 = analyzerException44.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier51.merge(value59, value64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier47.merge(value65, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier71.merge(value79, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter46.merge(value65, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) analyzerException44, value86);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass89 = analyzerException44.getClass();
        java.lang.String str90 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass89);
        java.lang.String str91 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass89);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str90, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str91, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type92);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)LZ;");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int3 = type1.getSort();
        int int5 = type1.getOpcode(131080);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 131084 + "'", int5 == 131084);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        boolean boolean48 = type45.equals((java.lang.Object) 169);
        boolean boolean49 = type38.equals((java.lang.Object) 169);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(ZV)Lorg.mockito.asm.tree.analysis.BasicVerifier;");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray51);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)V" + "'", str52, "(ZV)V");
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        java.lang.Class<?> wildcardClass18 = basicInterpreter0.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int20 = type19.getSize();
        int int22 = type19.getOpcode(117);
        int int23 = type19.getDimensions();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 121 + "'", int22 == 121);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!");
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier14.merge(value22, value27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier10.merge(value28, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier34.merge(value42, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter9.merge(value28, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) analyzerException7, value49);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException50);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException13);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException14);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.Type;", (java.lang.Throwable) analyzerException19);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException20);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(JVSZ)LD;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter1, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        int int32 = type31.getSize();
        boolean boolean34 = type31.equals((java.lang.Object) 0L);
        java.lang.String str35 = type31.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier38.merge(value43, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.copyOperation(abstractInsnNode37, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        boolean boolean58 = type54.equals((java.lang.Object) 4);
        boolean boolean60 = type54.equals((java.lang.Object) 193);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray70);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray70);
        int int77 = type31.getOpcode(146);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter1.newValue(type31);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("char");
        java.lang.Class<?> wildcardClass81 = type80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type83 = type82.getElementType();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter1.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = basicInterpreter1.newOperation(abstractInsnNode85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "V" + "'", str35, "V");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)V" + "'", str72, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)Z" + "'", str73, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)Z" + "'", str74, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(JVSZ)V" + "'", str75, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 151 + "'", int77 == 151);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = type2.getElementType();
        java.lang.String str5 = type2.getDescriptor();
        java.lang.Class<?> wildcardClass6 = type2.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier13.merge(value21, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier9.merge(value27, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str34 = type33.toString();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type38, type39, type42, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray44);
        int int48 = type33.getSort();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier9.newValue(type33);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier9.newValue(type50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;;", (java.lang.Object) str8, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(JVSZ)Z" + "'", str3, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)Z;" + "'", str5, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "V" + "'", str34, "V");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)V" + "'", str46, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)V" + "'", str47, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        int int68 = type67.getSort();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier63.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean78 = type73.equals((java.lang.Object) analyzerException77);
        int int80 = type73.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter70.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str83 = type82.toString();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter70.newValue(type82);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier63.newValue(type82);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str88 = type87.toString();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier63.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode62, value89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.newOperation(abstractInsnNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 160 + "'", int80 == 160);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "D" + "'", str83, "D");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LC;" + "'", str88, "LC;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str26 = type25.toString();
        int int27 = type25.getDimensions();
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value30);
        boolean boolean32 = type25.equals((java.lang.Object) "");
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier9.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str49 = type48.getClassName();
        int int51 = type48.getOpcode(83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        java.lang.String str60 = type57.getDescriptor();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type56, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier35.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.SHORT_TYPE;
        int int73 = type72.getSort();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean83 = type78.equals((java.lang.Object) analyzerException82);
        int int85 = type78.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter75.newValue(type78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str88 = type87.toString();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter75.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier68.newValue(type87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Object) type48, value90);
        int int92 = value90.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicVerifier0.binaryOperation(abstractInsnNode8, value33, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "LZ;" + "'", str26, "LZ;");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 83 + "'", int51 == 83);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)Z" + "'", str65, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 160 + "'", int85 == 160);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "D" + "'", str88, "D");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType("S");
        int int17 = type16.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier19.merge(value37, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter18.merge(value37, value57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean68 = type63.equals((java.lang.Object) analyzerException67);
        int int70 = type63.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter60.newValue(type63);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str73 = type72.toString();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.newValue(type72);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter18.copyOperation(abstractInsnNode59, value74);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier76.newValue(type81);
        java.lang.Class<?> wildcardClass83 = basicVerifier76.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass83);
        java.lang.String str86 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter18.newValue(type87);
        boolean boolean89 = type16.equals((java.lang.Object) type87);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.newValue(type16);
        int int91 = value90.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 160 + "'", int70 == 160);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "D" + "'", str73, "D");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str85, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str86, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int15 = type14.getDimensions();
        int int16 = type14.getSort();
        int int17 = type14.getSort();
        org.mockito.asm.Type type18 = type14.getElementType();
        java.lang.String str19 = type14.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value10);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter0.copyOperation(abstractInsnNode3, value10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        java.lang.String str16 = type13.getDescriptor();
        int int17 = type13.getSort();
        boolean boolean19 = type13.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean23 = type21.equals((java.lang.Object) "(JVSZ)Z");
        int int24 = type21.getSize();
        java.lang.String str25 = type21.getClassName();
        java.lang.String str26 = type21.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        int int31 = type28.getSort();
        int int32 = type28.getSize();
        boolean boolean34 = type28.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier35.merge(value43, value48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type52, type53, type56, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray58);
        int int60 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier35.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        int int68 = type67.getSize();
        int int69 = type67.getSize();
        java.lang.String str70 = type67.getDescriptor();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type66, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray71);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray71);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray71);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray71);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type13);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.Type[] typeArray82 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        boolean boolean86 = type78.equals((java.lang.Object) "(JVSZ)Z");
        java.lang.String str87 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newValue(type78);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JVSZ)Z" + "'", str59, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "V" + "'", str70, "V");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)Z" + "'", str72, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)Z" + "'", str73, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Z" + "'", str74, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)Z" + "'", str75, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)V" + "'", str76, "(ZV)V");
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(JVSZ)F" + "'", str83, "(JVSZ)F");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "float" + "'", str87, "float");
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        int int4 = type1.getSort();
        int int5 = type1.getSize();
        boolean boolean7 = type1.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        int int27 = type26.getSize();
        int int28 = type26.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type25, type26, type29, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray31);
        int int33 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier8.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        int int41 = type40.getSize();
        int int42 = type40.getSize();
        java.lang.String str43 = type40.getDescriptor();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type39, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray44);
        java.lang.String str48 = type1.toString();
        java.lang.String str49 = type1.getDescriptor();
        int int51 = type1.getOpcode(25);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "V" + "'", str43, "V");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)Z" + "'", str45, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(ZV)Z" + "'", str46, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(ZV)Z" + "'", str47, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Z" + "'", str48, "Z");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 25 + "'", int51 == 25);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F" + "'", str2, "F");
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str61 = type60.getDescriptor();
        int int62 = type60.getSize();
        int int63 = type60.getSort();
        java.lang.String str64 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier66.newValue(type71);
        java.lang.Class<?> wildcardClass73 = basicVerifier66.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str75 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str78 = type77.toString();
        java.lang.String str79 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier0.newValue(type77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        java.util.List list82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.naryOperation(abstractInsnNode81, list82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "S" + "'", str61, "S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "short" + "'", str64, "short");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str75, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str76, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str78, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str79, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        boolean boolean13 = type3.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type32, type33, type36, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        int int40 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier15.newValue(type30);
        java.lang.String str42 = type30.toString();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type30);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getReturnType("L(JVSZ)LLorg.mockito.asm.Type;;;");
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter0.newValue(type45);
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 4, value51);
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value55);
        java.lang.Throwable[] throwableArray57 = analyzerException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = analyzerException56.getSuppressed();
        analyzerException52.addSuppressed((java.lang.Throwable) analyzerException56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: S", (java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Throwable) analyzerException52);
        java.lang.Class<?> wildcardClass62 = analyzerException52.getClass();
        boolean boolean63 = type45.equals((java.lang.Object) analyzerException52);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Z" + "'", str42, "Z");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean44 = type39.equals((java.lang.Object) analyzerException43);
        int int46 = type39.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter36.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        int int55 = type51.getSort();
        boolean boolean57 = type51.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter36.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.merge(value33, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int70 = type69.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray73 = analyzerException72.getSuppressed();
        boolean boolean74 = type69.equals((java.lang.Object) analyzerException72);
        java.lang.String str75 = type69.getInternalName();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str79 = type78.toString();
        java.lang.String str80 = type78.toString();
        java.lang.String str81 = type78.getClassName();
        int int82 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.newValue(type78);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.newOperation(abstractInsnNode84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 160 + "'", int46 == 160);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "D" + "'", str49, "D");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "B" + "'", str66, "B");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str75, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "LZ;" + "'", str79, "LZ;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LZ;" + "'", str80, "LZ;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Z" + "'", str81, "Z");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LZ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lrg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException31);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray37 = analyzerException3.getSuppressed();
        java.lang.Class<?> wildcardClass38 = analyzerException3.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)LZ;");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray45);
        org.mockito.asm.Type[] typeArray48 = org.mockito.asm.Type.getArgumentTypes("LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray48);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str42, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str46, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str49, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier17.merge(value22, value27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter15.copyOperation(abstractInsnNode16, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier35.merge(value43, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier31.merge(value49, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter15.copyOperation(abstractInsnNode30, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter14.merge(value55, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 13, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;;", (java.lang.Throwable) analyzerException75);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass87 = analyzerException8.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str89 = type88.getClassName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str89, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        int int16 = type13.getSort();
        int int17 = type13.getSize();
        boolean boolean19 = type13.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        int int45 = type35.getSort();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier20.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        int int53 = type52.getSize();
        int int54 = type52.getSize();
        java.lang.String str55 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type51, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray56);
        java.lang.String str60 = type13.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier64.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        int int77 = type76.getSize();
        int int78 = type76.getSize();
        java.lang.String str79 = type76.getDescriptor();
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type75, type76 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray80);
        org.mockito.asm.Type[] typeArray83 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray83);
        int int85 = type72.getSort();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier64.newValue(type72);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier64.newValue(type87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.binaryOperation(abstractInsnNode62, value63, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(ZV)Z" + "'", str57, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)Z" + "'", str59, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "V" + "'", str79, "V");
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)Z" + "'", str81, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)Z" + "'", str84, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int2 = type1.getDimensions();
        java.lang.Object obj3 = null;
        boolean boolean4 = type1.equals(obj3);
        java.lang.String str5 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;" + "'", str5, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value17);
        int int19 = value17.getSize();
        int int20 = value17.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier33.newValue(type38);
        java.lang.Class<?> wildcardClass40 = basicVerifier33.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier21.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str45 = type44.getInternalName();
        java.lang.String str46 = type44.getInternalName();
        int int48 = type44.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier21.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        int int65 = value63.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier66.merge(value74, value79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.VOID_TYPE;
        int int85 = type84.getSize();
        int int86 = type84.getSize();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type83, type84, type87, type88 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray89);
        int int91 = type81.getSort();
        org.mockito.asm.tree.analysis.Value value92 = basicVerifier66.newValue(type81);
        org.mockito.asm.tree.analysis.Value value93 = basicVerifier21.merge(value63, value92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I", (java.lang.Object) int20, value92);
        int int95 = value92.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 179 + "'", int48 == 179);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(JVSZ)Z" + "'", str90, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier42.merge(value60, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.copyOperation(abstractInsnNode41, value64);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str71 = type70.getInternalName();
        java.lang.String str72 = type70.getInternalName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type70);
        int int74 = type70.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value24);
        boolean boolean26 = type5.equals((java.lang.Object) value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter27.merge(value46, value66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean77 = type72.equals((java.lang.Object) analyzerException76);
        int int79 = type72.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter69.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str82 = type81.toString();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.newValue(type81);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter27.copyOperation(abstractInsnNode68, value83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier85.newValue(type90);
        java.lang.Class<?> wildcardClass92 = basicVerifier85.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass92);
        java.lang.String str95 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass92);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter27.newValue(type96);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException98 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type5, value97);
        int int99 = value97.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 160 + "'", int79 == 160);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "D" + "'", str82, "D");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str94, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str95, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)LZ;");
        int int3 = type1.getOpcode((int) 'a');
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LZV)LZ;" + "'", str4, "LZV)LZ;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        int int26 = type20.getOpcode(131);
        int int27 = type20.getSort();
        java.lang.String str28 = type20.getClassName();
        int int29 = type20.getSort();
        int int31 = type20.getOpcode(148);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 135 + "'", int26 == 135);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str28, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 152 + "'", int31 == 152);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier2.merge(value20, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.merge(value20, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean51 = type46.equals((java.lang.Object) analyzerException50);
        int int53 = type46.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter43.newValue(type46);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str56 = type55.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter1.copyOperation(abstractInsnNode42, value57);
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Object) basicInterpreter1, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter61.newValue(type62);
        int int65 = type62.getOpcode((int) 'a');
        java.lang.String str66 = type62.toString();
        java.lang.String str67 = type62.toString();
        java.lang.String str68 = type62.toString();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter1.newValue(type62);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter1.newOperation(abstractInsnNode70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 160 + "'", int53 == 160);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "D" + "'", str56, "D");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 102 + "'", int65 == 102);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "V" + "'", str66, "V");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "V" + "'", str67, "V");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNull(value69);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type3 = type1.getElementType();
        int int4 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLZ;;" + "'", str2, "LLZ;;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        int int20 = type15.getSize();
        java.lang.Object obj21 = null;
        boolean boolean22 = type15.equals(obj21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null");
        java.lang.String str25 = type24.getInternalName();
        int int27 = type24.getOpcode(149);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        int int31 = type29.getOpcode(48);
        java.lang.String str32 = type29.toString();
        java.lang.String str33 = type29.getClassName();
        java.lang.String str34 = type29.getInternalName();
        java.lang.String str35 = type29.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        int int37 = type36.getSize();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray44);
        java.lang.String str46 = type40.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        int int53 = type52.getSize();
        int int54 = type52.getSize();
        java.lang.String str55 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type51, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray56);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray56);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray56);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray56);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type64 = type15.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null" + "'", str25, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 153 + "'", int27 == 153);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "LZ;" + "'", str32, "LZ;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Z" + "'", str33, "Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Z" + "'", str35, "Z");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)F" + "'", str45, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(ZV)Z" + "'", str57, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)F" + "'", str58, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)F" + "'", str60, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)LZ;" + "'", str61, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null;" + "'", str62, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null;");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)V" + "'", str63, "(ZV)V");
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        boolean boolean6 = type1.equals((java.lang.Object) analyzerException4);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.getClassName();
        java.lang.String str9 = type1.toString();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("LLZ;;");
        java.lang.String str12 = type11.toString();
        int int13 = type11.getSort();
        boolean boolean14 = type1.equals((java.lang.Object) int13);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str8, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str9, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LLZ;" + "'", str12, "LLZ;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value11);
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value15);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException16);
        java.lang.Throwable[] throwableArray18 = analyzerException12.getSuppressed();
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray21 = analyzerException12.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        int int26 = type25.getSize();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean30 = type25.equals((java.lang.Object) analyzerException29);
        int int32 = type25.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter22.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier34.merge(value39, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier48.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter46.copyOperation(abstractInsnNode47, value59);
        int int61 = value60.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter22.merge(value45, value60);
        int int63 = value62.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;", (java.lang.Object) analyzerException12, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException64);
        java.lang.Throwable[] throwableArray66 = analyzerException64.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.String str68 = analyzerException64.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 160 + "'", int32 == 160);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I" + "'", str68, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I");
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 4, value5);
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException10.getSuppressed();
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier20.merge(value38, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.Type[] typeArray56 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray56);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier48.newValue(type52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type46, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier14.merge(value43, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("Ldouble;", (java.lang.Object) analyzerException10, value58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value68);
        java.lang.Throwable[] throwableArray70 = analyzerException69.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("byte");
        java.lang.Throwable[] throwableArray73 = analyzerException72.getSuppressed();
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException72);
        analyzerException61.addSuppressed((java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I;", (java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!, but found I", (java.lang.Throwable) analyzerException69);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "D" + "'", str47, "D");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)F" + "'", str57, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Object obj2 = null;
        boolean boolean3 = type1.equals(obj2);
        int int4 = type1.getSort();
        int int5 = type1.getDimensions();
        int int7 = type1.getOpcode((int) (byte) 10);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray28);
        java.lang.String str30 = type24.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type35, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray40);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = basicVerifier0.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)F" + "'", str29, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "F" + "'", str30, "F");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Z" + "'", str41, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)F" + "'", str42, "(ZV)F");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getDescriptor();
        boolean boolean18 = type15.equals((java.lang.Object) 93);
        java.lang.String str19 = type15.getDescriptor();
        int int20 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int38 = type37.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray41 = analyzerException40.getSuppressed();
        boolean boolean42 = type37.equals((java.lang.Object) analyzerException40);
        int int43 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter23.newValue(type37);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.copyOperation(abstractInsnNode22, value44);
        int int46 = value45.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier5.newValue(type10);
        java.lang.Class<?> wildcardClass12 = basicVerifier5.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        int int15 = type14.getSort();
        int int17 = type14.getOpcode(165);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str19 = type18.toString();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        int int25 = type24.getSize();
        int int26 = type24.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type23, type24, type27, type28 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray29);
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray29);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray29);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray29);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter4.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier45.merge(value50, value55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.copyOperation(abstractInsnNode44, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter43.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier36.newValue(type58);
        org.mockito.asm.Type[] typeArray62 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray62);
        int int64 = type58.getSort();
        java.lang.Class<?> wildcardClass65 = type58.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter4.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I", (java.lang.Object) str3, value69);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LZ;" + "'", str3, "LZ;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 165 + "'", int17 == 165);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Z" + "'", str30, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)V" + "'", str31, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)V" + "'", str32, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)S" + "'", str33, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str34, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)S" + "'", str63, "(ZV)S");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        int int69 = type68.getSize();
        int int70 = type68.getSize();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type67, type68, type71, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        int int75 = type65.getSort();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier50.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier79.merge(value84, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter77.copyOperation(abstractInsnNode78, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicVerifier0.merge(value76, value90);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str95 = type94.getClassName();
        org.mockito.asm.tree.analysis.Value value96 = basicVerifier0.newValue(type94);
        java.lang.String str97 = type94.getDescriptor();
        int int98 = type94.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)Z" + "'", str74, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "boolean" + "'", str95, "boolean");
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Z" + "'", str97, "Z");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        boolean boolean47 = type43.equals((java.lang.Object) "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str48 = type43.getClassName();
        java.lang.String str49 = type43.toString();
        int int51 = type43.getOpcode(146);
        int int52 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier57.merge(value62, value67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter55.copyOperation(abstractInsnNode56, value68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter55.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter55.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier75.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter79.newValue(type80);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter79.copyOperation(abstractInsnNode82, value89);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter55.merge(value78, value91);
        int int93 = value78.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.unaryOperation(abstractInsnNode54, value78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 146 + "'", int51 == 146);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)L(JVSZ)F;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "void" + "'", str3, "void");
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier11.merge(value29, value33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException36);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException36);
        java.lang.Throwable[] throwableArray39 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)F");
        java.lang.Throwable[] throwableArray45 = analyzerException44.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("Lchar;", (java.lang.Throwable) analyzerException44);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException46);
        java.lang.String str48 = analyzerException41.toString();
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str48, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LLorg.mockito.asm.Type;;;");
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        int int8 = type7.getSize();
        int int9 = type7.getSize();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type6, type7, type10, type11 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray12);
        java.lang.Class<?> wildcardClass14 = type4.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter17.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean25 = type20.equals((java.lang.Object) analyzerException24);
        int int27 = type20.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter17.newValue(type20);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.toString();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter17.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        int int33 = type32.getSize();
        int int34 = type32.getSize();
        java.lang.String str35 = type32.getDescriptor();
        int int36 = type32.getSort();
        boolean boolean38 = type32.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter17.newValue(type32);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str41 = type40.toString();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter17.newValue(type40);
        boolean boolean43 = type15.equals((java.lang.Object) basicInterpreter17);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType("F");
        java.lang.String str46 = type45.getClassName();
        java.lang.String str47 = type45.toString();
        int int48 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter17.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        java.lang.String str77 = type74.getDescriptor();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type73, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray81);
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier54.newValue(type70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) analyzerException53, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter17.copyOperation(abstractInsnNode50, value83);
        int int86 = value83.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;", (java.lang.Object) throwableArray3, value83);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(JVSZ)Z" + "'", str13, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 160 + "'", int27 == 160);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "D" + "'", str30, "D");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "V" + "'", str35, "V");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "C" + "'", str41, "C");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "V" + "'", str77, "V");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)Z" + "'", str79, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str27 = type26.getInternalName();
        int int29 = type26.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type26);
        int int32 = type26.getOpcode(212);
        int int33 = type26.getDimensions();
        int int35 = type26.getOpcode(149);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str37 = type36.getClassName();
        boolean boolean39 = type36.equals((java.lang.Object) "boolean");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier40.merge(value48, value53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type57, type58, type61, type62 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        int int65 = type55.getSort();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier40.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        java.lang.String str75 = type72.getDescriptor();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type71, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray76);
        java.lang.String str79 = type55.getClassName();
        java.lang.String str80 = type55.getClassName();
        boolean boolean81 = type36.equals((java.lang.Object) str80);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier82.newValue(type83);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type87 = org.mockito.asm.Type.VOID_TYPE;
        int int88 = type87.getSize();
        int int89 = type87.getSize();
        java.lang.String str90 = type87.getDescriptor();
        org.mockito.asm.Type[] typeArray91 = new org.mockito.asm.Type[] { type86, type87 };
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray91);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray91);
        int int94 = type36.getSort();
        int int95 = type36.getSize();
        boolean boolean96 = type26.equals((java.lang.Object) type36);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 177 + "'", int29 == 177);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 216 + "'", int32 == 216);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 153 + "'", int35 == 153);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "double" + "'", str37, "double");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)Z" + "'", str64, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "V" + "'", str75, "V");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)Z" + "'", str77, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(ZV)Z" + "'", str78, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "V" + "'", str90, "V");
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(ZV)Z" + "'", str92, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(ZV)D" + "'", str93, "(ZV)D");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 8 + "'", int94 == 8);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I;" + "'", str3, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null, but found I;");
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("V");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type23 = type22.getElementType();
        org.mockito.asm.Type type24 = type22.getElementType();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter0.newValue(type22);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = type28.getElementType();
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter32.newValue(type33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean40 = type35.equals((java.lang.Object) analyzerException39);
        int int42 = type35.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter32.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier44.merge(value49, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier58.merge(value63, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.copyOperation(abstractInsnNode57, value69);
        int int71 = value70.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter32.merge(value55, value70);
        int int73 = value72.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Object) type28, value72);
        int int75 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter0.newValue(type28);
        int int78 = type28.getOpcode(0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "void" + "'", str19, "void");
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)Z" + "'", str31, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 160 + "'", int42 == 160);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(ZV)Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean64 = type62.equals((java.lang.Object) "(JVSZ)Z");
        int int65 = type62.getSize();
        java.lang.String str66 = type62.getClassName();
        java.lang.String str67 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type69 = type62.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier26.merge(value31, value36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter24.copyOperation(abstractInsnNode25, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier40.merge(value58, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter24.copyOperation(abstractInsnNode39, value63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter23.merge(value64, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) 50, value64);
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: S", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org/mockito/asm/tree/analysis/AnalyzerException, but found D", (java.lang.Throwable) analyzerException87);
        java.lang.Throwable[] throwableArray89 = analyzerException87.getSuppressed();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        int int24 = type14.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier31.merge(value36, value41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter29.copyOperation(abstractInsnNode30, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter29.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean50 = type48.equals((java.lang.Object) "(JVSZ)Z");
        int int51 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter29.newValue(type48);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type55, type56, type59, type60 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        java.lang.String str63 = type53.getDescriptor();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        java.lang.String str74 = type71.getDescriptor();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type70, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray75);
        java.lang.String str79 = type53.toString();
        int int80 = type53.getSort();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter29.newValue(type53);
        boolean boolean82 = type28.equals((java.lang.Object) value81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.unaryOperation(abstractInsnNode26, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Z" + "'", str63, "Z");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "V" + "'", str74, "V");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)Z" + "'", str76, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)LZ;" + "'", str77, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(ZV)Z" + "'", str78, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Z" + "'", str79, "Z");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException41);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException42);
        java.lang.Class<?> wildcardClass44 = analyzerException12.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str46, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        int int15 = type14.getSize();
        int int16 = type14.getSize();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type13, type14, type17, type18 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray19);
        java.lang.String str21 = type11.getDescriptor();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        java.lang.String str32 = type29.getDescriptor();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type28, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray33);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray33);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray33);
        int int39 = type4.getOpcode(19);
        java.lang.String str40 = type4.getClassName();
        java.lang.String str41 = type4.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "V" + "'", str32, "V");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(ZV)Z" + "'", str34, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(ZV)LZ;" + "'", str35, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(ZV)Z" + "'", str36, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(ZV)F" + "'", str37, "(ZV)F");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "F" + "'", str41, "F");
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray11 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray11);
        java.lang.Class<?> wildcardClass13 = type9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getDescriptor();
        int int16 = type14.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str12, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: double;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type15, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray20);
        java.lang.String str24 = type3.getClassName();
        java.lang.String str25 = type3.getClassName();
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray27);
        boolean boolean29 = type1.equals((java.lang.Object) str28);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(ZV)Z" + "'", str21, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(ZV)F" + "'", str22, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(ZV)LZ;" + "'", str23, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)LZ;" + "'", str28, "(JVSZ)LZ;");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter9.copyOperation(abstractInsnNode24, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter8.merge(value49, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException6, value49);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value73);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = analyzerException74.getSuppressed();
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value79);
        java.lang.Throwable[] throwableArray81 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = analyzerException80.getSuppressed();
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException85.addSuppressed((java.lang.Throwable) analyzerException87);
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException90);
        java.lang.String str92 = analyzerException90.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str92, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;" + "'", str2, "LLorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        int int8 = type5.getSort();
        int int9 = type5.getSize();
        boolean boolean11 = type5.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        int int37 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier12.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        java.lang.String str47 = type44.getDescriptor();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type43, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray48);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray48);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray48);
        java.lang.String str53 = type1.getClassName();
        java.lang.String str54 = type1.toString();
        java.lang.String str55 = type1.getDescriptor();
        java.lang.String str56 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "V" + "'", str47, "V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(ZV)Z" + "'", str50, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(ZV)Z" + "'", str51, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)V" + "'", str52, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "void" + "'", str53, "void");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "void" + "'", str56, "void");
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier20.newValue(type25);
        java.lang.Class<?> wildcardClass27 = basicVerifier20.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier8.newValue(type28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier8.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int36 = type35.getSort();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier8.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str40 = type39.getClassName();
        java.lang.String str41 = type39.toString();
        java.lang.String str42 = type39.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier8.newValue(type39);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.unaryOperation(abstractInsnNode7, value43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str32, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "L(JVSZ)Z;" + "'", str41, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "L(JVSZ)Z;" + "'", str42, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier51.merge(value59, value64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier47.merge(value65, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier71.merge(value79, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value45, value65, value85);
        int int87 = value65.getSize();
        int int88 = value65.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicVerifier0.unaryOperation(abstractInsnNode29, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        java.lang.Class<?> wildcardClass8 = type4.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(4096);
        int int12 = type9.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier18.merge(value26, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier14.merge(value32, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter13.merge(value32, value52);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier60.merge(value65, value70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.copyOperation(abstractInsnNode59, value71);
        int int73 = value72.getSize();
        int int74 = value72.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value72);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter13.copyOperation(abstractInsnNode54, value72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier78 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str80 = type79.getClassName();
        int int81 = type79.getSize();
        int int83 = type79.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier78.newValue(type79);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter13.copyOperation(abstractInsnNode77, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LL(JVSZ)Z;;", (java.lang.Object) type9, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LLorg.mockito.asm.Type;;;", obj1, value84);
        java.lang.Throwable throwable88 = null;
        // The following exception was thrown during execution in test generation
        try {
            analyzerException87.addSuppressed(throwable88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4100 + "'", int11 == 4100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 157 + "'", int83 == 157);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getReturnType("L(JVSZ)V;");
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier0.newValue(type60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("J");
        int int65 = type63.getOpcode(143);
        int int67 = type63.getOpcode((int) (byte) 0);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newOperation(abstractInsnNode69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 147 + "'", int65 == 147);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier6.merge(value24, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter5.merge(value24, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        java.lang.String str64 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier46.newValue(type61);
        int int66 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter5.newValue(type61);
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value74);
        java.lang.Throwable[] throwableArray76 = analyzerException75.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException78);
        boolean boolean81 = type61.equals((java.lang.Object) analyzerException78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier0.newValue(type61);
        java.lang.String str83 = type61.getDescriptor();
        int int84 = type61.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "V" + "'", str83, "V");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter13.newValue(type14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean21 = type16.equals((java.lang.Object) analyzerException20);
        int int23 = type16.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter13.newValue(type16);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        int int32 = type28.getSort();
        boolean boolean34 = type28.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter13.newValue(type28);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str37 = type36.toString();
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter13.newValue(type36);
        boolean boolean39 = type11.equals((java.lang.Object) basicInterpreter13);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType("F");
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.toString();
        int int44 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter13.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        int int71 = type70.getSize();
        int int72 = type70.getSize();
        java.lang.String str73 = type70.getDescriptor();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type69, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray74);
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray77);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier50.newValue(type66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) analyzerException49, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter13.copyOperation(abstractInsnNode46, value79);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicInterpreter13.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 160 + "'", int23 == 160);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "D" + "'", str26, "D");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "C" + "'", str37, "C");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "F" + "'", str43, "F");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)Z" + "'", str75, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)Z" + "'", str78, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        boolean boolean22 = type18.equals((java.lang.Object) 4);
        boolean boolean24 = type18.equals((java.lang.Object) 193);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type28, type29, type32, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray34);
        int int40 = type15.getOpcode(6);
        java.lang.Class<?> wildcardClass41 = type15.getClass();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)Z" + "'", str35, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)V" + "'", str36, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)Z" + "'", str37, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Z" + "'", str38, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getClassName();
        boolean boolean3 = type0.equals((java.lang.Object) "boolean");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        int int29 = type19.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier4.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type35, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray40);
        java.lang.String str43 = type19.getClassName();
        java.lang.String str44 = type19.getClassName();
        boolean boolean45 = type0.equals((java.lang.Object) str44);
        java.lang.String str46 = type0.getDescriptor();
        java.lang.String str47 = type0.getDescriptor();
        int int49 = type0.getOpcode(29);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "double" + "'", str1, "double");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Z" + "'", str41, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)Z" + "'", str42, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "D" + "'", str46, "D");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "D" + "'", str47, "D");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)L(JVSZ)V;");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        java.lang.String str25 = type15.getDescriptor();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type32, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray37);
        java.lang.String str42 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier43.newValue(type48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Object) type14, value51);
        int int53 = value51.getSize();
        java.lang.Class<?> wildcardClass54 = value51.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        int int57 = type55.getOpcode((int) (byte) 100);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)Z" + "'", str38, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)LZ;" + "'", str39, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(ZV)Z" + "'", str40, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str41, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 104 + "'", int57 == 104);
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        java.lang.String str50 = type45.getInternalName();
        int int52 = type45.getOpcode(142);
        int int53 = type45.getSort();
        int int54 = type45.getSize();
        java.lang.String str55 = type45.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)Z" + "'", str50, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 146 + "'", int52 == 146);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        int int5 = type4.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = type11.getElementType();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier6.newValue(type11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str17 = type16.toString();
        int int18 = type16.getDimensions();
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value21);
        boolean boolean23 = type16.equals((java.lang.Object) "");
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier6.newValue(type16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;", (java.lang.Object) int5, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;: expected L(JVSZ)Z;, but found R", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = type30.getElementType();
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter34.newValue(type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean42 = type37.equals((java.lang.Object) analyzerException41);
        int int44 = type37.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter34.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier46.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier60.merge(value65, value70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.copyOperation(abstractInsnNode59, value71);
        int int73 = value72.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter34.merge(value57, value72);
        int int75 = value74.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Object) type30, value74);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException76);
        java.lang.String str78 = analyzerException25.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Z" + "'", str12, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LZ;" + "'", str17, "LZ;");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)Z" + "'", str31, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 160 + "'", int44 == 160);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: LLZ;: expected 1, but found R" + "'", str78, "org.mockito.asm.tree.analysis.AnalyzerException: LLZ;: expected 1, but found R");
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        int int26 = type20.getOpcode(131);
        int int27 = type20.getSort();
        int int28 = type20.getSort();
        org.mockito.asm.Type type29 = type20.getElementType();
        org.mockito.asm.Type type30 = type29.getElementType();
        org.mockito.asm.Type type31 = type30.getElementType();
        java.lang.String str32 = type30.getClassName();
        int int33 = type30.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 135 + "'", int26 == 135);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mockito.asm.tree.analysis.BasicVerifier" + "'", str32, "mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        java.lang.String str50 = type45.getInternalName();
        int int52 = type45.getOpcode(142);
        int int53 = type45.getDimensions();
        java.lang.Class<?> wildcardClass54 = type45.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)Z" + "'", str50, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 146 + "'", int52 == 146);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean44 = type39.equals((java.lang.Object) analyzerException43);
        int int46 = type39.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter36.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        int int55 = type51.getSort();
        boolean boolean57 = type51.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter36.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.merge(value33, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int70 = type69.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray73 = analyzerException72.getSuppressed();
        boolean boolean74 = type69.equals((java.lang.Object) analyzerException72);
        java.lang.String str75 = type69.getInternalName();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        java.lang.Class<?> wildcardClass82 = type78.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier0.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicVerifier0.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 160 + "'", int46 == 160);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "D" + "'", str49, "D");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "B" + "'", str66, "B");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str75, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int2 = type0.getSize();
        int int3 = type0.getSort();
        int int4 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "S" + "'", str1, "S");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("LZ;");
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = type1.equals((java.lang.Object) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getDescriptor();
        java.lang.String str4 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str2, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str3, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str4, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", obj12, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.merge(value31, value55);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.Type;");
        int int62 = type61.getSize();
        int int63 = type61.getDimensions();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier65.newValue(type70);
        java.lang.Class<?> wildcardClass72 = basicVerifier65.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        int int78 = type77.getSort();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier0.newValue(type77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        java.util.List list81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = basicVerifier0.naryOperation(abstractInsnNode80, list81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str73, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str75, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str76, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type39);
        int int41 = type39.getSize();
        int int42 = type39.getDimensions();
        org.mockito.asm.Type type43 = type39.getElementType();
        int int45 = type43.getOpcode(4);
        int int46 = type43.getSize();
        int int47 = type43.getSize();
        int int48 = type43.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str37, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str38, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str58 = type57.toString();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type62, type63, type66, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray68);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray68);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray68);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        int int79 = type77.getOpcode(193);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter0.newValue(type77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        java.util.List list82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.naryOperation(abstractInsnNode81, list82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)Z" + "'", str69, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)V" + "'", str70, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)V" + "'", str71, "(JVSZ)V");
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 197 + "'", int79 == 197);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException32);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException33);
        java.lang.Throwable[] throwableArray35 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        boolean boolean50 = type40.equals((java.lang.Object) analyzerException49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter37.newValue(type40);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.copyOperation(abstractInsnNode54, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier81 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str83 = type82.getClassName();
        int int84 = type82.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier81.newValue(type82);
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier72.merge(value80, value85);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier87 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str89 = type88.getClassName();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier87.newValue(type88);
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier68.merge(value86, value90);
        int int92 = value91.getSize();
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter36.merge(value66, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) analyzerException4, value93);
        int int95 = value93.getSize();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "boolean" + "'", str89, "boolean");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)LLZ;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier9.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier36.newValue(type51);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier9.newValue(type51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        boolean boolean61 = type57.equals((java.lang.Object) 4);
        int int62 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier9.newValue(type57);
        java.lang.Class<?> wildcardClass64 = value63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type71);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.lang.Object obj75 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter76.newValue(type77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        int int80 = type79.getSize();
        int int81 = type79.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean84 = type79.equals((java.lang.Object) analyzerException83);
        int int86 = type79.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter76.newValue(type79);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str89 = type88.toString();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter76.newValue(type88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("void", obj75, value90);
        int int92 = value90.getSize();
        int int93 = value90.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.copyOperation(abstractInsnNode73, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str65, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str66, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 160 + "'", int86 == 160);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "D" + "'", str89, "D");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter1.newValue(type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        boolean boolean22 = type18.equals((java.lang.Object) 4);
        boolean boolean24 = type18.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter1.newValue(type18);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        boolean boolean30 = type26.equals((java.lang.Object) 4);
        boolean boolean32 = type26.equals((java.lang.Object) 193);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type36, type37, type40, type41 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray42);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray42);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray42);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter1.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier49.merge(value54, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.copyOperation(abstractInsnNode48, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter47.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter47.newValue(type65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)B", (java.lang.Object) value46, value66);
        int int68 = value66.getSize();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)Z" + "'", str43, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)V" + "'", str44, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org/mockito/asm/tree/analysis/AnalyzerException, but found D");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        boolean boolean26 = type22.equals((java.lang.Object) 4);
        int int27 = type22.getSort();
        java.lang.String str28 = type22.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier30.newValue(type35);
        java.lang.Class<?> wildcardClass37 = basicVerifier30.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        int int40 = type39.getSort();
        int int42 = type39.getOpcode(165);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str44 = type43.toString();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        int int50 = type49.getSize();
        int int51 = type49.getSize();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type48, type49, type52, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray54);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray54);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray54);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray54);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray54);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("LLchar;;", (java.lang.Object) analyzerException66, value75);
        int int83 = value75.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        int int89 = type85.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier84.newValue(type85);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.merge(value75, value90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 165 + "'", int42 == 165);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)V" + "'", str56, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)V" + "'", str57, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(JVSZ)S" + "'", str58, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str59, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)I" + "'", str60, "(JVSZ)I");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)Z" + "'", str61, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)F" + "'", str62, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 157 + "'", int89 == 157);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;");
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier0.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        int int40 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.Type[] typeArray47 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray47);
        java.lang.String str49 = type43.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        int int56 = type55.getSize();
        int int57 = type55.getSize();
        java.lang.String str58 = type55.getDescriptor();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type54, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray59);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray59);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.naryOperation(abstractInsnNode65, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)F" + "'", str48, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "F" + "'", str49, "F");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)F" + "'", str61, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)LZ;" + "'", str62, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)F" + "'", str63, "(ZV)F");
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = analyzerException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value11);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass16 = analyzerException4.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.copyOperation(abstractInsnNode19, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter18.copyOperation(abstractInsnNode33, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter18.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier48.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter46.copyOperation(abstractInsnNode47, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        boolean boolean65 = type61.equals((java.lang.Object) 4);
        java.lang.String str66 = type61.getClassName();
        java.lang.String str67 = type61.getClassName();
        java.lang.String str68 = type61.toString();
        java.lang.String str69 = type61.toString();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter46.newValue(type61);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str73 = type72.getClassName();
        java.lang.String str74 = type72.toString();
        java.lang.String str75 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter46.newValue(type72);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter18.copyOperation(abstractInsnNode45, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V: expected null, but found I", (java.lang.Object) wildcardClass16, value76);
        java.lang.Throwable[] throwableArray79 = analyzerException78.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str17, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)Z" + "'", str73, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L(JVSZ)Z;" + "'", str74, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L(JVSZ)Z;" + "'", str75, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str11 = type10.getInternalName();
        java.lang.String str12 = type10.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException17);
        boolean boolean21 = type10.equals((java.lang.Object) analyzerException20);
        int int22 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter6.newValue(type10);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str26 = type25.getInternalName();
        int int28 = type25.getOpcode(15);
        int int29 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter6.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean39 = type34.equals((java.lang.Object) analyzerException38);
        int int41 = type34.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter31.newValue(type34);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        java.lang.String str49 = type46.getDescriptor();
        boolean boolean51 = type46.equals((java.lang.Object) 129);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter31.newValue(type46);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter31.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter31.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = type66.getElementType();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier61.newValue(type66);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        int int71 = type70.getSize();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean75 = type70.equals((java.lang.Object) analyzerException74);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier61.newValue(type70);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier61.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter31.copyOperation(abstractInsnNode60, value79);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicVerifier0.ternaryOperation(abstractInsnNode4, value5, value30, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)Z" + "'", str11, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Z" + "'", str12, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 160 + "'", int41 == 160);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "LC;" + "'", str55, "LC;");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(ZV)V;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;: expected 10, but found R");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        java.lang.Class<?> wildcardClass8 = basicVerifier1.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(165);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray25);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type9);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter0.newValue(type33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int38 = type36.getOpcode(137);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str41 = type40.getClassName();
        int int43 = type40.getOpcode(83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        int int50 = type49.getSize();
        int int51 = type49.getSize();
        java.lang.String str52 = type49.getDescriptor();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type48, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray53);
        org.mockito.asm.Type[] typeArray56 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray56);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray56);
        java.lang.String str61 = type33.getInternalName();
        java.lang.String str62 = type33.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 165 + "'", int13 == 165);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)S" + "'", str29, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str30, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 137 + "'", int38 == 137);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 83 + "'", int43 == 83);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "V" + "'", str52, "V");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(ZV)Z" + "'", str54, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)Z" + "'", str57, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(JVSZ)Z" + "'", str58, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JVSZ)Z" + "'", str59, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;" + "'", str60, "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str61, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;" + "'", str62, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
        boolean boolean8 = type1.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type" + "'", str9, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter18.newValue(type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        boolean boolean31 = type21.equals((java.lang.Object) analyzerException30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.newValue(type21);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("S");
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter18.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier39.merge(value44, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter37.copyOperation(abstractInsnNode38, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier53.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter37.copyOperation(abstractInsnNode52, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter37.copyOperation(abstractInsnNode61, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter18.copyOperation(abstractInsnNode36, value66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.copyOperation(abstractInsnNode17, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = type9.getElementType();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier4.newValue(type9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter13.newValue(type14);
        java.lang.String str16 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier4.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        int int28 = type18.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier4.newValue(type18);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter31.newValue(type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        boolean boolean53 = type49.equals((java.lang.Object) 4);
        boolean boolean55 = type49.equals((java.lang.Object) 193);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray65);
        int int71 = type46.getOpcode((int) (short) 100);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicVerifier0.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)V" + "'", str67, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)Z" + "'", str68, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)Z" + "'", str69, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        java.lang.Class<?> wildcardClass18 = basicInterpreter0.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int20 = type19.getSize();
        int int21 = type19.getSort();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        java.lang.Throwable throwable5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", throwable5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I", (java.lang.Throwable) analyzerException7);
        java.lang.Throwable[] throwableArray10 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier12.merge(value30, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter11.merge(value30, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        int int63 = type56.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter53.newValue(type56);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.newValue(type65);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter11.copyOperation(abstractInsnNode52, value67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter11.newValue(type70);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Object) analyzerException7, value71);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 160 + "'", int63 == 160);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "D" + "'", str66, "D");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier60.merge(value65, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier72.newValue(type77);
        java.lang.Class<?> wildcardClass79 = basicVerifier72.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier60.newValue(type80);
        int int82 = value81.getSize();
        int int83 = value81.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicVerifier0.unaryOperation(abstractInsnNode59, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value32, value52, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value8, value15, value52);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type76);
        int int78 = type76.getSort();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        int int82 = type80.getOpcode(48);
        boolean boolean83 = type76.equals((java.lang.Object) type80);
        java.lang.String str84 = type76.toString();
        java.lang.String str85 = type76.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L(ZV)F;" + "'", str84, "L(ZV)F;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L(ZV)F;" + "'", str85, "L(ZV)F;");
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean58 = type53.equals((java.lang.Object) analyzerException57);
        int int60 = type53.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter50.newValue(type53);
        java.lang.String str62 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.SHORT_TYPE;
        int int70 = type69.getSort();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier65.newValue(type69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean80 = type75.equals((java.lang.Object) analyzerException79);
        int int82 = type75.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter72.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str85 = type84.toString();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter72.newValue(type84);
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier65.newValue(type84);
        int int88 = value87.getSize();
        int int89 = value87.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.unaryOperation(abstractInsnNode64, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 160 + "'", int60 == 160);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 160 + "'", int82 == 160);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "D" + "'", str85, "D");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.toString();
        java.lang.String str2 = type0.toString();
        int int4 = type0.getOpcode(158);
        int int6 = type0.getOpcode(256);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "V" + "'", str1, "V");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 163 + "'", int4 == 163);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 261 + "'", int6 == 261);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type40, type41, type44, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        int int48 = type38.getSort();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier50.newValue(type65);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier23.newValue(type65);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        boolean boolean75 = type71.equals((java.lang.Object) 4);
        int int76 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier23.newValue(type71);
        java.lang.Class<?> wildcardClass78 = value77.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        int int82 = type81.getSort();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.newValue(type81);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        int int87 = type85.getOpcode(48);
        int int88 = type85.getSort();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier0.newValue(type85);
        java.lang.Class<?> wildcardClass90 = basicVerifier0.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Z" + "'", str47, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str79, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str80, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        java.lang.Object obj48 = null;
        boolean boolean49 = type42.equals(obj48);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type50 = type42.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LLLZ;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter6.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        boolean boolean25 = type21.equals((java.lang.Object) 4);
        java.lang.String str26 = type21.getClassName();
        java.lang.String str27 = type21.getClassName();
        java.lang.String str28 = type21.toString();
        java.lang.String str29 = type21.toString();
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter6.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier31.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        java.lang.String str46 = type43.getDescriptor();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type42, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray47);
        org.mockito.asm.Type[] typeArray50 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray50);
        int int52 = type39.getSort();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier31.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        java.lang.String str62 = type59.getDescriptor();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type58, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray66);
        int int68 = type55.getSort();
        java.lang.String str69 = type55.getDescriptor();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier31.newValue(type55);
        int int71 = value70.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier76.merge(value84, value89);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier91 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str93 = type92.getClassName();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier91.newValue(type92);
        org.mockito.asm.tree.analysis.Value value95 = basicVerifier72.merge(value90, value94);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter6.merge(value70, value95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) analyzerException4, value95);
        java.lang.Throwable[] throwableArray98 = analyzerException97.getSuppressed();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Z" + "'", str28, "Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Z" + "'", str29, "Z");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)Z" + "'", str48, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "boolean" + "'", str93, "boolean");
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = type14.getElementType();
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = type16.getElementType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int20 = type19.getSort();
        boolean boolean21 = type18.equals((java.lang.Object) int20);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "g.mockito.asm.Type" + "'", str17, "g.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        boolean boolean57 = type53.equals((java.lang.Object) 4);
        boolean boolean59 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier62.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        java.lang.String str77 = type74.getDescriptor();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type73, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray81);
        int int83 = type70.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier62.newValue(type70);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier62.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.copyOperation(abstractInsnNode61, value86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier91 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str93 = type92.getClassName();
        int int94 = type92.getSize();
        org.mockito.asm.tree.analysis.Value value95 = basicVerifier91.newValue(type92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value95);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.copyOperation(abstractInsnNode88, value95);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.newOperation(abstractInsnNode98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "V" + "'", str77, "V");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)Z" + "'", str79, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "boolean" + "'", str93, "boolean");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        boolean boolean4 = type1.equals((java.lang.Object) 169);
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter7.merge(value26, value46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier53.merge(value61, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier49.merge(value67, value71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        int int77 = type76.getSize();
        int int78 = type76.getSize();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type75, type76, type79, type80 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray81);
        int int83 = type73.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier49.newValue(type73);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter7.copyOperation(abstractInsnNode48, value84);
        int int86 = value85.getSize();
        int int87 = value85.getSize();
        boolean boolean88 = type1.equals((java.lang.Object) int87);
        int int89 = type1.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = type1.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        java.lang.String str4 = type1.getDescriptor();
        int int6 = type1.getOpcode(160);
        int int7 = type1.getSort();
        java.lang.Object obj8 = null;
        boolean boolean9 = type1.equals(obj8);
        boolean boolean11 = type1.equals((java.lang.Object) 93);
        int int12 = type1.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier18.merge(value26, value31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier14.merge(value32, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter13.merge(value32, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        int int70 = type69.getSize();
        int int71 = type69.getSize();
        java.lang.String str72 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier54.newValue(type69);
        int int74 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter13.newValue(type69);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = type77.getElementType();
        java.lang.String str80 = type77.getDescriptor();
        java.lang.Class<?> wildcardClass81 = type77.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter13.newValue(type82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str85 = type84.toString();
        java.lang.String str86 = type84.toString();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter13.newValue(type84);
        int int89 = type84.getOpcode(133);
        java.lang.String str90 = type84.getDescriptor();
        org.mockito.asm.Type[] typeArray92 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)I");
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type84, typeArray92);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray92);
        java.lang.String str95 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Z" + "'", str4, "Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 160 + "'", int6 == 160);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "V" + "'", str72, "V");
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)Z" + "'", str78, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L(JVSZ)Z;" + "'", str80, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "F" + "'", str85, "F");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "F" + "'", str86, "F");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 135 + "'", int89 == 135);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "F" + "'", str90, "F");
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(JVSZ)F" + "'", str93, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(JVSZ)Z" + "'", str94, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Z" + "'", str95, "Z");
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier24.merge(value42, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier48.merge(value66, value70);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.merge(value42, value71);
        int int74 = value42.getSize();
        int int75 = value42.getSize();
        int int76 = value42.getSize();
        int int77 = value42.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier11.merge(value29, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier35.merge(value43, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter10.merge(value29, value49);
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.merge(value29, value51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        java.util.List list54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.naryOperation(abstractInsnNode53, list54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value52);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        int int26 = type20.getOpcode(131);
        int int27 = type20.getSort();
        int int28 = type20.getSort();
        org.mockito.asm.Type type29 = type20.getElementType();
        int int30 = type29.getDimensions();
        java.lang.String str31 = type29.getDescriptor();
        org.mockito.asm.Type[] typeArray33 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray33);
        java.lang.String str35 = type29.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 135 + "'", int26 == 135);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str31, "Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str34, "(JVSZ)Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "g.mockito.asm.tree.analysis.BasicVerifier" + "'", str35, "g.mockito.asm.tree.analysis.BasicVerifier");
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str58 = type57.toString();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type62, type63, type66, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray68);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray68);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray68);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type57);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int75 = type74.getSort();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter0.newValue(type74);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = basicInterpreter0.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)Z" + "'", str69, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)V" + "'", str70, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)V" + "'", str71, "(JVSZ)V");
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str2 = type1.toString();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type[] typeArray6 = org.mockito.asm.Type.getArgumentTypes("(ZV)LJ;");
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray6);
        java.lang.String str8 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getDescriptor();
        java.lang.String str13 = type11.toString();
        boolean boolean14 = type10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType("F");
        java.lang.String str17 = type16.getClassName();
        java.lang.String str18 = type16.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter19.newValue(type34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        boolean boolean41 = type37.equals((java.lang.Object) 4);
        boolean boolean43 = type37.equals((java.lang.Object) 193);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        int int49 = type48.getSize();
        int int50 = type48.getSize();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type47, type48, type51, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray53);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray53);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray53);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray53);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray53);
        int int61 = type4.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Z" + "'", str2, "Z");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str7, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "F" + "'", str18, "F");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(JVSZ)Z" + "'", str54, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)V" + "'", str55, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)Z" + "'", str56, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)Z" + "'", str57, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(JVSZ)F" + "'", str58, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JVSZ)D" + "'", str59, "(JVSZ)D");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str60, "(JVSZ)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        boolean boolean7 = type3.equals((java.lang.Object) 4);
        boolean boolean9 = type3.equals((java.lang.Object) 193);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        int int15 = type14.getSize();
        int int16 = type14.getSize();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type13, type14, type17, type18 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray19);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        int int23 = type3.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier49.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter24.merge(value43, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type3, value63);
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException71);
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)D", (java.lang.Throwable) analyzerException65);
        java.lang.Throwable[] throwableArray76 = analyzerException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = analyzerException75.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)C", (java.lang.Throwable) analyzerException75);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)Z" + "'", str22, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier6.merge(value24, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value29);
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.merge(value29, value31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        boolean boolean50 = type40.equals((java.lang.Object) analyzerException49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter37.newValue(type40);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.copyOperation(abstractInsnNode54, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier81 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str83 = type82.getClassName();
        int int84 = type82.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier81.newValue(type82);
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier72.merge(value80, value85);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier87 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str89 = type88.getClassName();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier87.newValue(type88);
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier68.merge(value86, value90);
        int int92 = value91.getSize();
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter36.merge(value66, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)V", (java.lang.Object) type35, value93);
        org.mockito.asm.tree.analysis.Value value95 = basicVerifier0.newValue(type35);
        int int96 = type35.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "boolean" + "'", str89, "boolean");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;, but found D");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type27, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        org.mockito.asm.Type[] typeArray35 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int37 = type24.getSort();
        java.lang.String str38 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        java.lang.Class<?> wildcardClass43 = value42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(ZV)Z" + "'", str33, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str44, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str45, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType("LLZ;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier6.merge(value11, value16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.copyOperation(abstractInsnNode5, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter4.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter4.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter28.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter28.copyOperation(abstractInsnNode31, value38);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter4.merge(value27, value40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found I", (java.lang.Object) type3, value40);
        int int43 = value40.getSize();
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException(".mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type", (java.lang.Object) value40, value44);
        int int46 = value40.getSize();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("LZ;");
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = type1.equals((java.lang.Object) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)V;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier2.newValue(type3);
        java.lang.Class<?> wildcardClass7 = type3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier13.merge(value18, value23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter11.copyOperation(abstractInsnNode12, value24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier31.merge(value39, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier27.merge(value45, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter11.copyOperation(abstractInsnNode26, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter10.merge(value51, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) str9, value51);
        java.lang.Throwable[] throwableArray72 = analyzerException71.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("g/mockito/asm/Type", (java.lang.Throwable) analyzerException71);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter1, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 142);
        int int34 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter1.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = basicInterpreter1.newOperation(abstractInsnNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(value35);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)J");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)J" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)J");
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        int int4 = type0.getSort();
        boolean boolean6 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass7 = type0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        int int10 = type9.getSort();
        int int11 = type9.getSize();
        org.mockito.asm.Type type12 = type9.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("L(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type12.getSort();
        boolean boolean15 = type12.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int17 = type12.getOpcode(148);
        int int19 = type12.getOpcode(197);
        java.lang.String str20 = type12.getDescriptor();
        java.lang.String str21 = type12.toString();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        int int27 = type26.getSize();
        int int28 = type26.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type25, type26, type29, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray31);
        java.lang.Class<?> wildcardClass33 = type23.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        int int38 = type37.getSort();
        org.mockito.asm.Type type39 = type37.getElementType();
        java.lang.String str40 = type39.getClassName();
        int int42 = type39.getOpcode(52);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier44.newValue(type49);
        java.lang.Class<?> wildcardClass51 = basicVerifier44.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str55 = type54.getClassName();
        java.lang.String str56 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier59.newValue(type60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        int int64 = type63.getSort();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier68.merge(value76, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value82);
        boolean boolean84 = type63.equals((java.lang.Object) value82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.unaryOperation(abstractInsnNode58, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 148 + "'", int17 == 148);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 197 + "'", int19 == 197);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z" + "'", str20, "Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "g.mockito.asm.Type" + "'", str40, "g.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 56 + "'", int42 == 56);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str53, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str55, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str56, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        java.lang.String str45 = type40.toString();
        int int47 = type40.getOpcode((int) ' ');
        int int48 = type40.getDimensions();
        org.mockito.asm.Type type49 = type40.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str45, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36 + "'", int47 == 36);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(type49);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.Type type9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier4.newValue(type9);
        java.lang.Class<?> wildcardClass11 = basicVerifier4.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getDimensions();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = type18.getElementType();
        java.lang.String str21 = type18.getDescriptor();
        java.lang.Class<?> wildcardClass22 = type18.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.lang.String str25 = type24.getInternalName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        boolean boolean30 = type26.equals((java.lang.Object) 4);
        boolean boolean32 = type26.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier33.merge(value41, value46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type50, type51, type54, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        int int58 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier33.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type64, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        boolean boolean72 = type26.equals((java.lang.Object) typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray69);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray69);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray69);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Z" + "'", str2, "Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Z" + "'", str3, "Z");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str13, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "L(JVSZ)Z;" + "'", str21, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)Z" + "'", str57, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(ZV)Z" + "'", str70, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)Z" + "'", str71, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str73, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;" + "'", str74, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str75, "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)Z" + "'", str76, "(ZV)Z");
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier1.merge(value9, value14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        int int20 = type19.getSize();
        int int21 = type19.getSize();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type18, type19, type22, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        int int26 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        java.lang.String str46 = type43.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier28.newValue(type43);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier1.newValue(type43);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier1.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier1.newValue(type52);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier1.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier1.newValue(type58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("L(JVSZ)V;");
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier1.newValue(type61);
        java.lang.Class<?> wildcardClass63 = type61.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.Object obj66 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.VOID_TYPE;
        int int83 = type82.getSize();
        int int84 = type82.getSize();
        java.lang.String str85 = type82.getDescriptor();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier67.newValue(type82);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier87 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str89 = type88.getClassName();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier87.newValue(type88);
        int int91 = type88.getSort();
        int int92 = type88.getSort();
        org.mockito.asm.tree.analysis.Value value93 = basicVerifier67.newValue(type88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I", obj66, value93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Object) wildcardClass63, value93);
        int int96 = value93.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "V" + "'", str85, "V");
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "boolean" + "'", str89, "boolean");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        java.lang.Object obj2 = null;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        int int14 = type13.getSort();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier41.merge(value59, value63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value39, value59, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value15, value22, value59);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter7.newValue(type83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)F", (java.lang.Object) str6, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I", obj2, value84);
        java.lang.Throwable[] throwableArray87 = analyzerException86.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;", (java.lang.Throwable) analyzerException86);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)V" + "'", str6, "(JVSZ)V");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(throwableArray87);
    }
}


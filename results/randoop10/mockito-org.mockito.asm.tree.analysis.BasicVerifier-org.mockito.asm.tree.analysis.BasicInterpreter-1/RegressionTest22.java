import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode61, value62, value66, value73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException87);
        boolean boolean90 = type80.equals((java.lang.Object) analyzerException89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter77.newValue(type80);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter76.newValue(type80);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.copyOperation(abstractInsnNode75, value92);
        java.lang.Class<?> wildcardClass94 = value93.getClass();
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass94);
        int int97 = type95.getOpcode(1028);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1032 + "'", int97 == 1032);
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier12.newValue(type17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean26 = type21.equals((java.lang.Object) analyzerException25);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier12.newValue(type21);
        java.lang.String str28 = type21.getClassName();
        java.lang.String str29 = type21.toString();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type21);
        java.lang.String str31 = type21.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JVSZ)Z" + "'", str18, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "void" + "'", str28, "void");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "V" + "'", str29, "V");
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "void" + "'", str31, "void");
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str27 = type26.getInternalName();
        int int29 = type26.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type26);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = type40.getElementType();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier35.newValue(type40);
        int int44 = value43.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = basicVerifier0.binaryOperation(abstractInsnNode33, value34, value43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 177 + "'", int29 == 177);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;" + "'", str2, "LZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        boolean boolean59 = type46.equals((java.lang.Object) value57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray64);
        int int67 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type46);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("Z");
        java.lang.String str71 = type70.getInternalName();
        java.lang.String str72 = type70.getDescriptor();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.newValue(type70);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str76 = type75.toString();
        java.lang.Class<?> wildcardClass77 = type75.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(ZV)LJ;");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray80);
        java.lang.String str83 = type70.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)F" + "'", str65, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str66, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Z" + "'", str71, "Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LZ;" + "'", str72, "LZ;");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Z" + "'", str76, "Z");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str81, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(ZV)LZ;" + "'", str82, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "LZ;" + "'", str83, "LZ;");
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException31);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray37 = analyzerException3.getSuppressed();
        java.lang.Class<?> wildcardClass38 = analyzerException3.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        int int14 = type13.getSort();
        java.lang.Class<?> wildcardClass15 = type13.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int22 = type20.getOpcode(182);
        boolean boolean23 = type12.equals((java.lang.Object) int22);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str9, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str11, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 186 + "'", int22 == 186);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter7.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int11 = type10.getSize();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean15 = type10.equals((java.lang.Object) analyzerException14);
        int int17 = type10.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter7.newValue(type10);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.toString();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.newValue(type19);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier25.merge(value30, value35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter23.copyOperation(abstractInsnNode24, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter23.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean44 = type42.equals((java.lang.Object) "(JVSZ)Z");
        int int45 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter23.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier0.merge(value46, value47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType("F");
        java.lang.String str51 = type50.getClassName();
        java.lang.String str52 = type50.toString();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type50);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = type50.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 160 + "'", int17 == 160);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "F" + "'", str52, "F");
        org.junit.Assert.assertNotNull(value53);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type63);
        java.lang.Class<?> wildcardClass65 = basicVerifier58.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        int int71 = type69.getSort();
        java.lang.String str72 = type69.getClassName();
        int int73 = type69.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str68, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str72, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(JVSZ)L(JVSZ)V;;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)L(JVSZ)V;;" + "'", str2, "L(JVSZ)L(JVSZ)V;;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L(JVSZ)L(JVSZ)V;;" + "'", str3, "L(JVSZ)L(JVSZ)V;;");
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int2 = type1.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("Z");
        int int6 = type4.getOpcode(101);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        boolean boolean11 = type7.equals((java.lang.Object) 4);
        boolean boolean13 = type7.equals((java.lang.Object) 193);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray23);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray23);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue");
        java.lang.Throwable[] throwableArray31 = analyzerException30.getSuppressed();
        boolean boolean32 = type1.equals((java.lang.Object) throwableArray31);
        java.lang.String str33 = type1.getDescriptor();
        java.lang.String str34 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 101 + "'", int6 == 101);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)V" + "'", str25, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)LLorg/mockito/asm/Type;;" + "'", str28, "(JVSZ)LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str33, "LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str34, "LLorg/mockito/asm/Type;;");
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter22.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier15.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str42 = type41.getInternalName();
        int int44 = type41.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier15.newValue(type41);
        int int47 = type41.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        int int56 = type55.getSize();
        int int57 = type55.getSize();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type54, type55, type58, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray60);
        java.lang.Class<?> wildcardClass62 = type52.getClass();
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.newValue(type66);
        java.lang.String str68 = type66.getClassName();
        int int69 = type66.getDimensions();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 177 + "'", int44 == 177);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 145 + "'", int47 == 145);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)Z" + "'", str61, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str63, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str64, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.mockito.asm.Type" + "'", str68, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.newValue(type63);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.copyOperation(abstractInsnNode46, value65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str69 = type68.getInternalName();
        int int70 = type68.getSize();
        java.lang.String str71 = type68.getClassName();
        java.lang.String str72 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "S" + "'", str44, "S");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str69, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str72, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier29.newValue(type34);
        java.lang.Class<?> wildcardClass36 = basicVerifier29.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getDimensions();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type37);
        int int41 = type37.getDimensions();
        int int42 = type37.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str38, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException9);
        java.lang.Throwable[] throwableArray11 = analyzerException9.getSuppressed();
        java.lang.Class<?> wildcardClass12 = analyzerException9.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str13, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Lckito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = type1.getElementType();
        org.mockito.asm.Type type4 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value8);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException13);
        java.lang.Throwable[] throwableArray15 = analyzerException9.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LJ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException20);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        boolean boolean40 = type27.equals((java.lang.Object) value38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray45);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray45);
        int int49 = type27.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException60);
        boolean boolean63 = type53.equals((java.lang.Object) analyzerException62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        int int84 = type83.getSize();
        int int85 = type83.getSize();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type82, type83, type86, type87 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray88);
        int int90 = type80.getSort();
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier65.newValue(type80);
        java.lang.String str92 = type80.toString();
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter50.newValue(type80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Object) int49, value93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;", (java.lang.Throwable) analyzerException94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;", (java.lang.Throwable) analyzerException94);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException96);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)F" + "'", str46, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str47, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 172 + "'", int49 == 172);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(JVSZ)Z" + "'", str89, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Z" + "'", str92, "Z");
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected Z, but found F;");
        int int3 = type1.getOpcode(22);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 26 + "'", int3 == 26);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int15 = type14.getSize();
        int int17 = type14.getOpcode(131072);
        java.lang.String str18 = type14.getClassName();
        java.lang.String str19 = type14.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 131076 + "'", int17 == 131076);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.asm.Type" + "'", str18, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type" + "'", str19, "org.mockito.asm.Type");
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)LLorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)D: expected I, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter2.merge(value21, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        java.lang.String str46 = type43.getDescriptor();
        int int47 = type43.getSort();
        boolean boolean49 = type43.equals((java.lang.Object) (byte) 0);
        int int50 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter2.newValue(type43);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter2.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean63 = type58.equals((java.lang.Object) analyzerException62);
        int int65 = type58.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter55.newValue(type58);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter2.newValue(type58);
        java.lang.String str68 = type58.getClassName();
        int int69 = type58.getSort();
        boolean boolean70 = type1.equals((java.lang.Object) type58);
        java.lang.String str71 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 160 + "'", int65 == 160);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "void" + "'", str68, "void");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)D: expected I, but found I" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)D: expected I, but found I");
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str62 = type61.getInternalName();
        int int64 = type61.getOpcode(15);
        org.mockito.asm.Type type65 = type61.getElementType();
        java.lang.String str66 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type61);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicValue");
        int int70 = type69.getSort();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier0.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier72.newValue(type77);
        java.lang.Class<?> wildcardClass79 = basicVerifier72.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str84 = type83.toString();
        int int85 = type83.getDimensions();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier0.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        java.util.List list88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicVerifier0.naryOperation(abstractInsnNode87, list88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L(JVSZ)Z;" + "'", str66, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str81, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str82, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str84, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type63);
        java.lang.Class<?> wildcardClass65 = basicVerifier58.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value73);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = analyzerException74.getSuppressed();
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value81);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass86 = analyzerException74.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        int int88 = type87.getSort();
        java.lang.String str89 = type87.getInternalName();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type87);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getReturnType("(JVSZ)Lg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.newValue(type92);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType("F");
        int int96 = type95.getSort();
        java.lang.String str97 = type95.toString();
        org.mockito.asm.tree.analysis.Value value98 = basicInterpreter0.newValue(type95);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str68, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 6 + "'", int96 == 6);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "F" + "'", str97, "F");
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str10 = type9.getDescriptor();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.newValue(type9);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = type13.getElementType();
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = type24.getElementType();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier19.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter28.newValue(type29);
        java.lang.String str31 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier19.newValue(type29);
        java.lang.Class<?> wildcardClass33 = basicVerifier19.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier0.newValue(type36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.unaryOperation(abstractInsnNode38, value39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "V" + "'", str10, "V");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(JVSZ)Z" + "'", str14, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "J" + "'", str16, "J");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str34, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str35, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        java.lang.String str5 = type1.toString();
        java.lang.String str6 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLZ;;" + "'", str2, "LLZ;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLZ;;" + "'", str5, "LLZ;;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LLZ;;" + "'", str6, "LLZ;;");
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier31.merge(value39, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier27.merge(value45, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.Type[] typeArray55 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray55);
        java.lang.String str57 = type51.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        java.lang.String str66 = type63.getDescriptor();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type62, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray67);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier27.newValue(type51);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier2.merge(value25, value70);
        int int72 = value71.getSize();
        int int73 = value71.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;, but found D", obj1, value71);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)F" + "'", str56, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "V" + "'", str66, "V");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)Z" + "'", str68, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(ZV)F" + "'", str69, "(ZV)F");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable throwable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            analyzerException5.addSuppressed(throwable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = analyzerException10.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        analyzerException22.addSuppressed((java.lang.Throwable) analyzerException29);
        java.lang.Throwable[] throwableArray33 = analyzerException29.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException34);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value40);
        java.lang.Throwable[] throwableArray42 = analyzerException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = analyzerException41.getSuppressed();
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value46);
        java.lang.Throwable[] throwableArray48 = analyzerException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = analyzerException47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = analyzerException47.getSuppressed();
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)F", (java.lang.Throwable) analyzerException47);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier62.merge(value70, value75);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier58.merge(value76, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException83);
        java.lang.Throwable[] throwableArray85 = analyzerException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = analyzerException84.getSuppressed();
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException84);
        java.lang.Throwable[] throwableArray88 = analyzerException84.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;, but found D");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSize();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str2, "Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        java.lang.String str25 = type15.getDescriptor();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type32, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray37);
        java.lang.String str42 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier43.newValue(type48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Object) type14, value51);
        int int53 = value51.getSize();
        java.lang.Class<?> wildcardClass54 = value51.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier58.merge(value63, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.copyOperation(abstractInsnNode57, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter56.newValue(type71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str76 = type75.toString();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter56.newValue(type75);
        boolean boolean79 = type55.equals((java.lang.Object) type75);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)Z" + "'", str38, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)LZ;" + "'", str39, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(ZV)Z" + "'", str40, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str41, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Z" + "'", str76, "Z");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getDescriptor();
        java.lang.String str9 = type7.toString();
        boolean boolean10 = type6.equals((java.lang.Object) type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        java.lang.String str30 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier12.newValue(type27);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier12.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter35.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean43 = type38.equals((java.lang.Object) analyzerException42);
        int int45 = type38.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter35.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier61.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter59.copyOperation(abstractInsnNode60, value72);
        int int74 = value73.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter35.merge(value58, value73);
        int int76 = value75.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R", (java.lang.Object) type33, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Object) type7, value75);
        java.lang.Class<?> wildcardClass79 = analyzerException78.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        boolean boolean83 = type1.equals((java.lang.Object) str82);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Z" + "'", str8, "Z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "V" + "'", str30, "V");
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 160 + "'", int45 == 160);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str80, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str82, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value2);
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value6);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException13);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException14);
        java.lang.Class<?> wildcardClass16 = analyzerException14.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str17, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSort();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type7);
        java.lang.Class<?> wildcardClass10 = basicVerifier3.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int13 = type12.getDimensions();
        int int15 = type12.getOpcode(109);
        int int16 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter20.merge(value39, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean70 = type65.equals((java.lang.Object) analyzerException69);
        int int72 = type65.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter62.newValue(type65);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.toString();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter62.newValue(type74);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter20.copyOperation(abstractInsnNode61, value76);
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Object) basicInterpreter20, value78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str81 = type80.getClassName();
        int int82 = type80.getSize();
        org.mockito.asm.Type[] typeArray84 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray84);
        java.lang.String str86 = type80.toString();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter20.newValue(type80);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.copyOperation(abstractInsnNode18, value87);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 113 + "'", int15 == 113);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 160 + "'", int72 == 160);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "D" + "'", str75, "D");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(JVSZ)F" + "'", str85, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "F" + "'", str86, "F");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int25 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.copyOperation(abstractInsnNode27, value28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(value26);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type27, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        org.mockito.asm.Type[] typeArray35 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int37 = type24.getSort();
        java.lang.String str38 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        java.util.List list46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.naryOperation(abstractInsnNode45, list46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(ZV)Z" + "'", str33, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value44);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(151);
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type[] typeArray7 = org.mockito.asm.Type.getArgumentTypes("(ZV)Z");
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray7);
        java.lang.String str9 = type5.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter11.newValue(type12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException21);
        boolean boolean24 = type14.equals((java.lang.Object) analyzerException23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter11.newValue(type14);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter10.newValue(type14);
        int int28 = type14.getOpcode((int) '4');
        java.lang.String str29 = type14.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier35.merge(value43, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier31.merge(value49, value53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier55.merge(value63, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter30.merge(value49, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        java.lang.String str74 = type71.getDescriptor();
        int int75 = type71.getSort();
        boolean boolean77 = type71.equals((java.lang.Object) (byte) 0);
        int int78 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter30.newValue(type71);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType("F");
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter30.newValue(type81);
        boolean boolean84 = type14.equals((java.lang.Object) type81);
        boolean boolean85 = type5.equals((java.lang.Object) type81);
        int int86 = type81.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 155 + "'", int3 == 155);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str8, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "V" + "'", str74, "V");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        org.mockito.asm.Type[] typeArray2 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)LD;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        boolean boolean17 = type7.equals((java.lang.Object) analyzerException16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type7);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter3.newValue(type7);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType("V");
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter3.newValue(type21);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter3.newValue(type25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter3.newValue(type27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lckito/asm/tree/analysis/BasicVerifier;: expected (ZV)J, but found I", (java.lang.Object) typeArray2, value28);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "void" + "'", str22, "void");
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier13.merge(value21, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier9.merge(value27, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException45);
        java.lang.Throwable[] throwableArray48 = analyzerException47.getSuppressed();
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException47);
        java.lang.Throwable[] throwableArray50 = analyzerException39.getSuppressed();
        java.lang.Throwable[] throwableArray51 = analyzerException39.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException39);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;", (java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter56.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean64 = type59.equals((java.lang.Object) analyzerException63);
        int int66 = type59.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter56.newValue(type59);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str69 = type68.toString();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier74.merge(value79, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter72.copyOperation(abstractInsnNode73, value85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter72.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter56.copyOperation(abstractInsnNode71, value88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        org.mockito.asm.tree.analysis.Value value91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter56.copyOperation(abstractInsnNode90, value91);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter56.newValue(type93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;: expected V, but found I", (java.lang.Object) "LZ;", value94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I", (java.lang.Throwable) analyzerException95);
        java.lang.String str97 = analyzerException96.toString();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 160 + "'", int66 == 160);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "D" + "'", str69, "D");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNull(value92);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str97, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str40 = type39.getInternalName();
        java.lang.String str41 = type39.getDescriptor();
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        java.util.List list45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value46 = basicInterpreter0.naryOperation(abstractInsnNode44, list45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str36, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str40, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;" + "'", str41, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str42, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("I");
        int int3 = type1.getOpcode((int) (short) 0);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int28 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str32 = type31.getClassName();
        java.lang.String str33 = type31.toString();
        java.lang.String str34 = type31.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type38, type39, type42, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        java.lang.Class<?> wildcardClass46 = type36.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        int int52 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        java.util.List list55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value56 = basicVerifier0.naryOperation(abstractInsnNode54, list55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L(JVSZ)Z;" + "'", str33, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "L(JVSZ)Z;" + "'", str34, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str49, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str50, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = type66.getElementType();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier61.newValue(type66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter70.newValue(type71);
        java.lang.String str73 = type71.getDescriptor();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier61.newValue(type71);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str77 = type76.getDescriptor();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier61.newValue(type76);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier61.newValue(type79);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicVerifier0.copyOperation(abstractInsnNode60, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str77, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("LC;", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException5.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int3 = type2.getDimensions();
        int int4 = type2.getDimensions();
        java.lang.Class<?> wildcardClass5 = type2.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        int int10 = type9.getSize();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean14 = type9.equals((java.lang.Object) analyzerException13);
        int int16 = type9.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter6.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier32.merge(value37, value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter30.copyOperation(abstractInsnNode31, value43);
        int int45 = value44.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.merge(value29, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V: expected null, but found I", (java.lang.Object) type2, value46);
        java.lang.Throwable[] throwableArray48 = analyzerException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = analyzerException47.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value58);
        java.lang.Throwable[] throwableArray60 = analyzerException59.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)F;", (java.lang.Throwable) analyzerException59);
        analyzerException54.addSuppressed((java.lang.Throwable) analyzerException59);
        java.lang.Throwable[] throwableArray63 = analyzerException54.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LJ;", (java.lang.Throwable) analyzerException54);
        analyzerException47.addSuppressed((java.lang.Throwable) analyzerException64);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 160 + "'", int16 == 160);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        int int52 = type51.getDimensions();
        int int53 = type51.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        java.lang.String str67 = type57.getDescriptor();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        java.lang.String str78 = type75.getDescriptor();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type74, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray79);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray79);
        int int84 = type56.getDimensions();
        int int85 = type56.getSort();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier0.newValue(type56);
        int int87 = value86.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "V" + "'", str78, "V");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Z" + "'", str80, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)LZ;" + "'", str81, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(ZV)Z" + "'", str82, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str83, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.String str11 = type4.toString();
        int int12 = type4.getSort();
        int int13 = type4.getSize();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.Class<?> wildcardClass24 = type14.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        boolean boolean30 = type4.equals((java.lang.Object) str29);
        java.lang.String str31 = type4.getClassName();
        java.lang.String str32 = type4.getClassName();
        int int33 = type4.getSort();
        int int35 = type4.getOpcode(141);
        int int36 = type4.getSort();
        java.lang.String str37 = type4.getClassName();
        int int39 = type4.getOpcode(0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "F" + "'", str11, "F");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str25, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str27, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str29, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 143 + "'", int35 == 143);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", obj1, value6);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(value6);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean64 = type62.equals((java.lang.Object) "(JVSZ)Z");
        int int65 = type62.getSize();
        java.lang.String str66 = type62.getClassName();
        java.lang.String str67 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type62);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray81);
        java.lang.String str83 = type77.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier84.newValue(type85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type89 = org.mockito.asm.Type.VOID_TYPE;
        int int90 = type89.getSize();
        int int91 = type89.getSize();
        java.lang.String str92 = type89.getDescriptor();
        org.mockito.asm.Type[] typeArray93 = new org.mockito.asm.Type[] { type88, type89 };
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type85, typeArray93);
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray93);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray93);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.newValue(type73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = type73.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)F" + "'", str82, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "F" + "'", str83, "F");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "boolean" + "'", str86, "boolean");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "V" + "'", str92, "V");
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(ZV)Z" + "'", str94, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(ZV)F" + "'", str95, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(ZV)Z" + "'", str96, "(ZV)Z");
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass12 = analyzerException4.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        boolean boolean14 = type10.equals((java.lang.Object) 4);
        boolean boolean16 = type10.equals((java.lang.Object) 193);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int22 = type21.getSize();
        int int23 = type21.getSize();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type20, type21, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray26);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        int int31 = type10.getOpcode(175);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.copyOperation(abstractInsnNode34, value46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier53.merge(value61, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier49.merge(value67, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter33.copyOperation(abstractInsnNode48, value72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        int int88 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier85.newValue(type86);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier76.merge(value84, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter32.merge(value73, value90);
        boolean boolean93 = type10.equals((java.lang.Object) value92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.unaryOperation(abstractInsnNode9, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 175 + "'", int31 == 175);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str6 = type5.getInternalName();
        int int7 = type5.getSize();
        int int9 = type5.getOpcode(4096);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier10.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.Type[] typeArray63 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray63);
        java.lang.String str65 = type59.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        java.lang.String str74 = type71.getDescriptor();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type70, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier35.newValue(type59);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier10.merge(value33, value78);
        int int80 = value79.getSize();
        int int81 = value79.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Object) type5, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected Z, but found F", (java.lang.Object) analyzerException2, value79);
        java.lang.Throwable[] throwableArray84 = analyzerException2.getSuppressed();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4100 + "'", int9 == 4100);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)F" + "'", str64, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "F" + "'", str65, "F");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "V" + "'", str74, "V");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)Z" + "'", str76, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)F" + "'", str77, "(ZV)F");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int22 = type20.getOpcode(188);
        java.lang.String str23 = type20.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 192 + "'", int22 == 192);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int13 = type12.getSize();
        org.mockito.asm.Type type14 = type12.getElementType();
        java.lang.String str15 = type12.getInternalName();
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(ZV)L(JVSZ)L(JVSZ)V;;");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str18, "(ZV)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter2.merge(value21, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean51 = type46.equals((java.lang.Object) analyzerException50);
        int int53 = type46.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter43.newValue(type46);
        java.lang.String str55 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter2.newValue(type46);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter2.newValue(type58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        int int68 = type67.getSize();
        int int69 = type67.getSize();
        java.lang.String str70 = type67.getDescriptor();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type66, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray71);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter2.newValue(type61);
        int int75 = value74.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;", (java.lang.Object) "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;", value74);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 160 + "'", int53 == 160);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "V" + "'", str70, "V");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)Z" + "'", str72, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)LZ;" + "'", str73, "(ZV)LZ;");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean44 = type39.equals((java.lang.Object) analyzerException43);
        int int46 = type39.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter36.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        int int55 = type51.getSort();
        boolean boolean57 = type51.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter36.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.merge(value33, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type70, type71, type74, type75 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray76);
        java.lang.Class<?> wildcardClass78 = type68.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        int int82 = type81.getSort();
        java.lang.String str83 = type81.toString();
        java.lang.String str84 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.newValue(type81);
        int int87 = type81.getOpcode(8199);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 160 + "'", int46 == 160);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "D" + "'", str49, "D");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "B" + "'", str66, "B");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(JVSZ)Z" + "'", str77, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str79, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str80, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.asm.Type" + "'", str84, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8203 + "'", int87 == 8203);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.Type[] typeArray61 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray61);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier53.newValue(type57);
        java.lang.Object obj65 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str68 = type67.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray77);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier69.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type67, value79);
        int int81 = value79.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", obj65, value79);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.merge(value63, value79);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)F" + "'", str62, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "D" + "'", str68, "D");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)F" + "'", str78, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value86);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R");
        int int2 = type1.getDimensions();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type3 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("F");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.newValue(type55);
        java.lang.String str57 = type55.getClassName();
        int int58 = type55.getSort();
        java.lang.String str59 = type55.getClassName();
        java.lang.String str60 = type55.toString();
        java.lang.String str61 = type55.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str57, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str59, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str60, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str61, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I;");
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getInternalName();
        java.lang.String str6 = type1.getDescriptor();
        int int7 = type1.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        int int42 = type32.getSort();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier8.newValue(type32);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int48 = type45.getOpcode(93);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        boolean boolean62 = type52.equals((java.lang.Object) analyzerException61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter49.newValue(type52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("B", (java.lang.Object) type45, value63);
        int int65 = type45.getSize();
        int int66 = type45.getSort();
        boolean boolean67 = type32.equals((java.lang.Object) int66);
        int int68 = type32.getSort();
        boolean boolean69 = type1.equals((java.lang.Object) int68);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ldouble;" + "'", str2, "Ldouble;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "double" + "'", str4, "double");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "double" + "'", str5, "double");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ldouble;" + "'", str6, "Ldouble;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 95 + "'", int48 == 95);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str8 = type7.getDescriptor();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value12 = basicVerifier0.naryOperation(abstractInsnNode10, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value9);
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter0.copyOperation(abstractInsnNode24, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newOperation(abstractInsnNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("ZV)L(ZV)L(JVSZ)Z");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier5.merge(value10, value15);
        boolean boolean17 = type4.equals((java.lang.Object) value15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray22);
        int int26 = type4.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        boolean boolean40 = type30.equals((java.lang.Object) analyzerException39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter27.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        int int67 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier42.newValue(type57);
        java.lang.String str69 = type57.toString();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter27.newValue(type57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Object) int26, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException86);
        java.lang.Throwable[] throwableArray90 = analyzerException86.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        analyzerException91.addSuppressed((java.lang.Throwable) analyzerException93);
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException93);
        java.lang.String str96 = analyzerException73.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)F" + "'", str23, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str24, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 172 + "'", int26 == 172);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;" + "'", str96, "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;");
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        java.lang.Class<?> wildcardClass14 = basicVerifier0.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = type17.getElementType();
        int int22 = type20.getOpcode(268);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str16, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 272 + "'", int22 == 272);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier15.merge(value20, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.copyOperation(abstractInsnNode14, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier33.merge(value41, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier29.merge(value47, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter13.copyOperation(abstractInsnNode28, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter12.merge(value53, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException10, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z", (java.lang.Throwable) analyzerException74);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException75);
        java.lang.Class<?> wildcardClass79 = analyzerException78.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str80, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str81, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;, but found D");
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException7);
        java.lang.Class<?> wildcardClass9 = analyzerException5.getClass();
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int2 = type0.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier15.merge(value20, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.copyOperation(abstractInsnNode14, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter13.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier6.newValue(type28);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier6.newValue(type31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Object) "(ZV)LZ;", value32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException33);
        boolean boolean35 = type0.equals((java.lang.Object) analyzerException34);
        int int36 = type0.getSize();
        int int37 = type0.getSort();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "S" + "'", str1, "S");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter1.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        boolean boolean23 = type19.equals((java.lang.Object) 4);
        boolean boolean25 = type19.equals((java.lang.Object) 193);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        int int41 = type16.getOpcode((int) (short) 100);
        int int43 = type16.getOpcode(129);
        int int45 = type16.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier0.newValue(type16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = type16.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Z" + "'", str38, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 129 + "'", int43 == 129);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 148 + "'", int45 == 148);
        org.junit.Assert.assertNotNull(value46);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = type3.getElementType();
        int int5 = type3.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        java.lang.Class<?> wildcardClass14 = basicVerifier0.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str15, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str16, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str18, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str19, "org/mockito/asm/tree/analysis/BasicVerifier");
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        java.lang.String str60 = type57.getDescriptor();
        int int61 = type57.getSort();
        boolean boolean63 = type57.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter42.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier65.newValue(type69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter42, value70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 142);
        int int75 = type72.getSort();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter42.newValue(type72);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = type72.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int28 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str32 = type31.getClassName();
        java.lang.String str33 = type31.toString();
        java.lang.String str34 = type31.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean41 = type36.equals((java.lang.Object) analyzerException40);
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value44);
        java.lang.Throwable[] throwableArray46 = analyzerException45.getSuppressed();
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException45);
        java.lang.Class<?> wildcardClass48 = analyzerException40.getClass();
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        int int52 = type51.getDimensions();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        int int57 = type55.getOpcode(208);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type55);
        java.lang.String str59 = type55.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L(JVSZ)Z;" + "'", str33, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "L(JVSZ)Z;" + "'", str34, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str49, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 212 + "'", int57 == 212);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F" + "'", str59, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)S");
        int int2 = type1.getDimensions();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        boolean boolean29 = type25.equals((java.lang.Object) 4);
        boolean boolean31 = type25.equals((java.lang.Object) 193);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type35, type36, type39, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getDescriptor();
        boolean boolean65 = type62.equals((java.lang.Object) 93);
        java.lang.String str66 = type62.getDescriptor();
        int int67 = type62.getSort();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter47.newValue(type62);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.copyOperation(abstractInsnNode46, value68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int72 = type71.getDimensions();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type71);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)V" + "'", str43, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Z" + "'", str63, "Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Z" + "'", str66, "Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        int int52 = type51.getDimensions();
        int int53 = type51.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier0.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        int int63 = type59.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type59);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.unaryOperation(abstractInsnNode57, value64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 157 + "'", int63 == 157);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 4, value16);
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value20);
        java.lang.Throwable[] throwableArray22 = analyzerException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = analyzerException21.getSuppressed();
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException21);
        java.lang.Throwable[] throwableArray25 = analyzerException21.getSuppressed();
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException21);
        java.lang.Throwable[] throwableArray27 = analyzerException21.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: byte", (java.lang.Throwable) analyzerException21);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type39);
        int int42 = type39.getOpcode(95);
        int int44 = type39.getOpcode(196);
        int int45 = type39.getDimensions();
        java.lang.Class<?> wildcardClass46 = type39.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str37, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str38, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 200 + "'", int44 == 200);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        int int18 = type15.getSort();
        java.lang.String str19 = type15.toString();
        java.lang.Class<?> wildcardClass20 = type15.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        int int22 = type21.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        int int24 = type21.getSort();
        int int25 = type21.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean35 = type30.equals((java.lang.Object) analyzerException34);
        int int37 = type30.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter27.newValue(type30);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter27.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier45.merge(value50, value55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.copyOperation(abstractInsnNode44, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter43.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter27.copyOperation(abstractInsnNode42, value59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter27.newValue(type62);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.merge(value64, value66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        int int70 = type69.getSize();
        java.lang.String str71 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier0.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicVerifier0.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 160 + "'", int37 == 160);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "D" + "'", str40, "D");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str63, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str71, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier0.newValue(type4);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", obj12, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.merge(value31, value55);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("LLorg/mockito/asm/Type;;");
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier64.merge(value69, value74);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier76.newValue(type81);
        java.lang.Class<?> wildcardClass83 = basicVerifier76.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier64.newValue(type84);
        java.lang.String str86 = type84.getInternalName();
        java.lang.String str87 = type84.getInternalName();
        java.lang.String str88 = type84.getClassName();
        int int90 = type84.getOpcode(131);
        int int91 = type84.getSort();
        int int92 = type84.getSort();
        org.mockito.asm.Type type93 = type84.getElementType();
        org.mockito.asm.Type type94 = type93.getElementType();
        int int95 = type94.getSort();
        org.mockito.asm.tree.analysis.Value value96 = basicVerifier0.newValue(type94);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = basicVerifier0.newOperation(abstractInsnNode97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)F" + "'", str9, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg.mockito.asm.Type" + "'", str62, "Lorg.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str86, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str87, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str88, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 135 + "'", int90 == 135);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;");
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = type39.getElementType();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        java.lang.String str46 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier34.newValue(type44);
        java.lang.Class<?> wildcardClass48 = basicVerifier34.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier53.merge(value71, value75);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier81 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str83 = type82.getClassName();
        int int84 = type82.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier81.newValue(type82);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier86 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str88 = type87.getClassName();
        int int89 = type87.getSize();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier86.newValue(type87);
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier77.merge(value85, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter52.merge(value71, value91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.copyOperation(abstractInsnNode51, value92);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        int int96 = type95.getSize();
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.newValue(type95);
        int int98 = type95.getSize();
        int int99 = type95.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "boolean" + "'", str88, "boolean");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        int int25 = type24.getSize();
        int int26 = type24.getSize();
        java.lang.String str27 = type24.getDescriptor();
        boolean boolean29 = type24.equals((java.lang.Object) 129);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;", (java.lang.Object) 131076, value50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.copyOperation(abstractInsnNode31, value50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.Type[] typeArray50 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray50);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier42.newValue(type46);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type55, type56, type59, type60 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        java.lang.String str63 = type53.getDescriptor();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        java.lang.String str74 = type71.getDescriptor();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type70, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray75);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray75);
        java.lang.String str80 = type46.getClassName();
        java.lang.String str81 = type46.getDescriptor();
        boolean boolean82 = type28.equals((java.lang.Object) str81);
        java.lang.Class<?> wildcardClass83 = type28.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)F" + "'", str51, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Z" + "'", str63, "Z");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "V" + "'", str74, "V");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)Z" + "'", str76, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)LZ;" + "'", str77, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(ZV)Z" + "'", str78, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)F" + "'", str79, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "F" + "'", str81, "F");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException36);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter51.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean59 = type54.equals((java.lang.Object) analyzerException58);
        int int61 = type54.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter51.newValue(type54);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str64 = type63.toString();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter51.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        java.lang.String str69 = type66.getDescriptor();
        int int70 = type66.getSort();
        boolean boolean72 = type66.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter51.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier74.newValue(type78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter51, value79);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LL(JVSZ)Z;;", (java.lang.Throwable) analyzerException80);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        java.lang.Class<?> wildcardClass84 = analyzerException82.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 160 + "'", int61 == 160);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "D" + "'", str64, "D");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "V" + "'", str69, "V");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str85, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str26 = type25.getInternalName();
        int int28 = type25.getOpcode(15);
        org.mockito.asm.Type type29 = type25.getElementType();
        org.mockito.asm.Type type30 = type25.getElementType();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier37.merge(value42, value47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier49.newValue(type54);
        java.lang.Class<?> wildcardClass56 = basicVerifier49.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier37.newValue(type57);
        java.lang.String str59 = type57.getInternalName();
        java.lang.String str60 = type57.getInternalName();
        int int62 = type57.getOpcode(19);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier33.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier64.newValue(type65);
        java.lang.String str68 = type65.getDescriptor();
        int int70 = type65.getOpcode(160);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean74 = type72.equals((java.lang.Object) "(JVSZ)Z");
        int int75 = type72.getSize();
        boolean boolean76 = type65.equals((java.lang.Object) type72);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier33.newValue(type72);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.copyOperation(abstractInsnNode32, value77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str59, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str60, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 23 + "'", int62 == 23);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 160 + "'", int70 == 160);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier41.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier50.merge(value55, value60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier62.newValue(type67);
        java.lang.Class<?> wildcardClass69 = basicVerifier62.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier50.newValue(type70);
        java.lang.String str72 = type70.getInternalName();
        java.lang.String str73 = type70.getInternalName();
        int int75 = type70.getOpcode(19);
        java.lang.String str76 = type70.getDescriptor();
        int int77 = type70.getSort();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.newValue(type70);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("Lchar;");
        java.lang.String str84 = type83.toString();
        java.lang.String str85 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.newValue(type83);
        int int87 = type83.getSort();
        java.lang.String str88 = type83.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str72, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str73, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str76, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "LLchar;;" + "'", str84, "LLchar;;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lchar;" + "'", str85, "Lchar;");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lchar;" + "'", str88, "Lchar;");
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type4, type5, type8, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray10);
        java.lang.String str12 = type2.getDescriptor();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray24);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray24);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray24);
        int int29 = type1.getSort();
        int int30 = type1.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter31.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        boolean boolean54 = type48.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter31.newValue(type48);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        boolean boolean60 = type56.equals((java.lang.Object) 4);
        boolean boolean62 = type56.equals((java.lang.Object) 193);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        int int68 = type67.getSize();
        int int69 = type67.getSize();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type66, type67, type70, type71 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray72);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter31.newValue(type56);
        org.mockito.asm.Type[] typeArray78 = org.mockito.asm.Type.getArgumentTypes("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray78);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)Z" + "'", str11, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(ZV)LZ;" + "'", str26, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(ZV)Z" + "'", str27, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str28, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)Z" + "'", str73, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)V" + "'", str74, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(JVSZ)Z" + "'", str75, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)Z" + "'", str79, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str80, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier38.merge(value56, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter22.copyOperation(abstractInsnNode37, value61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter21.merge(value62, value79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean85 = type83.equals((java.lang.Object) "(JVSZ)Z");
        int int86 = type83.getSize();
        java.lang.String str87 = type83.getClassName();
        java.lang.String str88 = type83.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter21.newValue(type83);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter21.newValue(type90);
        int int92 = value91.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicVerifier0.unaryOperation(abstractInsnNode20, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str16, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Z" + "'", str88, "Z");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier30.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.copyOperation(abstractInsnNode29, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        boolean boolean47 = type43.equals((java.lang.Object) 4);
        java.lang.String str48 = type43.getClassName();
        java.lang.String str49 = type43.getClassName();
        java.lang.String str50 = type43.toString();
        java.lang.String str51 = type43.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter28.newValue(type43);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str55 = type54.getClassName();
        java.lang.String str56 = type54.toString();
        java.lang.String str57 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.copyOperation(abstractInsnNode27, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: double");
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type61);
        java.lang.String str64 = type61.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)Z;" + "'", str56, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L(JVSZ)Z;" + "'", str57, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: double" + "'", str62, "org.mockito.asm.tree.analysis.AnalyzerException: double");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: double" + "'", str64, "org.mockito.asm.tree.analysis.AnalyzerException: double");
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        boolean boolean35 = type25.equals((java.lang.Object) analyzerException34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.newValue(type25);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter21.newValue(type25);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType("V");
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter21.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        int int67 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier42.newValue(type57);
        java.lang.String str69 = type57.toString();
        java.lang.Class<?> wildcardClass70 = type57.getClass();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter21.newValue(type72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str75 = type74.getClassName();
        int int76 = type74.getSort();
        int int77 = type74.getSort();
        java.lang.String str78 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter21.newValue(type74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicVerifier0.copyOperation(abstractInsnNode20, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str16, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "void" + "'", str40, "void");
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier7.merge(value12, value17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter5.copyOperation(abstractInsnNode6, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter5.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;", (java.lang.Object) analyzerException2, value21);
        java.lang.Throwable[] throwableArray23 = analyzerException22.getSuppressed();
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        int int53 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type48);
        java.lang.Class<?> wildcardClass55 = value54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str58, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str63, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        int int53 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type48);
        java.lang.Class<?> wildcardClass55 = value54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        int int62 = type61.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str58, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        java.util.List list60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = basicVerifier0.naryOperation(abstractInsnNode59, list60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        int int3 = type1.getOpcode(268);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 270 + "'", int3 == 270);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(15);
        java.lang.String str5 = type1.toString();
        int int6 = type1.getSort();
        java.lang.String str7 = type1.getDescriptor();
        int int8 = type1.getSize();
        java.lang.String str9 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)Z;" + "'", str5, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "L(JVSZ)Z;" + "'", str7, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "L(JVSZ)Z;" + "'", str9, "L(JVSZ)Z;");
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        boolean boolean5 = type1.equals((java.lang.Object) 4);
        boolean boolean7 = type1.equals((java.lang.Object) 193);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type11, type12, type15, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray17);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        int int21 = type1.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier23.merge(value41, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier47.merge(value55, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter22.merge(value41, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type1, value61);
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException69);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value76);
        java.lang.Throwable[] throwableArray78 = analyzerException77.getSuppressed();
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value81);
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value85);
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException86);
        java.lang.Throwable[] throwableArray88 = analyzerException82.getSuppressed();
        analyzerException77.addSuppressed((java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Throwable) analyzerException82);
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException90);
        java.lang.Throwable[] throwableArray92 = analyzerException71.getSuppressed();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JVSZ)Z" + "'", str18, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)V" + "'", str19, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("F");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter0.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean63 = type58.equals((java.lang.Object) analyzerException62);
        int int65 = type58.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter55.newValue(type58);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str68 = type67.toString();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter55.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        int int71 = type70.getSize();
        int int72 = type70.getSize();
        java.lang.String str73 = type70.getDescriptor();
        int int74 = type70.getSort();
        boolean boolean76 = type70.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter55.newValue(type70);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str79 = type78.toString();
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter55.newValue(type78);
        int int81 = value80.getSize();
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.copyOperation(abstractInsnNode54, value80);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.copyOperation(abstractInsnNode83, value84);
        org.mockito.asm.Type type86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)I");
        java.lang.String str90 = type89.getClassName();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.newValue(type89);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 160 + "'", int65 == 160);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "D" + "'", str68, "D");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "C" + "'", str79, "C");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "int" + "'", str90, "int");
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter2.newValue(type3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean10 = type5.equals((java.lang.Object) analyzerException9);
        int int12 = type5.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter2.newValue(type5);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter2.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        int int42 = type32.getSort();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier17.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        java.lang.String str62 = type59.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier44.newValue(type59);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier17.newValue(type59);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        boolean boolean69 = type65.equals((java.lang.Object) 4);
        int int70 = type65.getSort();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier17.newValue(type65);
        java.lang.Class<?> wildcardClass72 = value71.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        int int76 = type75.getSort();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter2.newValue(type75);
        boolean boolean79 = type1.equals((java.lang.Object) basicInterpreter2);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getReturnType("LJVSZ)LJ;");
        int int82 = type81.getSort();
        int int83 = type81.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter2.newValue(type81);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 160 + "'", int12 == 160);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "D" + "'", str15, "D");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str73, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str74, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("F");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter0.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean63 = type58.equals((java.lang.Object) analyzerException62);
        int int65 = type58.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter55.newValue(type58);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("Ldouble;");
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter55.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        int int71 = type70.getSize();
        int int72 = type70.getSize();
        java.lang.String str73 = type70.getDescriptor();
        boolean boolean75 = type70.equals((java.lang.Object) 129);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter55.newValue(type70);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str79 = type78.getInternalName();
        int int81 = type78.getOpcode(173);
        java.lang.String str82 = type78.getInternalName();
        int int83 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter55.newValue(type78);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.copyOperation(abstractInsnNode54, value84);
        java.lang.Class<?> wildcardClass86 = value85.getClass();
        java.lang.String str87 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass86);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 160 + "'", int65 == 160);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)Z" + "'", str79, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 177 + "'", int81 == 177);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str87, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        java.lang.Class<?> wildcardClass4 = value3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        java.lang.String str8 = type6.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str5, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str8, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        int int7 = type6.getSize();
        int int8 = type6.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type5, type6, type9, type10 };
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray11);
        java.lang.Class<?> wildcardClass13 = type3.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = type18.getInternalName();
        boolean boolean20 = type1.equals((java.lang.Object) type18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Z" + "'", str12, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)LLLZ;;;");
        int int3 = type1.getOpcode(144);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 148 + "'", int3 == 148);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean49 = type44.equals((java.lang.Object) analyzerException48);
        int int51 = type44.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter41.newValue(type44);
        java.lang.String str53 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter0.newValue(type44);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type64, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray69);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type59);
        java.lang.String str73 = type59.getDescriptor();
        java.lang.String str74 = type59.getDescriptor();
        java.lang.String str75 = type59.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 160 + "'", int51 == 160);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "V" + "'", str53, "V");
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(ZV)Z" + "'", str70, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)LZ;" + "'", str71, "(ZV)LZ;");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "LZ;" + "'", str73, "LZ;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "LZ;" + "'", str74, "LZ;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "LZ;" + "'", str75, "LZ;");
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getInternalName();
        int int5 = type1.getOpcode(2048);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str3, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2052 + "'", int5 == 2052);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int3 = type2.getDimensions();
        int int4 = type2.getDimensions();
        java.lang.Class<?> wildcardClass5 = type2.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        int int10 = type9.getSize();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean14 = type9.equals((java.lang.Object) analyzerException13);
        int int16 = type9.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter6.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier32.merge(value37, value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter30.copyOperation(abstractInsnNode31, value43);
        int int45 = value44.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.merge(value29, value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V: expected null, but found I", (java.lang.Object) type2, value46);
        java.lang.Throwable[] throwableArray48 = analyzerException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = analyzerException47.getSuppressed();
        java.lang.String str50 = analyzerException47.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 160 + "'", int16 == 160);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V: expected null, but found I: expected Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;, but found I" + "'", str50, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V: expected null, but found I: expected Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;, but found I");
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)LZV)L.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        int int4 = type1.getSort();
        int int5 = type1.getSize();
        boolean boolean7 = type1.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        int int27 = type26.getSize();
        int int28 = type26.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type25, type26, type29, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray31);
        int int33 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier8.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        int int41 = type40.getSize();
        int int42 = type40.getSize();
        java.lang.String str43 = type40.getDescriptor();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type39, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray44);
        org.mockito.asm.Type[] typeArray49 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)F");
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray49);
        int int51 = type1.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("(JVSZ)LZ;");
        int int54 = type53.getDimensions();
        boolean boolean55 = type1.equals((java.lang.Object) int54);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "V" + "'", str43, "V");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)Z" + "'", str45, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(ZV)Z" + "'", str46, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(ZV)Z" + "'", str47, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)Z" + "'", str50, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean33 = type28.equals((java.lang.Object) analyzerException32);
        int int35 = type28.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter25.newValue(type28);
        java.lang.String str37 = type28.getDescriptor();
        java.lang.String str38 = type28.getDescriptor();
        int int39 = type28.getSize();
        int int40 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newOperation(abstractInsnNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 160 + "'", int35 == 160);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "V" + "'", str38, "V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(value41);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value16);
        java.lang.Throwable[] throwableArray18 = analyzerException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = analyzerException17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = analyzerException17.getSuppressed();
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value24);
        java.lang.Throwable[] throwableArray26 = analyzerException25.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value31);
        java.lang.Throwable[] throwableArray33 = analyzerException32.getSuppressed();
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value36);
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException32);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("(V)Z", (java.lang.Throwable) analyzerException25);
        java.lang.String str42 = analyzerException41.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (V)Z" + "'", str42, "org.mockito.asm.tree.analysis.AnalyzerException: (V)Z");
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier: expected , but found I");
        int int3 = type1.getOpcode(131084);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 131088 + "'", int3 == 131088);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 50, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        int int26 = type20.getOpcode(131);
        int int27 = type20.getSort();
        int int28 = type20.getSort();
        org.mockito.asm.Type type29 = type20.getElementType();
        org.mockito.asm.Type type30 = type29.getElementType();
        org.mockito.asm.Type type31 = type30.getElementType();
        int int32 = type31.getSize();
        java.lang.String str33 = type31.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 135 + "'", int26 == 135);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ckito.asm.tree.analysis.BasicVerifier" + "'", str33, "ckito.asm.tree.analysis.BasicVerifier");
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        int int24 = type14.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type14);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        boolean boolean40 = type27.equals((java.lang.Object) value38);
        java.lang.String str41 = type27.toString();
        java.lang.String str42 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier47.merge(value55, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value61);
        int int63 = value61.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.copyOperation(abstractInsnNode44, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "L(JVSZ)V;" + "'", str41, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "L(JVSZ)V;" + "'", str42, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier23.merge(value41, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter7.copyOperation(abstractInsnNode22, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter6.merge(value47, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 13, value47);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.copyOperation(abstractInsnNode3, value47);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        int int73 = type72.getSize();
        int int74 = type72.getSize();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type71, type72, type75, type76 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray77);
        java.lang.Class<?> wildcardClass79 = type69.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str83 = type82.getInternalName();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.newValue(type82);
        java.lang.String str85 = type82.getInternalName();
        java.lang.String str86 = type82.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(JVSZ)Z" + "'", str78, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/Type" + "'", str80, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str81, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/Type" + "'", str85, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str86, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        int int1 = type0.getSort();
        int int3 = type0.getOpcode(165);
        org.mockito.asm.Type[] typeArray5 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Ldouble;");
        java.lang.String str6 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray5);
        java.lang.Class<?> wildcardClass7 = type0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 165 + "'", int3 == 165);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)S" + "'", str6, "(JVSZ)S");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        boolean boolean52 = type48.equals((java.lang.Object) 4);
        int int53 = type48.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type48);
        java.lang.Class<?> wildcardClass55 = value54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I");
        int int63 = type62.getDimensions();
        java.lang.String str64 = type62.getDescriptor();
        java.lang.String str65 = type62.getInternalName();
        int int67 = type62.getOpcode(48);
        int int68 = type62.getDimensions();
        boolean boolean69 = type60.equals((java.lang.Object) type62);
        int int71 = type60.getOpcode(264);
        int int72 = type60.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str59, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I;" + "'", str64, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I" + "'", str65, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 268 + "'", int71 == 268);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int22 = type1.getSize();
        int int24 = type1.getOpcode(102);
        java.lang.Class<?> wildcardClass25 = type1.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 106 + "'", int24 == 106);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F", (java.lang.Throwable) analyzerException2);
        java.lang.String str7 = analyzerException2.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: void" + "'", str7, "org.mockito.asm.tree.analysis.AnalyzerException: void");
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.toString();
        int int29 = type26.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier21.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int34 = type32.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter0.copyOperation(abstractInsnNode20, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        int int41 = type40.getSize();
        int int42 = type40.getSize();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type39, type40, type43, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray45);
        java.lang.Class<?> wildcardClass47 = type37.getClass();
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        int int52 = type51.getSort();
        org.mockito.asm.Type type53 = type51.getElementType();
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter0.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 142);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter59.newValue(type60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        int int63 = type62.getSize();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean67 = type62.equals((java.lang.Object) analyzerException66);
        int int69 = type62.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter59.newValue(type62);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str72 = type71.toString();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter59.newValue(type71);
        boolean boolean74 = type56.equals((java.lang.Object) value73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean78 = type76.equals((java.lang.Object) "(JVSZ)Z");
        int int79 = type76.getSize();
        java.lang.String str80 = type76.getClassName();
        java.lang.String str81 = type76.getDescriptor();
        boolean boolean82 = type56.equals((java.lang.Object) type76);
        int int83 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 175 + "'", int29 == 175);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str48, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "g.mockito.asm.Type" + "'", str54, "g.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 160 + "'", int69 == 160);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "D" + "'", str72, "D");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Z" + "'", str81, "Z");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier19.merge(value37, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter18.merge(value37, value57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean68 = type63.equals((java.lang.Object) analyzerException67);
        int int70 = type63.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter60.newValue(type63);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str73 = type72.toString();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.newValue(type72);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter18.copyOperation(abstractInsnNode59, value74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter18.newValue(type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter18.newValue(type80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.copyOperation(abstractInsnNode17, value81);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier83 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str85 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier83.newValue(type84);
        int int87 = type84.getSort();
        int int88 = type84.getSize();
        java.lang.Object obj89 = null;
        boolean boolean90 = type84.equals(obj89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 160 + "'", int70 == 160);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "D" + "'", str73, "D");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        boolean boolean57 = type53.equals((java.lang.Object) 4);
        boolean boolean59 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type53);
        java.lang.Class<?> wildcardClass61 = type53.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str63, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        java.lang.String str53 = type50.getDescriptor();
        boolean boolean55 = type50.equals((java.lang.Object) 129);
        java.lang.String str56 = type50.getClassName();
        java.lang.String str57 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.newValue(type50);
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value62);
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value66);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException67);
        java.lang.Throwable[] throwableArray69 = analyzerException63.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException63);
        java.lang.Class<?> wildcardClass71 = analyzerException63.getClass();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newOperation(abstractInsnNode74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "V" + "'", str53, "V");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "void" + "'", str56, "void");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "V" + "'", str57, "V");
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        int int26 = type20.getOpcode(131);
        int int27 = type20.getSort();
        int int28 = type20.getSort();
        org.mockito.asm.Type type29 = type20.getElementType();
        int int30 = type29.getDimensions();
        int int31 = type29.getDimensions();
        java.lang.String str32 = type29.toString();
        int int33 = type29.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 135 + "'", int26 == 135);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str32, "Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        boolean boolean48 = type44.equals((java.lang.Object) 4);
        boolean boolean50 = type44.equals((java.lang.Object) 193);
        java.lang.String str51 = type44.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.newValue(type44);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type55 = type54.getElementType();
        boolean boolean57 = type54.equals((java.lang.Object) 165);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier60.newValue(type66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str70 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier60.newValue(type69);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int74 = type73.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray77 = analyzerException76.getSuppressed();
        boolean boolean78 = type73.equals((java.lang.Object) analyzerException76);
        java.lang.String str79 = type73.getInternalName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier60.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier60.newValue(type82);
        int int84 = value83.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.copyOperation(abstractInsnNode59, value83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "V" + "'", str70, "V");
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str79, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = analyzerException10.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        int int34 = value33.getSize();
        int int35 = value33.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value33);
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException36);
        java.lang.Throwable[] throwableArray38 = analyzerException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSort();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter10.newValue(type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean18 = type13.equals((java.lang.Object) analyzerException17);
        int int20 = type13.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter10.newValue(type13);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str23 = type22.toString();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter10.newValue(type22);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier3.newValue(type22);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str28 = type27.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier3.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier40.merge(value48, value53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier36.merge(value54, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value59);
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier30.merge(value59, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) basicVerifier3, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)C", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;", (java.lang.Throwable) analyzerException68);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException68);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 160 + "'", int20 == 160);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "D" + "'", str23, "D");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "LC;" + "'", str28, "LC;");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;: expected 21, but found I");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type[] typeArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier14.newValue(type19);
        java.lang.Class<?> wildcardClass21 = basicVerifier14.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier2.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier2.newValue(type25);
        java.lang.String str28 = type25.getClassName();
        int int29 = type25.getDimensions();
        java.lang.String str30 = type25.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.copyOperation(abstractInsnNode35, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier50.merge(value68, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter34.copyOperation(abstractInsnNode49, value73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier81 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str83 = type82.getClassName();
        int int84 = type82.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier81.newValue(type82);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier86 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str88 = type87.getClassName();
        int int89 = type87.getSize();
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier86.newValue(type87);
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier77.merge(value85, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter33.merge(value74, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) 50, value74);
        int int95 = value74.getSize();
        int int96 = value74.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Object) type25, value74);
        java.lang.Throwable[] throwableArray98 = analyzerException97.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException99 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;", (java.lang.Throwable) analyzerException97);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str26, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str28, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;" + "'", str30, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "boolean" + "'", str88, "boolean");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int4 = type1.getOpcode(195);
        int int6 = type1.getOpcode(60);
        org.mockito.asm.Type type7 = type1.getElementType();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.Type[] typeArray16 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier8.newValue(type12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        java.lang.String str29 = type19.getDescriptor();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        java.lang.String str40 = type37.getDescriptor();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type36, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray41);
        int int47 = type12.getOpcode(19);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type65, type66, type69, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        java.lang.String str73 = type63.getDescriptor();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier76.newValue(type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        int int82 = type81.getSize();
        int int83 = type81.getSize();
        java.lang.String str84 = type81.getDescriptor();
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type80, type81 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray85);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray85);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray85);
        org.mockito.asm.Type[] typeArray90 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray90);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray90);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray90);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray90);
        int int95 = type7.getSize();
        int int96 = type7.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 199 + "'", int4 == 199);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 64 + "'", int6 == 64);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)F" + "'", str17, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Z" + "'", str29, "Z");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V" + "'", str40, "V");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)Z" + "'", str42, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(ZV)LZ;" + "'", str43, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(ZV)Z" + "'", str44, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)F" + "'", str45, "(ZV)F");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)V" + "'", str61, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)V" + "'", str62, "(JVSZ)V");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Z" + "'", str73, "Z");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "V" + "'", str84, "V");
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(ZV)Z" + "'", str86, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)LZ;" + "'", str87, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)Z" + "'", str88, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)Z" + "'", str91, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)V" + "'", str92, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(JVSZ)F" + "'", str93, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(JVSZ)J" + "'", str94, "(JVSZ)J");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = type42.getElementType();
        java.lang.String str45 = type42.getDescriptor();
        java.lang.Class<?> wildcardClass46 = type42.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter50.copyOperation(abstractInsnNode53, value60);
        int int63 = value60.getSize();
        int int64 = value60.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.copyOperation(abstractInsnNode49, value60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str37, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str38, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)Z" + "'", str43, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "L(JVSZ)Z;" + "'", str45, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier19.merge(value24, value29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter17.copyOperation(abstractInsnNode18, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier32.merge(value50, value54);
        int int56 = value55.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.merge(value30, value55);
        java.lang.Class<?> wildcardClass58 = value55.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        int int61 = type59.getOpcode(114);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 118 + "'", int61 == 118);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getInternalName();
        int int4 = type1.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        int int7 = type5.getOpcode(141);
        int int8 = type5.getSort();
        boolean boolean9 = type1.equals((java.lang.Object) int8);
        java.lang.String str10 = type1.getInternalName();
        java.lang.String str11 = type1.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean15 = type13.equals((java.lang.Object) "(JVSZ)Z");
        int int16 = type13.getSize();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        int int23 = type20.getSort();
        int int24 = type20.getSize();
        boolean boolean26 = type20.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type44, type45, type48, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray50);
        int int52 = type42.getSort();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        java.lang.String str62 = type59.getDescriptor();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type58, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray63);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray63);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray63);
        org.mockito.asm.Type type69 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(JVSZ)Z" + "'", str3, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 141 + "'", int7 == 141);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)Z" + "'", str11, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z" + "'", str18, "Z");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)Z" + "'", str66, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(ZV)Z" + "'", str67, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)L(JVSZ)Z;" + "'", str68, "(ZV)L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type69);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("char");
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = type1.equals((java.lang.Object) type3);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        java.lang.Class<?> wildcardClass1 = basicVerifier0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getInternalName();
        int int8 = type5.getOpcode(15);
        java.lang.String str9 = type5.toString();
        int int10 = type5.getDimensions();
        boolean boolean11 = type3.equals((java.lang.Object) type5);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type14 = type13.getElementType();
        org.mockito.asm.Type type15 = type13.getElementType();
        java.lang.String str16 = type15.getInternalName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type19 = type18.getElementType();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.Type[] typeArray24 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray24);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray24);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray24);
        org.mockito.asm.Type[] typeArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "L(JVSZ)Z;" + "'", str9, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "rg/mockito/asm/Type" + "'", str16, "rg/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)F" + "'", str25, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Lrg/mockito/asm/Type;" + "'", str26, "(JVSZ)Lrg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Lrg/mockito/asm/Type;" + "'", str27, "(JVSZ)Lrg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str28, "(JVSZ)L(JVSZ)Z;");
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        java.lang.Class<?> wildcardClass14 = basicVerifier0.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.Type[] typeArray29 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray29);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier21.newValue(type25);
        java.lang.String str32 = type25.getDescriptor();
        java.lang.String str33 = type25.toString();
        boolean boolean34 = type20.equals((java.lang.Object) type25);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str15, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str16, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str18, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)F" + "'", str30, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "F" + "'", str33, "F");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int4 = type1.getOpcode(195);
        int int6 = type1.getOpcode(194);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        java.lang.String str25 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier7.newValue(type22);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier7.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type33, type34, type37, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray39);
        int int44 = type1.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        int int50 = type49.getSort();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier45.newValue(type49);
        boolean boolean53 = type49.equals((java.lang.Object) false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str56 = type55.toString();
        java.lang.String str57 = type55.toString();
        boolean boolean58 = type49.equals((java.lang.Object) type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        java.lang.Class<?> wildcardClass64 = type60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = type68.getElementType();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        int int75 = type73.getSize();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type72, type73, type76, type77 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray78);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray78);
        int int83 = type1.getDimensions();
        int int84 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 199 + "'", int4 == 199);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 198 + "'", int6 == 198);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)V" + "'", str41, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)V" + "'", str42, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str43, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "LZ;" + "'", str56, "LZ;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "LZ;" + "'", str57, "LZ;");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str66, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/Type" + "'", str67, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(JVSZ)Z" + "'", str79, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str80, "(JVSZ)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JVSZ)S" + "'", str81, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str82, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter2.merge(value21, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.toString();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter44.newValue(type56);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter2.copyOperation(abstractInsnNode43, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter2.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter2.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        java.lang.String str84 = type83.toString();
        int int85 = type83.getDimensions();
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value88);
        boolean boolean90 = type83.equals((java.lang.Object) "");
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier67.newValue(type83);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter2.copyOperation(abstractInsnNode66, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)LLorg/mockito/asm/tree/analysis/BasicVerifier;;", value91);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "D" + "'", str57, "D");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "LZ;" + "'", str84, "LZ;");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier12.merge(value30, value34);
        int int36 = value35.getSize();
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.merge(value35, value37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;");
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;" + "'", str42, "Lrg.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int2 = type1.getDimensions();
        int int3 = type1.getDimensions();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier14.merge(value19, value24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter12.copyOperation(abstractInsnNode13, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier28.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter12.copyOperation(abstractInsnNode27, value34);
        boolean boolean36 = type11.equals((java.lang.Object) value35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type41, type42, type45, type46 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray47);
        java.lang.String str49 = type39.getDescriptor();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        java.lang.String str60 = type57.getDescriptor();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type56, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray61);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray61);
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray66);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray66);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray66);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)Z" + "'", str48, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)LZ;" + "'", str63, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;" + "'", str68, "(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)LLorg/mockito/asm/Type;;" + "'", str69, "(JVSZ)LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)Lorg/mockito/asm/Type;" + "'", str70, "(JVSZ)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        java.lang.String str4 = type1.getDescriptor();
        int int6 = type1.getOpcode(160);
        int int7 = type1.getSort();
        java.lang.Object obj8 = null;
        boolean boolean9 = type1.equals(obj8);
        boolean boolean11 = type1.equals((java.lang.Object) 93);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter13.newValue(type14);
        boolean boolean17 = type14.equals((java.lang.Object) 169);
        java.lang.Class<?> wildcardClass18 = type14.getClass();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        int int32 = type31.getSize();
        int int33 = type31.getSize();
        java.lang.String str34 = type31.getDescriptor();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type30, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        org.mockito.asm.Type[] typeArray38 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray38);
        int int40 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier19.newValue(type27);
        int int42 = value41.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;", (java.lang.Object) type14, value41);
        boolean boolean44 = type1.equals((java.lang.Object) value41);
        int int46 = type1.getOpcode(156);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Z" + "'", str4, "Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 160 + "'", int6 == 160);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "V" + "'", str34, "V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(ZV)Z" + "'", str36, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 156 + "'", int46 == 156);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: B: expected F, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode61, value62, value66, value73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type77, type78, type81, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.Class<?> wildcardClass85 = type75.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type89);
        int int92 = type89.getOpcode(184);
        int int93 = type89.getSize();
        java.lang.String str94 = type89.toString();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)Z" + "'", str84, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 188 + "'", int92 == 188);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;" + "'", str94, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getSort();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(129);
        java.lang.String str8 = type5.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Z" + "'", str2, "Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 133 + "'", int7 == 133);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org/mockito/asm/tree/analysis/AnalyzerException, but found D", throwable1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value11);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("byte");
        java.lang.Throwable[] throwableArray16 = analyzerException15.getSuppressed();
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LZV)LZ;");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier21.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier30.merge(value38, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier46.merge(value64, value68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.Type[] typeArray74 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray74);
        java.lang.String str76 = type70.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.VOID_TYPE;
        int int83 = type82.getSize();
        int int84 = type82.getSize();
        java.lang.String str85 = type82.getDescriptor();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type81, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier46.newValue(type70);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier21.merge(value44, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)S", (java.lang.Object) analyzerException19, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Throwable) analyzerException19);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException92);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(JVSZ)F" + "'", str75, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "F" + "'", str76, "F");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "V" + "'", str85, "V");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)Z" + "'", str87, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)F" + "'", str88, "(ZV)F");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("VSZ)Lrg/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value58);
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier29.merge(value58, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.copyOperation(abstractInsnNode28, value60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("C");
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str69 = type68.toString();
        org.mockito.asm.Type type70 = type68.getElementType();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType("Z");
        int int75 = type73.getOpcode(101);
        java.lang.String str76 = type73.getClassName();
        java.lang.String str77 = type73.getClassName();
        int int79 = type73.getOpcode(5);
        java.lang.String str80 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type73);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 101 + "'", int75 == 101);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Z" + "'", str80, "Z");
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier10.merge(value15, value20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter8.copyOperation(abstractInsnNode9, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter8.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier1.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean34 = type29.equals((java.lang.Object) analyzerException33);
        int int36 = type29.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter26.newValue(type29);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter26.newValue(type41);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str50 = type49.toString();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter26.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier55.merge(value60, value65);
        boolean boolean67 = type54.equals((java.lang.Object) value65);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter26.copyOperation(abstractInsnNode52, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)D", (java.lang.Object) value25, value68);
        java.lang.Throwable[] throwableArray70 = analyzerException69.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 160 + "'", int36 == 160);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "D" + "'", str39, "D");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "C" + "'", str50, "C");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        boolean boolean57 = type53.equals((java.lang.Object) 4);
        boolean boolean59 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier62.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        java.lang.String str77 = type74.getDescriptor();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type73, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray78);
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray81);
        int int83 = type70.getSort();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier62.newValue(type70);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier62.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.copyOperation(abstractInsnNode61, value86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "V" + "'", str77, "V");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(ZV)Z" + "'", str79, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(JVSZ)Z" + "'", str82, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier30.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.copyOperation(abstractInsnNode29, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        boolean boolean47 = type43.equals((java.lang.Object) 4);
        java.lang.String str48 = type43.getClassName();
        java.lang.String str49 = type43.getClassName();
        java.lang.String str50 = type43.toString();
        java.lang.String str51 = type43.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter28.newValue(type43);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str55 = type54.getClassName();
        java.lang.String str56 = type54.toString();
        java.lang.String str57 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.copyOperation(abstractInsnNode27, value58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str62 = type61.getInternalName();
        int int64 = type61.getOpcode(15);
        org.mockito.asm.Type type65 = type61.getElementType();
        org.mockito.asm.Type type66 = type61.getElementType();
        java.lang.String str67 = type61.getDescriptor();
        java.lang.String str68 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.newValue(type61);
        int int70 = type61.getDimensions();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)Z;" + "'", str56, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L(JVSZ)Z;" + "'", str57, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L(JVSZ)Z;" + "'", str67, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)Z" + "'", str68, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("mockito.asm.tree.analysis.BasicVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        int int66 = type63.getSort();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 3);
        java.lang.String str70 = type67.getDescriptor();
        int int72 = type67.getOpcode(0);
        boolean boolean73 = type63.equals((java.lang.Object) type67);
        java.lang.String str74 = type67.getDescriptor();
        java.lang.String str75 = type67.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Z" + "'", str74, "Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Z" + "'", str75, "Z");
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type43, type44, type47, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray49);
        java.lang.Class<?> wildcardClass51 = type41.getClass();
        java.lang.String str52 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        int int63 = type61.getOpcode(188);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier66.newValue(type72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.copyOperation(abstractInsnNode65, value73);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)Z" + "'", str50, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str52, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str53, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str54, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str56, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str59, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/Type" + "'", str60, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 192 + "'", int63 == 192);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type27, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        org.mockito.asm.Type[] typeArray35 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int37 = type24.getSort();
        java.lang.String str38 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        boolean boolean47 = type44.equals((java.lang.Object) 169);
        java.lang.String str48 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type44);
        int int50 = type44.getSort();
        int int51 = type44.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = type44.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(ZV)Z" + "'", str33, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        int int50 = type49.getSort();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier45.newValue(type49);
        int int53 = type49.getOpcode(99);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = type49.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)S");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str26 = type25.getInternalName();
        int int28 = type25.getOpcode(15);
        org.mockito.asm.Type type29 = type25.getElementType();
        org.mockito.asm.Type type30 = type25.getElementType();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier37.merge(value42, value47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier49.newValue(type54);
        java.lang.Class<?> wildcardClass56 = basicVerifier49.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier37.newValue(type57);
        java.lang.String str59 = type57.getInternalName();
        java.lang.String str60 = type57.getInternalName();
        int int62 = type57.getOpcode(19);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier33.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier64.newValue(type65);
        java.lang.String str68 = type65.getDescriptor();
        int int70 = type65.getOpcode(160);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean74 = type72.equals((java.lang.Object) "(JVSZ)Z");
        int int75 = type72.getSize();
        boolean boolean76 = type65.equals((java.lang.Object) type72);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier33.newValue(type72);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.copyOperation(abstractInsnNode32, value77);
        int int79 = value77.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str59, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str60, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 23 + "'", int62 == 23);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 160 + "'", int70 == 160);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException31);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray37 = analyzerException3.getSuppressed();
        java.lang.Class<?> wildcardClass38 = analyzerException3.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str42, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier9.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier36.newValue(type51);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier9.newValue(type51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        boolean boolean61 = type57.equals((java.lang.Object) 4);
        int int62 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier9.newValue(type57);
        java.lang.Class<?> wildcardClass64 = value63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.newValue(type72);
        int int74 = type72.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str65, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str66, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean3 = type1.equals((java.lang.Object) "(JVSZ)Z");
        int int4 = type1.getSize();
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getDescriptor();
        int int8 = type1.getOpcode(114);
        java.lang.String str9 = type1.getClassName();
        java.lang.Class<?> wildcardClass10 = type1.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 114 + "'", int8 == 114);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType("Z");
        int int44 = type42.getOpcode(101);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        boolean boolean49 = type45.equals((java.lang.Object) 4);
        boolean boolean51 = type45.equals((java.lang.Object) 193);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type55, type56, type59, type60 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray61);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray61);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type42);
        java.lang.Class<?> wildcardClass67 = value66.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        int int71 = type70.getSort();
        java.lang.String str72 = type70.getDescriptor();
        int int73 = type70.getSize();
        java.lang.String str74 = type70.getClassName();
        org.mockito.asm.Type type75 = type70.getElementType();
        java.lang.String str76 = type75.getDescriptor();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 101 + "'", int44 == 101);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(JVSZ)V" + "'", str63, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)Z" + "'", str64, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)Z" + "'", str65, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str69, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str72, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str74, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicValue;" + "'", str76, "Lg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter1, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 142);
        int int34 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter1.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter1.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = type45.getElementType();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier40.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter49.newValue(type50);
        java.lang.String str52 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier40.newValue(type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str56 = type55.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier40.newValue(type55);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier40.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter1.copyOperation(abstractInsnNode39, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = basicInterpreter1.newOperation(abstractInsnNode61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "V" + "'", str52, "V");
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)LLorg/mockito/asm/Type;;;" + "'", str56, "L(JVSZ)LLorg/mockito/asm/Type;;;");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(VSZ)Lrg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("V");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("J");
        java.lang.String str26 = type25.getInternalName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter0.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType("Z");
        int int32 = type30.getOpcode(101);
        java.lang.String str33 = type30.getClassName();
        int int34 = type30.getSize();
        int int36 = type30.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type30);
        int int38 = value37.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "void" + "'", str19, "void");
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "J" + "'", str26, "J");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 101 + "'", int32 == 101);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 155 + "'", int36 == 155);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        boolean boolean17 = type7.equals((java.lang.Object) analyzerException16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type7);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter3.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException23.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter3.newValue(type27);
        boolean boolean29 = type1.equals((java.lang.Object) basicInterpreter3);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = basicInterpreter3.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str25, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.toString();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass16 = analyzerException8.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        boolean boolean21 = type0.equals((java.lang.Object) str20);
        int int23 = type0.getOpcode(30);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "V" + "'", str1, "V");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "void" + "'", str3, "void");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str18, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str19, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str8 = type7.getInternalName();
        java.lang.String str9 = type7.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException14);
        boolean boolean18 = type7.equals((java.lang.Object) analyzerException17);
        int int19 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter3.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", value20);
        int int22 = value20.getSize();
        int int23 = value20.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(JVSZ)Z" + "'", str8, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)L(JVSZ)V;;: expected org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str62 = type61.getInternalName();
        int int64 = type61.getOpcode(15);
        org.mockito.asm.Type type65 = type61.getElementType();
        java.lang.String str66 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type61);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str70 = type69.getInternalName();
        boolean boolean72 = type69.equals((java.lang.Object) 104);
        int int73 = type69.getSort();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier0.newValue(type69);
        int int75 = type69.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)Z" + "'", str62, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L(JVSZ)Z;" + "'", str66, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I" + "'", str70, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException29);
        java.lang.Throwable[] throwableArray31 = analyzerException30.getSuppressed();
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value35);
        java.lang.Throwable[] throwableArray37 = analyzerException36.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException36);
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("LJVSZ)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException44.addSuppressed((java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F", (java.lang.Throwable) analyzerException44);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value56);
        java.lang.Throwable[] throwableArray58 = analyzerException57.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException60);
        java.lang.Throwable[] throwableArray63 = analyzerException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = analyzerException62.getSuppressed();
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException62);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException48);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)S");
        java.lang.String str6 = type5.getDescriptor();
        boolean boolean7 = type1.equals((java.lang.Object) str6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str2, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "L(JVSZ)S;" + "'", str6, "L(JVSZ)S;");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        java.lang.String str16 = type13.getDescriptor();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type12, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray17);
        org.mockito.asm.Type[] typeArray20 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray20);
        int int22 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier1.newValue(type9);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int26 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier1.newValue(type25);
        java.lang.String str28 = type25.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean39 = type34.equals((java.lang.Object) analyzerException38);
        int int41 = type34.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter31.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier45.merge(value50, value55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.copyOperation(abstractInsnNode44, value56);
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter31.merge(value57, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.Class<?> wildcardClass72 = type62.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier78 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier78.newValue(type79);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        int int85 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier87 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str89 = type88.getClassName();
        int int90 = type88.getSize();
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier87.newValue(type88);
        org.mockito.asm.tree.analysis.Value value92 = basicVerifier78.merge(value86, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 10.0f, value92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Object) type75, value92);
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter31.copyOperation(abstractInsnNode60, value92);
        int int96 = value92.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.unaryOperation(abstractInsnNode30, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(ZV)Z" + "'", str18, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)Z" + "'", str21, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "L(JVSZ)L(JVSZ)V;;" + "'", str28, "L(JVSZ)L(JVSZ)V;;");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 160 + "'", int41 == 160);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/Type" + "'", str73, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str74, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "boolean" + "'", str89, "boolean");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        boolean boolean13 = type3.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type3);
        java.lang.Class<?> wildcardClass15 = basicInterpreter0.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str16, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str17, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str18, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str20, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        int int24 = type21.getSort();
        int int25 = type21.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type21);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("LLZ;");
        java.lang.String str29 = type28.getDescriptor();
        int int31 = type28.getOpcode(114);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type28);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = type35.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type52, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray57);
        int int62 = type34.getDimensions();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.newOperation(abstractInsnNode64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "LLZ;" + "'", str29, "LLZ;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 118 + "'", int31 == 118);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str61, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value10);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter0.copyOperation(abstractInsnNode3, value10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter0.newValue(type14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        int int20 = type19.getSize();
        int int21 = type19.getSize();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type18, type19, type22, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        java.lang.String str26 = type16.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        java.lang.String str37 = type34.getDescriptor();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type33, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray38);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray38);
        java.lang.String str42 = type16.toString();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = type50.getElementType();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier45.newValue(type50);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean59 = type54.equals((java.lang.Object) analyzerException58);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier45.newValue(type54);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier45.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str66 = type65.getInternalName();
        int int68 = type65.getOpcode(15);
        org.mockito.asm.Type type69 = type65.getElementType();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier45.newValue(type65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.unaryOperation(abstractInsnNode44, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)Z" + "'", str39, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(ZV)LZ;" + "'", str40, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)Z" + "'", str41, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Z" + "'", str42, "Z");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 19 + "'", int68 == 19);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: byte");
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("C");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type2 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        java.lang.String str22 = type20.getInternalName();
        java.lang.String str23 = type20.getInternalName();
        java.lang.String str24 = type20.getClassName();
        java.lang.String str25 = type20.getClassName();
        org.mockito.asm.Type type26 = type20.getElementType();
        java.lang.String str27 = type26.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str22, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str23, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str24, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str25, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "g/mockito/asm/tree/analysis/BasicVerifier" + "'", str27, "g/mockito/asm/tree/analysis/BasicVerifier");
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S", (java.lang.Throwable) analyzerException56);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException66);
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException68);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException68);
        java.lang.Throwable[] throwableArray72 = analyzerException68.getSuppressed();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        int int47 = type46.getSort();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier42.newValue(type46);
        java.lang.Class<?> wildcardClass49 = basicVerifier42.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type50);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("C");
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier56.merge(value61, value66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier68.newValue(type73);
        java.lang.Class<?> wildcardClass75 = basicVerifier68.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier56.newValue(type76);
        java.lang.String str78 = type76.getInternalName();
        java.lang.String str79 = type76.getInternalName();
        java.lang.String str80 = type76.getClassName();
        int int82 = type76.getOpcode(131);
        int int83 = type76.getSort();
        int int84 = type76.getSort();
        org.mockito.asm.Type type85 = type76.getElementType();
        int int87 = type85.getOpcode(64);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newValue(type85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str51, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str78, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str79, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str80, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 135 + "'", int82 == 135);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 68 + "'", int87 == 68);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        int int2 = type0.getOpcode(141);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        java.lang.String str11 = type8.getDescriptor();
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type7, type8 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray12);
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray15);
        int int17 = type4.getSort();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        boolean boolean22 = type18.equals((java.lang.Object) 4);
        boolean boolean24 = type18.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type42, type43, type46, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        int int50 = type40.getSort();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier25.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        java.lang.String str60 = type57.getDescriptor();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type56, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray61);
        boolean boolean64 = type18.equals((java.lang.Object) typeArray61);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray61);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        int int86 = type85.getSize();
        int int87 = type85.getSize();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type89 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray90 = new org.mockito.asm.Type[] { type84, type85, type88, type89 };
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray90);
        int int92 = type82.getSort();
        org.mockito.asm.tree.analysis.Value value93 = basicVerifier67.newValue(type82);
        java.lang.String str94 = type82.toString();
        java.lang.Class<?> wildcardClass95 = type82.getClass();
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass95);
        org.mockito.asm.Type type97 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass95);
        boolean boolean98 = type0.equals((java.lang.Object) type97);
        int int99 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 141 + "'", int2 == 141);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(ZV)Z" + "'", str13, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(JVSZ)Z" + "'", str16, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)Z" + "'", str63, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)I" + "'", str66, "(ZV)I");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)Z" + "'", str91, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Z" + "'", str94, "Z");
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 5 + "'", int99 == 5);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = type1.getElementType();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int8 = type6.getOpcode(183);
        int int10 = type6.getOpcode(8);
        int int11 = type6.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187 + "'", int8 == 187);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        boolean boolean13 = type9.equals((java.lang.Object) 4);
        boolean boolean15 = type9.equals((java.lang.Object) 193);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        int int29 = type9.getSort();
        int int30 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier0.newValue(type9);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.Class<?> wildcardClass42 = type32.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type49 = type48.getElementType();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier0.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier52.newValue(type58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str62 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.newValue(type61);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int66 = type65.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        boolean boolean70 = type65.equals((java.lang.Object) analyzerException68);
        java.lang.String str71 = type65.getInternalName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier52.newValue(type65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.unaryOperation(abstractInsnNode51, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str71, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: : expected I, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        boolean boolean19 = type9.equals((java.lang.Object) analyzerException18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter6.newValue(type9);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter5.newValue(type9);
        int int23 = type9.getOpcode((int) '4');
        int int25 = type9.getOpcode(56);
        java.lang.String str26 = type9.getClassName();
        java.lang.String str27 = type9.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        int int32 = type28.getSort();
        boolean boolean34 = type28.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean38 = type36.equals((java.lang.Object) "(JVSZ)Z");
        int int39 = type36.getSize();
        java.lang.String str40 = type36.getClassName();
        java.lang.String str41 = type36.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        int int46 = type43.getSort();
        int int47 = type43.getSize();
        boolean boolean49 = type43.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        int int69 = type68.getSize();
        int int70 = type68.getSize();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type67, type68, type71, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        int int75 = type65.getSort();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier50.newValue(type65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier77.newValue(type78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.VOID_TYPE;
        int int83 = type82.getSize();
        int int84 = type82.getSize();
        java.lang.String str85 = type82.getDescriptor();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type81, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray86);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray86);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray86);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray86);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray86);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray86);
        int int94 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 56 + "'", int25 == 56);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Z" + "'", str41, "Z");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JVSZ)Z" + "'", str74, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "V" + "'", str85, "V");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)Z" + "'", str87, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)Z" + "'", str88, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(ZV)Z" + "'", str89, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(ZV)Z" + "'", str90, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(ZV)V" + "'", str91, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(ZV)Z" + "'", str92, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(ZV)F" + "'", str93, "(ZV)F");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        int int4 = type0.getSort();
        boolean boolean6 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass7 = type0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier6.merge(value14, value19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value19, value39, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 178, value39);
        java.lang.Throwable[] throwableArray62 = analyzerException61.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        java.lang.Throwable[] throwableArray67 = analyzerException66.getSuppressed();
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException66);
        java.lang.String str69 = analyzerException66.toString();
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;" + "'", str69, "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type33, type34, type37, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray39);
        int int41 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier16.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        java.lang.String str61 = type58.getDescriptor();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier43.newValue(type58);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier16.newValue(type58);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        boolean boolean68 = type64.equals((java.lang.Object) 4);
        int int69 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier16.newValue(type64);
        java.lang.Class<?> wildcardClass71 = value70.getClass();
        java.lang.String str72 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        java.lang.String str75 = type74.getInternalName();
        java.lang.String str76 = type74.getInternalName();
        java.lang.String str77 = type74.getInternalName();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter1.newValue(type74);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier79.newValue(type81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Object) type74, value82);
        int int84 = type74.getDimensions();
        java.lang.String str85 = type74.getClassName();
        int int87 = type74.getOpcode(193);
        int int89 = type74.getOpcode(86);
        java.lang.String str90 = type74.getDescriptor();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "V" + "'", str61, "V");
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str72, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str73, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str75, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str76, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str77, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str85, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 197 + "'", int87 == 197);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 90 + "'", int89 == 90);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str90, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter42.copyOperation(abstractInsnNode45, value52);
        int int55 = value52.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.copyOperation(abstractInsnNode41, value52);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType("L(ZV)F;");
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.newValue(type58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        boolean boolean64 = type60.equals((java.lang.Object) 4);
        boolean boolean66 = type60.equals((java.lang.Object) 193);
        java.lang.String str67 = type60.getClassName();
        java.lang.String str68 = type60.getClassName();
        java.lang.String str69 = type60.getDescriptor();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier72.newValue(type77);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier79.newValue(type80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.VOID_TYPE;
        int int85 = type84.getSize();
        int int86 = type84.getSize();
        java.lang.String str87 = type84.getDescriptor();
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type83, type84 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray88);
        org.mockito.asm.Type[] typeArray91 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray91);
        int int93 = type80.getSort();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier72.newValue(type80);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int97 = type96.getSort();
        org.mockito.asm.tree.analysis.Value value98 = basicVerifier72.newValue(type96);
        org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.copyOperation(abstractInsnNode71, value98);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "V" + "'", str87, "V");
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(ZV)Z" + "'", str89, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)Z" + "'", str92, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertNotNull(value98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.Throwable throwable5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", throwable5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException6);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier11.merge(value29, value33);
        int int35 = value34.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter36.copyOperation(abstractInsnNode39, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Object) value34, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException49);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected I, but found I", (java.lang.Throwable) analyzerException6);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: C: expected 123, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int8 = type6.getOpcode(4096);
        int int9 = type6.getSort();
        java.lang.String str10 = type6.toString();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier14.newValue(type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier14.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type12, value24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type28, type29, type32, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        java.lang.Class<?> wildcardClass36 = type26.getClass();
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type42, type43, type46, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        java.lang.String str50 = type40.getDescriptor();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        java.lang.String str61 = type58.getDescriptor();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type57, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray62);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray62);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray62);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray62);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray62);
        int int70 = type6.getOpcode(101);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4100 + "'", int8 == 4100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)F" + "'", str23, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)Z" + "'", str35, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str37, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "V" + "'", str61, "V");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)Z" + "'", str63, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)LZ;" + "'", str64, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str66, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(ZV)D" + "'", str67, "(ZV)D");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str68, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 105 + "'", int70 == 105);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;: expected (ZV)LZ;, but found .");
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value13);
        java.lang.Throwable[] throwableArray15 = analyzerException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = analyzerException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = analyzerException14.getSuppressed();
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)F", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        java.lang.Throwable[] throwableArray21 = analyzerException14.getSuppressed();
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException14);
        java.lang.Throwable[] throwableArray23 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("LZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;", (java.lang.Throwable) analyzerException2);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int3 = type1.getDimensions();
        int int5 = type1.getOpcode(131072);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 131076 + "'", int5 == 131076);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.Type[] typeArray12 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray12);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier4.newValue(type8);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        java.lang.String str25 = type15.getDescriptor();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        java.lang.String str36 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type32, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray37);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray37);
        java.lang.Class<?> wildcardClass43 = typeArray37.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(JVSZ)F" + "'", str13, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)Z" + "'", str38, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)LZ;" + "'", str39, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(ZV)Z" + "'", str40, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(ZV)F" + "'", str41, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)Z" + "'", str42, "(ZV)Z");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = type1.getElementType();
        boolean boolean4 = type1.equals((java.lang.Object) 165);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        boolean boolean9 = type5.equals((java.lang.Object) 4);
        boolean boolean11 = type5.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        int int37 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier12.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        java.lang.String str47 = type44.getDescriptor();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type43, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray48);
        boolean boolean51 = type5.equals((java.lang.Object) typeArray48);
        int int52 = type5.getSize();
        boolean boolean53 = type1.equals((java.lang.Object) type5);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type57, type58, type61, type62 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray63);
        int int67 = type1.getDimensions();
        java.lang.String str68 = type1.getInternalName();
        int int70 = type1.getOpcode(131080);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "V" + "'", str47, "V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(ZV)Z" + "'", str50, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)Z" + "'", str64, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)V" + "'", str65, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)LLorg/mockito/asm/Type;;" + "'", str66, "(JVSZ)LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str68, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 131084 + "'", int70 == 131084);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)D: expected I, but found I;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = type2.getElementType();
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter6.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        int int10 = type9.getSize();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean14 = type9.equals((java.lang.Object) analyzerException13);
        int int16 = type9.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter6.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier32.merge(value37, value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter30.copyOperation(abstractInsnNode31, value43);
        int int45 = value44.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.merge(value29, value44);
        int int47 = value46.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Object) type2, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value64);
        java.lang.Throwable[] throwableArray66 = analyzerException65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = analyzerException65.getSuppressed();
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value70);
        java.lang.Throwable[] throwableArray72 = analyzerException71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = analyzerException71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = analyzerException71.getSuppressed();
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException76);
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("LJVSZ)LL(JVSZ)Z;", (java.lang.Throwable) analyzerException82);
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray86 = analyzerException82.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(JVSZ)Z" + "'", str3, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 160 + "'", int16 == 160);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = basicVerifier0.naryOperation(abstractInsnNode29, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("D");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LD;" + "'", str2, "LD;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LD;" + "'", str3, "LD;");
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        java.lang.Class<?> wildcardClass18 = type14.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier38.merge(value56, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter22.copyOperation(abstractInsnNode37, value61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter21.merge(value62, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) str20, value62);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Throwable) analyzerException84);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        java.lang.Class<?> wildcardClass6 = type2.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier10.merge(value15, value20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter8.copyOperation(abstractInsnNode9, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter8.newValue(type23);
        int int25 = value24.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Object) wildcardClass6, value24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str27, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type29);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSort();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type7);
        java.lang.Class<?> wildcardClass10 = basicVerifier3.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int13 = type12.getDimensions();
        int int15 = type12.getOpcode(109);
        int int16 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        java.lang.String str23 = type19.getClassName();
        java.lang.String str24 = type19.getDescriptor();
        int int26 = type19.getOpcode(114);
        java.lang.String str27 = type19.getClassName();
        java.lang.Class<?> wildcardClass28 = type19.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        int int30 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.copyOperation(abstractInsnNode34, value46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter33.newValue(type48);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean54 = type52.equals((java.lang.Object) "(JVSZ)Z");
        int int55 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter33.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException68);
        boolean boolean71 = type61.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type61);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter33.newValue(type61);
        int int75 = value74.getSize();
        int int76 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.binaryOperation(abstractInsnNode32, value74, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 113 + "'", int15 == 113);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 114 + "'", int26 == 114);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean58 = type53.equals((java.lang.Object) analyzerException57);
        int int60 = type53.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter50.newValue(type53);
        java.lang.String str62 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type53);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        int int65 = type64.getSize();
        int int66 = type64.getSize();
        java.lang.String str67 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier77 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getClassName();
        int int80 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier71.merge(value76, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.copyOperation(abstractInsnNode70, value82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str85 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter69.newValue(type84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean90 = type88.equals((java.lang.Object) "(JVSZ)Z");
        int int91 = type88.getSize();
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter69.newValue(type88);
        java.lang.String str93 = type88.getClassName();
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.newValue(type88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 160 + "'", int60 == 160);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "V" + "'", str67, "V");
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "boolean" + "'", str93, "boolean");
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int4 = type1.getOpcode(195);
        int int6 = type1.getOpcode(60);
        org.mockito.asm.Type type7 = type1.getElementType();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.Type[] typeArray16 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier8.newValue(type12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        java.lang.String str29 = type19.getDescriptor();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        java.lang.String str40 = type37.getDescriptor();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type36, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray41);
        int int47 = type12.getOpcode(19);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type65, type66, type69, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray71);
        java.lang.String str73 = type63.getDescriptor();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier76.newValue(type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        int int82 = type81.getSize();
        int int83 = type81.getSize();
        java.lang.String str84 = type81.getDescriptor();
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type80, type81 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray85);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray85);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray85);
        org.mockito.asm.Type[] typeArray90 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray90);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray90);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray90);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray90);
        java.lang.Class<?> wildcardClass95 = type7.getClass();
        java.lang.String str96 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass95);
        java.lang.String str97 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass95);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 199 + "'", int4 == 199);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 64 + "'", int6 == 64);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)F" + "'", str17, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Z" + "'", str29, "Z");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V" + "'", str40, "V");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)Z" + "'", str42, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(ZV)LZ;" + "'", str43, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(ZV)Z" + "'", str44, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)F" + "'", str45, "(ZV)F");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)V" + "'", str61, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)V" + "'", str62, "(JVSZ)V");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)Z" + "'", str72, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Z" + "'", str73, "Z");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "V" + "'", str84, "V");
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(ZV)Z" + "'", str86, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)LZ;" + "'", str87, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)Z" + "'", str88, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)Z" + "'", str91, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)V" + "'", str92, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(JVSZ)F" + "'", str93, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(JVSZ)J" + "'", str94, "(JVSZ)J");
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str96, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str97, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier11.merge(value29, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier35.merge(value43, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter10.merge(value29, value49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        int int56 = type55.getSize();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean60 = type55.equals((java.lang.Object) analyzerException59);
        int int62 = type55.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter52.newValue(type55);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str65 = type64.toString();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter52.newValue(type64);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter10.copyOperation(abstractInsnNode51, value66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.copyOperation(abstractInsnNode9, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 160 + "'", int62 == 160);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "D" + "'", str65, "D");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: double: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!, but found I;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        java.lang.String str29 = type23.getClassName();
        java.lang.String str30 = type23.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Z" + "'", str30, "(JVSZ)Z");
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier3.merge(value21, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter2.merge(value21, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        java.lang.String str46 = type43.getDescriptor();
        int int47 = type43.getSort();
        boolean boolean49 = type43.equals((java.lang.Object) (byte) 0);
        int int50 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter2.newValue(type43);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter2.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.Type[] typeArray63 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray63);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier55.newValue(type59);
        java.lang.Object obj67 = null;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str70 = type69.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.Type[] typeArray79 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray79);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier71.newValue(type75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type69, value81);
        int int83 = value81.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", obj67, value81);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter2.merge(value65, value81);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType("(JVSZ)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter2.newValue(type87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getReturnType("(ZV)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter2.newValue(type90);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getObjectType("org.mockito.asm.Type");
        int int94 = type93.getSort();
        int int95 = type93.getDimensions();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter2.newValue(type93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException(".mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.BasicValue", (java.lang.Object) "ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: boolean", value96);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)F" + "'", str64, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "D" + "'", str70, "D");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)F" + "'", str80, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        int int18 = type4.getOpcode((int) '4');
        java.lang.String str19 = type4.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter20.merge(value39, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        java.lang.String str64 = type61.getDescriptor();
        int int65 = type61.getSort();
        boolean boolean67 = type61.equals((java.lang.Object) (byte) 0);
        int int68 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter20.newValue(type61);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType("F");
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter20.newValue(type71);
        boolean boolean74 = type4.equals((java.lang.Object) type71);
        int int76 = type4.getOpcode(217);
        int int78 = type4.getOpcode(162);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 217 + "'", int76 == 217);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 162 + "'", int78 == 162);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str52 = type51.toString();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        java.lang.String str56 = type55.getInternalName();
        int int57 = type55.getSort();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier62.merge(value67, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.copyOperation(abstractInsnNode61, value73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        boolean boolean79 = type75.equals((java.lang.Object) 4);
        java.lang.String str80 = type75.getClassName();
        java.lang.String str81 = type75.getClassName();
        java.lang.String str82 = type75.toString();
        java.lang.String str83 = type75.toString();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter60.newValue(type75);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.unaryOperation(abstractInsnNode59, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str52, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str56, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Z" + "'", str82, "Z");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Z" + "'", str83, "Z");
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        int int25 = value24.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Object) int25, value39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!");
        java.lang.Throwable[] throwableArray45 = analyzerException44.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier51.merge(value59, value64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier47.merge(value65, value69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier71.merge(value79, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter46.merge(value65, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) analyzerException44, value86);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass89 = analyzerException44.getClass();
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass89);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        java.lang.String str92 = type91.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str92, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSize();
        int int3 = type0.getSize();
        java.lang.String str4 = type0.getClassName();
        int int5 = type0.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier12.merge(value30, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;", (java.lang.Throwable) analyzerException38);
        java.lang.Class<?> wildcardClass41 = analyzerException38.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        boolean boolean47 = type44.equals((java.lang.Object) 0L);
        java.lang.String str48 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier51.merge(value56, value61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter49.copyOperation(abstractInsnNode50, value62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter49.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        boolean boolean71 = type67.equals((java.lang.Object) 4);
        boolean boolean73 = type67.equals((java.lang.Object) 193);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type77, type78, type81, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray83);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray83);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray83);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray83);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray83);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "V" + "'", str48, "V");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)Z" + "'", str84, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(JVSZ)V" + "'", str85, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(JVSZ)Z" + "'", str86, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(JVSZ)Z" + "'", str87, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JVSZ)V" + "'", str88, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str89, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(JVSZ)Z" + "'", str90, "(JVSZ)Z");
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.toString();
        java.lang.String str2 = type0.toString();
        int int4 = type0.getOpcode(58);
        java.lang.String str5 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "F" + "'", str1, "F");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F" + "'", str2, "F");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 60 + "'", int4 == 60);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("int", throwable1);
        java.lang.Throwable[] throwableArray3 = analyzerException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        java.lang.String str5 = analyzerException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: int" + "'", str5, "org.mockito.asm.tree.analysis.AnalyzerException: int");
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        java.lang.String str27 = type15.getDescriptor();
        int int28 = type15.getSort();
        java.lang.String str29 = type15.getClassName();
        java.lang.String str30 = type15.toString();
        java.lang.Class<?> wildcardClass31 = type15.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value39);
        java.lang.Throwable[] throwableArray41 = analyzerException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = analyzerException40.getSuppressed();
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value45);
        java.lang.Throwable[] throwableArray47 = analyzerException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = analyzerException46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = analyzerException46.getSuppressed();
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException46);
        java.lang.Class<?> wildcardClass53 = analyzerException52.getClass();
        boolean boolean54 = type33.equals((java.lang.Object) analyzerException52);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Z" + "'", str30, "Z");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        int int52 = type51.getDimensions();
        int int53 = type51.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type59, type60, type63, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray65);
        java.lang.String str67 = type57.getDescriptor();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        java.lang.String str78 = type75.getDescriptor();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type74, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray79);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray79);
        int int84 = type56.getDimensions();
        int int85 = type56.getSort();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier0.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        java.util.List list88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicVerifier0.naryOperation(abstractInsnNode87, list88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)Z" + "'", str66, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "V" + "'", str78, "V");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Z" + "'", str80, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)LZ;" + "'", str81, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(ZV)Z" + "'", str82, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str83, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier3.newValue(type18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier3.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean34 = type29.equals((java.lang.Object) analyzerException33);
        int int36 = type29.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter26.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier38.merge(value43, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.copyOperation(abstractInsnNode51, value63);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter26.merge(value49, value64);
        int int67 = value66.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R", (java.lang.Object) type24, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("L(ZV)F;", obj1, value66);
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value74);
        java.lang.Throwable[] throwableArray76 = analyzerException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = analyzerException75.getSuppressed();
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value80);
        java.lang.Throwable[] throwableArray82 = analyzerException81.getSuppressed();
        java.lang.Throwable[] throwableArray83 = analyzerException81.getSuppressed();
        java.lang.Throwable[] throwableArray84 = analyzerException81.getSuppressed();
        analyzerException75.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException86.addSuppressed((java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LZ;", (java.lang.Throwable) analyzerException88);
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException88);
        java.lang.Throwable[] throwableArray92 = analyzerException69.getSuppressed();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 160 + "'", int36 == 160);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lfloat;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str10 = type9.getDescriptor();
        int int12 = type9.getOpcode(22);
        int int13 = type9.getDimensions();
        java.lang.String str14 = type9.getInternalName();
        int int15 = type9.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str10, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26 + "'", int12 == 26);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str14, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier4.merge(value9, value14);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter2.copyOperation(abstractInsnNode3, value15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter2.newValue(type17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        int int24 = type20.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter2.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier26.newValue(type41);
        int int46 = type41.getSort();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.newValue(type41);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type50, type51, type54, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        java.lang.Class<?> wildcardClass58 = type48.getClass();
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.String str72 = type62.getDescriptor();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier75.newValue(type76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        int int81 = type80.getSize();
        int int82 = type80.getSize();
        java.lang.String str83 = type80.getDescriptor();
        org.mockito.asm.Type[] typeArray84 = new org.mockito.asm.Type[] { type79, type80 };
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray84);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray84);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray84);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray84);
        java.lang.String str89 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter2.newValue(type61);
        int int91 = value90.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("", obj1, value90);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)Z" + "'", str57, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str59, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Z" + "'", str72, "Z");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "V" + "'", str83, "V");
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(ZV)Z" + "'", str85, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(ZV)LZ;" + "'", str86, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)Z" + "'", str87, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str88, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str89, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray14 = analyzerException3.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter17.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        boolean boolean30 = type20.equals((java.lang.Object) analyzerException29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter17.newValue(type20);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.copyOperation(abstractInsnNode34, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier48.merge(value66, value70);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter16.merge(value46, value71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLorg/mockito/asm/Type;;", (java.lang.Object) analyzerException3, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LJ;", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray76 = analyzerException75.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean: expected Lorg.mockito.asm.tree.analysis.AnalyzerException: boolean;, but found I");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LLZ;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LL(JVSZ)Z;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException4);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException4);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier4.merge(value9, value14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        java.lang.Class<?> wildcardClass23 = basicVerifier16.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier4.newValue(type24);
        java.lang.String str26 = type24.getInternalName();
        java.lang.String str27 = type24.getInternalName();
        int int29 = type24.getOpcode(19);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value34 = basicVerifier0.newOperation(abstractInsnNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str26, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str27, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I");
        int int2 = type1.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type3 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("LLZ;;");
        java.lang.String str5 = type4.toString();
        java.lang.String str6 = type4.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier24.merge(value42, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier48.merge(value56, value61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value22, value42, value62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSort();
        int int67 = type64.getSort();
        java.lang.String str68 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter7.newValue(type64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: F: expected 178, but found I", (java.lang.Object) type4, value69);
        boolean boolean71 = type1.equals((java.lang.Object) analyzerException70);
        java.lang.Throwable[] throwableArray72 = analyzerException70.getSuppressed();
        java.lang.Class<?> wildcardClass73 = throwableArray72.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLZ;" + "'", str5, "LLZ;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LLZ;" + "'", str6, "LLZ;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)V;");
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ldouble;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        java.lang.String str12 = type4.getDescriptor();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier15.merge(value20, value25);
        boolean boolean27 = type14.equals((java.lang.Object) value25);
        java.lang.String str28 = type14.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray45);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier37.newValue(type41);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type50, type51, type54, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray56);
        java.lang.String str58 = type48.getDescriptor();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        java.lang.String str69 = type66.getDescriptor();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type65, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray70);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray70);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray70);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray70);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray70);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray70);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLdouble;;" + "'", str3, "LLdouble;;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "L(JVSZ)V;" + "'", str28, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)F" + "'", str46, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)Z" + "'", str57, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Z" + "'", str58, "Z");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "V" + "'", str69, "V");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)Z" + "'", str71, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(ZV)LZ;" + "'", str72, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)Z" + "'", str73, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)F" + "'", str74, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)V" + "'", str75, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)L(JVSZ)V;" + "'", str76, "(ZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)V" + "'", str77, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(ZV)LLdouble;;" + "'", str78, "(ZV)LLdouble;;");
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str3 = type2.getInternalName();
        int int5 = type2.getOpcode(131076);
        java.lang.String str6 = type2.toString();
        java.lang.String str7 = type2.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 131080 + "'", int5 == 131080);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        java.lang.String str50 = type45.getInternalName();
        int int52 = type45.getOpcode(142);
        int int54 = type45.getOpcode(27);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)Z" + "'", str50, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 146 + "'", int52 == 146);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = type6.getElementType();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier1.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int11 = type10.getSize();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean15 = type10.equals((java.lang.Object) analyzerException14);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier1.newValue(type10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier1.newValue(type18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str22 = type21.getDescriptor();
        int int23 = type21.getSort();
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier1.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean47 = type45.equals((java.lang.Object) "(JVSZ)Z");
        int int48 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Object) basicVerifier1, value49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = basicVerifier1.unaryOperation(abstractInsnNode51, value52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(JVSZ)Z" + "'", str7, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "L(JVSZ)Z;" + "'", str22, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type type21 = type19.getElementType();
        org.mockito.asm.Type type22 = type21.getElementType();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)V;");
        int int26 = type24.getOpcode(10);
        org.mockito.asm.Type type27 = type24.getElementType();
        java.lang.String str28 = type27.toString();
        boolean boolean29 = type22.equals((java.lang.Object) str28);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 14 + "'", int26 == 14);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str40 = type39.getInternalName();
        java.lang.String str41 = type39.getDescriptor();
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        java.lang.Object obj46 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = type52.getElementType();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier47.newValue(type52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier47.newValue(type56);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier47.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str68 = type67.getInternalName();
        int int70 = type67.getOpcode(15);
        org.mockito.asm.Type type71 = type67.getElementType();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier47.newValue(type67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;: expected 172, but found I", obj46, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.copyOperation(abstractInsnNode44, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray85 = analyzerException84.getSuppressed();
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass87 = analyzerException76.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newValue(type88);
        java.lang.String str90 = type88.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str36, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str40, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;" + "'", str41, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str42, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(JVSZ)Z" + "'", str53, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)Z" + "'", str68, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 19 + "'", int70 == 19);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str90, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("LLchar;;");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        int int8 = type7.getSize();
        int int9 = type7.getSize();
        java.lang.String str10 = type7.getDescriptor();
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type6, type7 };
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray11);
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray14);
        int int16 = type3.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        boolean boolean21 = type17.equals((java.lang.Object) 4);
        boolean boolean23 = type17.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier24.merge(value32, value37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type41, type42, type45, type46 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray47);
        int int49 = type39.getSort();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier24.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type55, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray60);
        boolean boolean63 = type17.equals((java.lang.Object) typeArray60);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray60);
        int int66 = type3.getOpcode(512);
        int int67 = type3.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException70);
        boolean boolean72 = type3.equals((java.lang.Object) analyzerException70);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException70);
        java.lang.Throwable throwable75 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", throwable75);
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value80);
        java.lang.Throwable[] throwableArray82 = analyzerException81.getSuppressed();
        java.lang.Throwable[] throwableArray83 = analyzerException81.getSuppressed();
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value86);
        java.lang.Throwable[] throwableArray88 = analyzerException87.getSuppressed();
        java.lang.Throwable[] throwableArray89 = analyzerException87.getSuppressed();
        java.lang.Throwable[] throwableArray90 = analyzerException87.getSuppressed();
        analyzerException81.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException92.addSuppressed((java.lang.Throwable) analyzerException94);
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException92);
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException92);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "V" + "'", str10, "V");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(ZV)Z" + "'", str12, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JVSZ)Z" + "'", str15, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(JVSZ)Z" + "'", str48, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)Z" + "'", str61, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 512 + "'", int66 == 512);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getDescriptor();
        boolean boolean18 = type15.equals((java.lang.Object) 93);
        java.lang.String str19 = type15.getDescriptor();
        int int20 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier23.merge(value41, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray51);
        java.lang.String str53 = type47.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        java.lang.String str62 = type59.getDescriptor();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type58, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier23.newValue(type47);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        boolean boolean71 = type67.equals((java.lang.Object) "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier23.newValue(type67);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getReturnType("D");
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getDescriptor();
        java.lang.String str77 = type75.toString();
        boolean boolean78 = type74.equals((java.lang.Object) type75);
        int int79 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier23.newValue(type75);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.copyOperation(abstractInsnNode22, value80);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(JVSZ)F" + "'", str52, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "F" + "'", str53, "F");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)F" + "'", str65, "(ZV)F");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Z" + "'", str76, "Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Z" + "'", str77, "Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        boolean boolean10 = type6.equals((java.lang.Object) 4);
        boolean boolean12 = type6.equals((java.lang.Object) 193);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        int int26 = type6.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier32.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier28.merge(value46, value50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter27.merge(value46, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type6, value66);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException74);
        analyzerException68.addSuppressed((java.lang.Throwable) analyzerException76);
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value81);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value86);
        org.mockito.asm.tree.analysis.Value value90 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value90);
        analyzerException87.addSuppressed((java.lang.Throwable) analyzerException91);
        java.lang.Throwable[] throwableArray93 = analyzerException87.getSuppressed();
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Throwable) analyzerException87);
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException95);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException95);
        java.lang.Throwable[] throwableArray98 = analyzerException1.getSuppressed();
        java.lang.String str99 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)V" + "'", str24, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I" + "'", str99, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        java.lang.String str17 = type15.getDescriptor();
        java.lang.String str18 = type15.toString();
        java.lang.String str19 = type15.getDescriptor();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "S" + "'", str17, "S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "S" + "'", str18, "S");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "S" + "'", str19, "S");
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSize();
        org.mockito.asm.Type[] typeArray4 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        boolean boolean8 = type0.equals((java.lang.Object) "(JVSZ)Z");
        java.lang.String str9 = type0.getClassName();
        java.lang.String str10 = type0.toString();
        int int11 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)F" + "'", str5, "(JVSZ)F");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str8 = type7.getDescriptor();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str12 = type11.getInternalName();
        int int14 = type11.getOpcode(15);
        org.mockito.asm.Type type15 = type11.getElementType();
        java.lang.String str16 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier0.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str22 = type21.getDescriptor();
        int int23 = type21.getSort();
        java.lang.String str24 = type21.getClassName();
        java.lang.String str25 = type21.getClassName();
        java.lang.String str26 = type21.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier31.merge(value36, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier43.newValue(type48);
        java.lang.Class<?> wildcardClass50 = basicVerifier43.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier31.newValue(type51);
        java.lang.String str53 = type51.getInternalName();
        java.lang.String str54 = type51.getInternalName();
        int int56 = type51.getOpcode(19);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier27.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        java.lang.String str62 = type59.getDescriptor();
        int int64 = type59.getOpcode(160);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean68 = type66.equals((java.lang.Object) "(JVSZ)Z");
        int int69 = type66.getSize();
        boolean boolean70 = type59.equals((java.lang.Object) type66);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier27.newValue(type66);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getObjectType("(JVSZ)LJ;");
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier27.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type77, type78, type81, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.Class<?> wildcardClass85 = type75.getClass();
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        java.lang.String str87 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.lang.String str90 = type89.toString();
        org.mockito.asm.tree.analysis.Value value91 = basicVerifier27.newValue(type89);
        int int92 = value91.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;", (java.lang.Object) str26, value91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.unaryOperation(abstractInsnNode18, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Z" + "'", str12, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)Z;" + "'", str16, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "L(JVSZ)Z;" + "'", str22, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "L(JVSZ)Z;" + "'", str26, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str53, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str54, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 23 + "'", int56 == 23);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Z" + "'", str62, "Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 160 + "'", int64 == 160);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)Z" + "'", str84, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str86, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str87, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/Type" + "'", str88, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str90, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException36);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter51.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean59 = type54.equals((java.lang.Object) analyzerException58);
        int int61 = type54.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter51.newValue(type54);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str64 = type63.toString();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter51.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        java.lang.String str69 = type66.getDescriptor();
        int int70 = type66.getSort();
        boolean boolean72 = type66.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter51.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier74.newValue(type78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter51, value79);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LL(JVSZ)Z;;", (java.lang.Throwable) analyzerException80);
        java.lang.Throwable[] throwableArray83 = analyzerException80.getSuppressed();
        java.lang.Throwable[] throwableArray84 = analyzerException80.getSuppressed();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 160 + "'", int61 == 160);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "D" + "'", str64, "D");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "V" + "'", str69, "V");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int3 = type0.getOpcode(93);
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 95 + "'", int3 == 95);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)Z;");
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier10.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier10.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray27 = analyzerException26.getSuppressed();
        boolean boolean28 = type23.equals((java.lang.Object) analyzerException26);
        java.lang.String str29 = type23.getInternalName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier10.newValue(type23);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("(ZV)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier10.newValue(type32);
        int int34 = value33.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier47.newValue(type52);
        java.lang.Class<?> wildcardClass54 = basicVerifier47.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier35.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier35.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int63 = type62.getSort();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier35.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str67 = type66.getClassName();
        java.lang.String str68 = type66.toString();
        java.lang.String str69 = type66.getDescriptor();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier35.newValue(type66);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean76 = type71.equals((java.lang.Object) analyzerException75);
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value79);
        java.lang.Throwable[] throwableArray81 = analyzerException80.getSuppressed();
        analyzerException75.addSuppressed((java.lang.Throwable) analyzerException80);
        java.lang.Class<?> wildcardClass83 = analyzerException75.getClass();
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        int int87 = type86.getDimensions();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier35.newValue(type86);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        int int92 = type90.getOpcode(208);
        org.mockito.asm.tree.analysis.Value value93 = basicVerifier35.newValue(type90);
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.merge(value33, value93);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = basicVerifier0.newOperation(abstractInsnNode95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "V" + "'", str20, "V");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str29, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str59, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L(JVSZ)Z;" + "'", str68, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L(JVSZ)Z;" + "'", str69, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str84, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 212 + "'", int92 == 212);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier16.merge(value24, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier12.merge(value30, value34);
        int int36 = value35.getSize();
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.merge(value35, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.Type[] typeArray67 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray67);
        java.lang.String str69 = type63.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        int int76 = type75.getSize();
        int int77 = type75.getSize();
        java.lang.String str78 = type75.getDescriptor();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type74, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier39.newValue(type63);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int85 = type84.getDimensions();
        int int86 = type84.getDimensions();
        org.mockito.asm.tree.analysis.Value value87 = basicVerifier39.newValue(type84);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)F" + "'", str68, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "F" + "'", str69, "F");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "V" + "'", str78, "V");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(ZV)Z" + "'", str80, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(ZV)F" + "'", str81, "(ZV)F");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type40, type41, type44, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray46);
        int int48 = type38.getSort();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier50.newValue(type65);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier23.newValue(type65);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        boolean boolean75 = type71.equals((java.lang.Object) 4);
        int int76 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier23.newValue(type71);
        java.lang.Class<?> wildcardClass78 = value77.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        int int82 = type81.getSort();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier0.newValue(type81);
        java.lang.Class<?> wildcardClass84 = value83.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(JVSZ)Z" + "'", str47, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str79, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str80, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str85, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type86);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: int");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        boolean boolean13 = type3.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("S");
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier35.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter19.copyOperation(abstractInsnNode34, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter19.copyOperation(abstractInsnNode43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.copyOperation(abstractInsnNode18, value48);
        int int50 = value49.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier65.merge(value70, value75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter63.copyOperation(abstractInsnNode64, value76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter63.newValue(type78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter63.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.newValue(type81);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.newValue(type84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType("Z");
        int int89 = type87.getOpcode(101);
        java.lang.String str90 = type87.getClassName();
        int int91 = type87.getSize();
        int int93 = type87.getOpcode(155);
        java.lang.String str94 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter0.newValue(type87);
        int int97 = type87.getOpcode(0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 101 + "'", int89 == 101);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "boolean" + "'", str90, "boolean");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 155 + "'", int93 == 155);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Z" + "'", str94, "Z");
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)Z;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("LL(JVSZ)V;;", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(VSZ)L(JVSZ)Z;");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(VSZ)L(JVSZ)Z;" + "'", str2, "(VSZ)L(JVSZ)Z;");
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("F");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type57, type58, type61, type62 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        boolean boolean71 = type67.equals((java.lang.Object) "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        boolean boolean72 = type51.equals((java.lang.Object) type67);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)Z" + "'", str64, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)V" + "'", str65, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)F" + "'", str66, "(JVSZ)F");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        java.lang.String str31 = type28.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type27, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        org.mockito.asm.Type[] typeArray35 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int37 = type24.getSort();
        java.lang.String str38 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type42, type43, type46, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier50.newValue(type55);
        java.lang.Class<?> wildcardClass57 = basicVerifier50.getClass();
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        boolean boolean62 = type40.equals((java.lang.Object) type61);
        int int63 = type40.getSort();
        int int64 = type40.getSort();
        java.lang.String str65 = type40.toString();
        int int66 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.newOperation(abstractInsnNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "V" + "'", str31, "V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(ZV)Z" + "'", str33, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)Z" + "'", str49, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str58, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str60, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Z" + "'", str65, "Z");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        boolean boolean13 = type3.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("S");
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier21.merge(value26, value31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.copyOperation(abstractInsnNode20, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier35.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter19.copyOperation(abstractInsnNode34, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter19.copyOperation(abstractInsnNode43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.copyOperation(abstractInsnNode18, value48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        boolean boolean54 = type50.equals((java.lang.Object) 4);
        boolean boolean56 = type50.equals((java.lang.Object) 193);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type61.getSize();
        int int63 = type61.getSize();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type60, type61, type64, type65 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray66);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        int int70 = type50.getSort();
        int int71 = type50.getSort();
        java.lang.String str72 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.newValue(type50);
        int int74 = type50.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(JVSZ)Z" + "'", str67, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JVSZ)V" + "'", str68, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(JVSZ)Z" + "'", str69, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Z" + "'", str72, "Z");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        int int6 = type2.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter8.newValue(type9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        int int12 = type11.getSize();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean16 = type11.equals((java.lang.Object) analyzerException15);
        int int18 = type11.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter8.newValue(type11);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.toString();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter8.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        int int24 = type23.getSize();
        int int25 = type23.getSize();
        java.lang.String str26 = type23.getDescriptor();
        int int27 = type23.getSort();
        boolean boolean29 = type23.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter8.newValue(type23);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str32 = type31.toString();
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter8.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier37.merge(value42, value47);
        boolean boolean49 = type36.equals((java.lang.Object) value47);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter8.copyOperation(abstractInsnNode34, value47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getDescriptor();
        boolean boolean54 = type51.equals((java.lang.Object) 93);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter8.newValue(type51);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        int int58 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("LLorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;", (java.lang.Object) type2, value55);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 157 + "'", int6 == 157);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 160 + "'", int18 == 160);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "D" + "'", str21, "D");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "V" + "'", str26, "V");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "C" + "'", str32, "C");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Z" + "'", str52, "Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier39.newValue(type44);
        java.lang.Class<?> wildcardClass46 = basicVerifier39.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier27.newValue(type47);
        java.lang.String str49 = type47.getInternalName();
        java.lang.String str50 = type47.getInternalName();
        int int52 = type47.getOpcode(19);
        int int54 = type47.getOpcode(1024);
        java.lang.String str55 = type47.toString();
        java.lang.String str56 = type47.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        java.util.List list59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value60 = basicVerifier0.naryOperation(abstractInsnNode58, list59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str49, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str50, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1028 + "'", int54 == 1028);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str55, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier58.merge(value63, value68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.copyOperation(abstractInsnNode57, value69);
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter44.merge(value70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        boolean boolean87 = type77.equals((java.lang.Object) analyzerException86);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter74.newValue(type77);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier0.merge(value72, value89);
        org.mockito.asm.Type type91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicVerifier0.newValue(type91);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier0.newValue(type93);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LL(JVSZ)Z;;");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value19);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        int int30 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier25.newValue(type29);
        java.lang.Class<?> wildcardClass32 = basicVerifier25.getClass();
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value50);
        int int52 = value50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LLorg/mockito/asm/Type;;;", (java.lang.Object) wildcardClass32, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicValue;", value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("L(ZV)F;", (java.lang.Object) analyzerException20, value50);
        int int56 = value50.getSize();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str33, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        int int8 = type6.getSize();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier4.merge(value9, value14);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter2.copyOperation(abstractInsnNode3, value15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter2.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier21.merge(value39, value43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter20.merge(value39, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean70 = type65.equals((java.lang.Object) analyzerException69);
        int int72 = type65.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter62.newValue(type65);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.toString();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter62.newValue(type74);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter20.copyOperation(abstractInsnNode61, value76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter20.newValue(type79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter20.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter2.copyOperation(abstractInsnNode19, value83);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier85 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str87 = type86.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier85.newValue(type86);
        int int89 = type86.getSort();
        int int90 = type86.getSize();
        java.lang.Object obj91 = null;
        boolean boolean92 = type86.equals(obj91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter2.newValue(type86);
        boolean boolean94 = type1.equals((java.lang.Object) basicInterpreter2);
        org.mockito.asm.Type type95 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 160 + "'", int72 == 160);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "D" + "'", str75, "D");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "boolean" + "'", str87, "boolean");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(type95);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        java.lang.String str4 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;" + "'", str3, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;" + "'", str4, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;");
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        java.lang.String str16 = type1.getDescriptor();
        java.lang.String str17 = type1.getClassName();
        int int18 = type1.getSize();
        int int19 = type1.getSize();
        int int20 = type1.getDimensions();
        java.lang.String str21 = type1.getInternalName();
        java.lang.String str22 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)V;" + "'", str16, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)V" + "'", str17, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JVSZ)V" + "'", str22, "(JVSZ)V");
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type12.getSort();
        boolean boolean15 = type12.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int17 = type12.getOpcode(148);
        int int19 = type12.getOpcode(197);
        java.lang.String str20 = type12.getDescriptor();
        java.lang.String str21 = type12.toString();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str25 = type24.toString();
        int int26 = type24.getSort();
        java.lang.Class<?> wildcardClass27 = type24.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = type28.getInternalName();
        java.lang.String str30 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type28);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str34 = type33.toString();
        org.mockito.asm.Type type35 = type33.getElementType();
        int int37 = type35.getOpcode(117);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.newValue(type35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        java.util.List list40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.naryOperation(abstractInsnNode39, list40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 148 + "'", int17 == 148);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 197 + "'", int19 == 197);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z" + "'", str20, "Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "LLZ;;" + "'", str34, "LLZ;;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 117 + "'", int37 == 117);
        org.junit.Assert.assertNotNull(value38);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value16);
        int int18 = value16.getSize();
        java.lang.Class<?> wildcardClass19 = value16.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str20, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str21, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str22, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str23, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getSize();
        int int5 = type1.getDimensions();
        org.mockito.asm.Type type6 = type1.getElementType();
        int int7 = type6.getSize();
        int int9 = type6.getOpcode(182);
        java.lang.String str10 = type6.getClassName();
        int int11 = type6.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)Z;" + "'", str2, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 183 + "'", int9 == 183);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "long" + "'", str10, "long");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)Z;");
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier0.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value15 = basicVerifier0.naryOperation(abstractInsnNode13, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(value12);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str67 = type66.toString();
        int int69 = type66.getOpcode((int) (short) -1);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type66);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type71);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "C" + "'", str67, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int1 = type0.getSort();
        boolean boolean3 = type0.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        java.lang.String str7 = type4.getDescriptor();
        int int8 = type4.getSort();
        boolean boolean10 = type4.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass11 = type4.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        boolean boolean14 = type0.equals((java.lang.Object) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "V" + "'", str7, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("L(JVSZ)Z;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        org.mockito.asm.Type[] typeArray5 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        java.lang.String str6 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray5);
        java.lang.String str7 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(JVSZ)Z;" + "'", str2, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str6, "(JVSZ)L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(JVSZ)Z" + "'", str7, "(JVSZ)Z");
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        int int24 = type21.getSort();
        int int25 = type21.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type21);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("LLZ;");
        java.lang.String str29 = type28.getDescriptor();
        int int31 = type28.getOpcode(114);
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type28);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = type35.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type52, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray57);
        int int62 = type34.getDimensions();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = basicVerifier0.newOperation(abstractInsnNode64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "LLZ;" + "'", str29, "LLZ;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 118 + "'", int31 == 118);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str61, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(V)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str6 = type5.toString();
        int int8 = type5.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass10 = type5.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = type14.getElementType();
        int int17 = type14.getOpcode(169);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 175 + "'", int8 == 175);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 173 + "'", int17 == 173);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.toString();
        int int29 = type26.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier21.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int34 = type32.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter0.copyOperation(abstractInsnNode20, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean46 = type41.equals((java.lang.Object) analyzerException45);
        int int48 = type41.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter38.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.merge(value57, value62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.copyOperation(abstractInsnNode51, value63);
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter38.merge(value64, value65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier69.merge(value74, value79);
        boolean boolean81 = type68.equals((java.lang.Object) value79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str83 = type82.getClassName();
        int int84 = type82.getSize();
        org.mockito.asm.Type[] typeArray86 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray86);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter38.newValue(type68);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode37, value89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 175 + "'", int29 == 175);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 160 + "'", int48 == 160);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(JVSZ)F" + "'", str87, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str88, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue");
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("LC;", (java.lang.Throwable) analyzerException15);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException17);
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.Type[] typeArray16 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier8.newValue(type12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        java.lang.String str29 = type19.getDescriptor();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type37.getSize();
        int int39 = type37.getSize();
        java.lang.String str40 = type37.getDescriptor();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type36, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray41);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray41);
        java.lang.Class<?> wildcardClass47 = typeArray41.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        int int49 = type48.getSort();
        java.lang.String str50 = type48.toString();
        java.lang.String str51 = type48.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)F" + "'", str17, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Z" + "'", str29, "Z");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V" + "'", str40, "V");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(ZV)Z" + "'", str42, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(ZV)LZ;" + "'", str43, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(ZV)Z" + "'", str44, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(ZV)F" + "'", str45, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(ZV)V" + "'", str46, "(ZV)V");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str50, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.Type[]" + "'", str51, "org.mockito.asm.Type[]");
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier19.merge(value37, value41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value17, value37, value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray70);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter2.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier78 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str80 = type79.getClassName();
        int int81 = type79.getSize();
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier78.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter2.copyOperation(abstractInsnNode75, value82);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.copyOperation(abstractInsnNode1, value82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str91 = type90.getInternalName();
        int int92 = type90.getDimensions();
        java.lang.String str93 = type90.getClassName();
        java.lang.String str94 = type90.toString();
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter0.newValue(type90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = basicInterpreter0.naryOperation(abstractInsnNode96, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)V" + "'", str72, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JVSZ)V" + "'", str73, "(JVSZ)V");
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str91, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str93, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;;" + "'", str94, "L(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;;");
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        int int28 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier0.newValue(type27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str32 = type31.getClassName();
        java.lang.String str33 = type31.toString();
        java.lang.String str34 = type31.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        java.util.List list37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = basicVerifier0.naryOperation(abstractInsnNode36, list37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Z" + "'", str32, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L(JVSZ)Z;" + "'", str33, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "L(JVSZ)Z;" + "'", str34, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value35);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int23 = type1.getOpcode(168);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter31.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier24.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str51 = type50.getInternalName();
        int int53 = type50.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier24.newValue(type50);
        boolean boolean55 = type1.equals((java.lang.Object) type50);
        int int57 = type50.getOpcode(18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        int int64 = type63.getSize();
        int int65 = type63.getSize();
        java.lang.String str66 = type63.getDescriptor();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type62, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray67);
        java.lang.Class<?> wildcardClass69 = typeArray67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type71 = type70.getElementType();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException83);
        boolean boolean86 = type76.equals((java.lang.Object) analyzerException85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter73.newValue(type76);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter72.newValue(type76);
        boolean boolean89 = type70.equals((java.lang.Object) value88);
        java.lang.String str90 = type70.toString();
        boolean boolean91 = type50.equals((java.lang.Object) type70);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 172 + "'", int23 == 172);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 177 + "'", int53 == 177);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "V" + "'", str66, "V");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)Z" + "'", str68, "(ZV)Z");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str90, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier7.merge(value15, value20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier22.merge(value40, value44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier55.newValue(type56);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier46.merge(value54, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value20, value40, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) true, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;", (java.lang.Object) 91, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;;", (java.lang.Throwable) analyzerException63);
        java.lang.Class<?> wildcardClass65 = analyzerException63.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str5 = type4.getInternalName();
        java.lang.String str6 = type4.getInternalName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException11);
        boolean boolean15 = type4.equals((java.lang.Object) analyzerException14);
        int int16 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type4);
        int int19 = type4.getOpcode(98);
        org.mockito.asm.Type type20 = type4.getElementType();
        int int21 = type4.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(JVSZ)Z" + "'", str5, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 102 + "'", int19 == 102);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)F");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier33.merge(value41, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier29.merge(value47, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier53.merge(value71, value75);
        int int77 = value76.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier5.merge(value47, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Object) 18, value76);
        java.lang.Class<?> wildcardClass80 = analyzerException79.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        boolean boolean82 = type1.equals((java.lang.Object) type81);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F" + "'", str2, "F");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(JVSZ)LLorg/mockito/asm/tree/analysis/BasicVerifier;;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;: expected Ldouble;, but found I");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;: expected Ldouble;, but found I" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;: expected Ldouble;, but found I");
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(JVSZ)S");
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier7.merge(value12, value17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter5.copyOperation(abstractInsnNode6, value18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)L(JVSZ)V;", (java.lang.Object) type3, value19);
        java.lang.Object obj22 = null;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.Type[] typeArray34 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray34);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier26.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type24, value36);
        int int38 = value36.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", obj22, value36);
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.BasicVerifier", (java.lang.Throwable) analyzerException20);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JVSZ)S" + "'", str4, "(JVSZ)S");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "D" + "'", str25, "D");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)F" + "'", str35, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier6.merge(value24, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value29);
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value34);
        java.lang.Throwable[] throwableArray36 = analyzerException35.getSuppressed();
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value39);
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value43);
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException44);
        java.lang.Throwable[] throwableArray46 = analyzerException40.getSuppressed();
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Throwable) analyzerException40);
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("LJVSZ)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(VSZ)Lrg/mockito/asm/Type;", (java.lang.Throwable) analyzerException52);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean49 = type44.equals((java.lang.Object) analyzerException48);
        int int51 = type44.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter41.newValue(type44);
        java.lang.String str53 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter0.newValue(type44);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        java.lang.String str68 = type65.getDescriptor();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type64, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray69);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type59);
        int int74 = type59.getOpcode(102);
        java.lang.String str75 = type59.toString();
        java.lang.String str76 = type59.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 160 + "'", int51 == 160);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "V" + "'", str53, "V");
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(ZV)Z" + "'", str70, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(ZV)LZ;" + "'", str71, "(ZV)LZ;");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 106 + "'", int74 == 106);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "LZ;" + "'", str75, "LZ;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LZ;" + "'", str76, "LZ;");
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSize();
        boolean boolean4 = type0.equals((java.lang.Object) 4);
        boolean boolean6 = type0.equals((java.lang.Object) 193);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        int int12 = type11.getSize();
        int int13 = type11.getSize();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type10, type11, type14, type15 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray16);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        int int21 = type0.getOpcode(175);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier25.merge(value30, value35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter23.copyOperation(abstractInsnNode24, value36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter23.copyOperation(abstractInsnNode38, value62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier66.merge(value74, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter22.merge(value63, value80);
        boolean boolean83 = type0.equals((java.lang.Object) value82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)Z" + "'", str17, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JVSZ)V" + "'", str18, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 175 + "'", int21 == 175);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: short");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: short;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: short;");
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(VSZ)LL(JVSZ)Z;");
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getClassName();
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str2, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;" + "'", str3, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter50.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean58 = type53.equals((java.lang.Object) analyzerException57);
        int int60 = type53.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter50.newValue(type53);
        java.lang.String str62 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier0.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier64.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        int int69 = type68.getSort();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        int int82 = type80.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier79.newValue(type80);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier73.merge(value78, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter71.copyOperation(abstractInsnNode72, value84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter71.newValue(type86);
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier64.newValue(type86);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str91 = type90.getInternalName();
        int int93 = type90.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value94 = basicVerifier64.newValue(type90);
        int int96 = type90.getOpcode(179);
        org.mockito.asm.tree.analysis.Value value97 = basicVerifier0.newValue(type90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicVerifier0.newOperation(abstractInsnNode98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 160 + "'", int60 == 160);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(JVSZ)Z" + "'", str91, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 177 + "'", int93 == 177);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 183 + "'", int96 == 183);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value7);
        java.lang.Throwable[] throwableArray9 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException8);
        java.lang.Throwable[] throwableArray11 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value15);
        java.lang.Throwable[] throwableArray17 = analyzerException16.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException16);
        java.lang.Throwable[] throwableArray19 = analyzerException16.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier45.merge(value53, value58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier41.merge(value59, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException65);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException65);
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException65);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException65);
        java.lang.Throwable[] throwableArray70 = analyzerException8.getSuppressed();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("S");
        int int2 = type1.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter3.merge(value22, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter45.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        int int49 = type48.getSize();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean53 = type48.equals((java.lang.Object) analyzerException52);
        int int55 = type48.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter45.newValue(type48);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter45.newValue(type57);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter3.copyOperation(abstractInsnNode44, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier61.newValue(type66);
        java.lang.Class<?> wildcardClass68 = basicVerifier61.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter3.newValue(type72);
        boolean boolean74 = type1.equals((java.lang.Object) type72);
        java.lang.String str75 = type1.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = type1.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 160 + "'", int55 == 160);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "D" + "'", str58, "D");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str70, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str71, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "S" + "'", str75, "S");
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier22.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        java.lang.String str37 = type34.getDescriptor();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type33, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        org.mockito.asm.Type[] typeArray41 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray41);
        int int43 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier22.newValue(type30);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier22.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Object) 159, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier50.merge(value58, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.merge(value46, value64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(ZV)Z" + "'", str39, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int8 = type6.getOpcode(4096);
        int int9 = type6.getSort();
        java.lang.String str10 = type6.getInternalName();
        org.mockito.asm.Type type11 = type6.getElementType();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter12.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter12.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int27 = type26.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F");
        java.lang.Throwable[] throwableArray30 = analyzerException29.getSuppressed();
        boolean boolean31 = type26.equals((java.lang.Object) analyzerException29);
        int int32 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter12.newValue(type26);
        boolean boolean34 = type6.equals((java.lang.Object) type26);
        java.lang.String str35 = type6.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4100 + "'", int8 == 4100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/Type" + "'", str35, "org/mockito/asm/Type");
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str32, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)Lrg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean9 = type4.equals((java.lang.Object) analyzerException8);
        int int11 = type4.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter1.newValue(type4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        int int17 = type16.getSize();
        int int18 = type16.getSize();
        java.lang.String str19 = type16.getDescriptor();
        int int20 = type16.getSort();
        boolean boolean22 = type16.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter1.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier24.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) basicInterpreter1, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 142);
        int int34 = type31.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter1.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter1.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F");
        java.lang.String str41 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter1.newValue(type40);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 160 + "'", int11 == 160);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;" + "'", str41, "Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;");
        org.junit.Assert.assertNotNull(value42);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)S");
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType("(ZV)LLorg.mockito.asm.tree.analysis.AnalyzerException: float;;");
        int int43 = type42.getSort();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier46.newValue(type47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier46.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        int int63 = type56.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter53.newValue(type56);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter53.newValue(type65);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier46.newValue(type65);
        int int69 = value68.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.unaryOperation(abstractInsnNode45, value68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 160 + "'", int63 == 160);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "D" + "'", str66, "D");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected 185, but found null", throwable1);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        java.lang.String str16 = type1.getDescriptor();
        java.lang.String str17 = type1.getClassName();
        java.lang.Class<?> wildcardClass18 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "L(JVSZ)V;" + "'", str16, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JVSZ)V" + "'", str17, "(JVSZ)V");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray10 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException16);
        java.lang.Throwable[] throwableArray19 = analyzerException18.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier22.merge(value27, value32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter20.copyOperation(abstractInsnNode21, value33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter20.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean41 = type39.equals((java.lang.Object) "(JVSZ)Z");
        int int42 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter20.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter45.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException55);
        boolean boolean58 = type48.equals((java.lang.Object) analyzerException57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter45.newValue(type48);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter20.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int67 = type66.getSize();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean71 = type66.equals((java.lang.Object) analyzerException70);
        int int73 = type66.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter63.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str76 = type75.toString();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter63.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        java.lang.String str81 = type78.getDescriptor();
        int int82 = type78.getSort();
        boolean boolean84 = type78.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter63.newValue(type78);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str87 = type86.toString();
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter63.newValue(type86);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter20.copyOperation(abstractInsnNode62, value88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I", (java.lang.Object) analyzerException18, value88);
        java.lang.Throwable[] throwableArray91 = analyzerException18.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Throwable) analyzerException18);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException18);
        java.lang.String str94 = analyzerException6.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 160 + "'", int73 == 160);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "D" + "'", str76, "D");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "V" + "'", str81, "V");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "C" + "'", str87, "C");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null" + "'", str94, "org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null");
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = type64.getElementType();
        java.lang.String str67 = type64.getDescriptor();
        java.lang.Class<?> wildcardClass68 = type64.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str73 = type72.getClassName();
        int int75 = type72.getOpcode(83);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter0.newValue(type72);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        int int81 = type80.getSize();
        int int82 = type80.getSize();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type79, type80, type83, type84 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray85);
        int int87 = type77.getSort();
        boolean boolean89 = type77.equals((java.lang.Object) 95);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type77);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getReturnType("(JVSZ)LLLZ;;;");
        java.lang.String str93 = type92.getDescriptor();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.newValue(type92);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        org.mockito.asm.tree.analysis.Value value96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.unaryOperation(abstractInsnNode95, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)Z" + "'", str65, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L(JVSZ)Z;" + "'", str67, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 83 + "'", int75 == 83);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(JVSZ)Z" + "'", str86, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "LLLZ;" + "'", str93, "LLLZ;");
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray14 = analyzerException3.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter17.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        boolean boolean30 = type20.equals((java.lang.Object) analyzerException29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter17.newValue(type20);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.copyOperation(abstractInsnNode34, value46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier48.merge(value66, value70);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter16.merge(value46, value71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)LLorg/mockito/asm/Type;;", (java.lang.Object) analyzerException3, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LJ;", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException83);
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException90);
        analyzerException83.addSuppressed((java.lang.Throwable) analyzerException90);
        java.lang.Throwable[] throwableArray94 = analyzerException90.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException95);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException95);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(JVSZ)LLorg/mockito/asm/Type;;;");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type[] typeArray4 = org.mockito.asm.Type.getArgumentTypes("(ZV)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray4);
        org.mockito.asm.Type type6 = type1.getElementType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("(JVSZ)L(JVSZ)Z;");
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)LLorg/mockito/asm/Type;;");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray10);
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL(JVSZ)LLorg/mockito/asm/Type;;;;" + "'", str2, "LL(JVSZ)LLorg/mockito/asm/Type;;;;");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;" + "'", str5, "(ZV)LL(JVSZ)LLorg/mockito/asm/Type;;;;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str11, "(JVSZ)L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)LJVSZ)LLorg/mockito/asm/Type;" + "'", str12, "(JVSZ)LJVSZ)LLorg/mockito/asm/Type;");
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter2.newValue(type3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean10 = type5.equals((java.lang.Object) analyzerException9);
        int int12 = type5.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter2.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier16.merge(value21, value26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter14.copyOperation(abstractInsnNode15, value27);
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter2.merge(value28, value29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter32.newValue(type33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean40 = type35.equals((java.lang.Object) analyzerException39);
        int int42 = type35.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter32.newValue(type35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str45 = type44.toString();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter32.newValue(type44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier50.merge(value55, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter48.copyOperation(abstractInsnNode49, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter48.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter32.copyOperation(abstractInsnNode47, value64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter2.copyOperation(abstractInsnNode31, value64);
        int int67 = value64.getSize();
        int int68 = value64.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.copyOperation(abstractInsnNode1, value64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.newOperation(abstractInsnNode70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 160 + "'", int12 == 160);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 160 + "'", int42 == 160);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "D" + "'", str45, "D");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type12.getSort();
        boolean boolean15 = type12.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int17 = type12.getOpcode(148);
        int int19 = type12.getOpcode(197);
        java.lang.String str20 = type12.getDescriptor();
        java.lang.String str21 = type12.toString();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str25 = type24.toString();
        int int26 = type24.getSort();
        java.lang.Class<?> wildcardClass27 = type24.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = type28.getInternalName();
        java.lang.String str30 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type28);
        java.lang.String str32 = type28.toString();
        java.lang.String str33 = type28.toString();
        java.lang.String str34 = type28.getDescriptor();
        org.mockito.asm.Type type35 = type28.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 148 + "'", int17 == 148);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 197 + "'", int19 == 197);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z" + "'", str20, "Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str32, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str33, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException4);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value16);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException17);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException17);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value25);
        java.lang.Throwable[] throwableArray27 = analyzerException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = analyzerException26.getSuppressed();
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value31);
        java.lang.Throwable[] throwableArray33 = analyzerException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = analyzerException32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = analyzerException32.getSuppressed();
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        int int56 = value55.getSize();
        int int57 = value55.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value55);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException58);
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException37);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int14 = type13.getDimensions();
        java.lang.String str15 = type13.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value8);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException13);
        java.lang.Throwable[] throwableArray15 = analyzerException9.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Throwable) analyzerException4);
        java.lang.Throwable[] throwableArray18 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Throwable[] throwableArray26 = analyzerException25.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException58);
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)S");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException62);
        java.lang.Throwable[] throwableArray64 = analyzerException30.getSuppressed();
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Throwable) analyzerException25);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException25);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSort();
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter5.newValue(type6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean13 = type8.equals((java.lang.Object) analyzerException12);
        int int15 = type8.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter5.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        int int41 = value40.getSize();
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter5.merge(value40, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter45.copyOperation(abstractInsnNode46, value58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter45.newValue(type60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean66 = type64.equals((java.lang.Object) "(JVSZ)Z");
        int int67 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter45.newValue(type64);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter5.copyOperation(abstractInsnNode44, value68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier70.newValue(type71);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier70.newValue(type74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        java.lang.String str78 = type77.getDescriptor();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier70.newValue(type77);
        java.lang.String str80 = type77.getDescriptor();
        java.lang.String str81 = type77.getClassName();
        int int82 = type77.getDimensions();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter5.newValue(type77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) str4, value83);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "float" + "'", str2, "float");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 160 + "'", int15 == 160);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str78, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str80, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.mockito.asm.Type" + "'", str81, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ldouble;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I, but found F;");
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org/mockito/asm/tree/analysis/AnalyzerException, but found D");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        boolean boolean26 = type22.equals((java.lang.Object) 4);
        int int27 = type22.getSort();
        java.lang.String str28 = type22.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier30.newValue(type35);
        java.lang.Class<?> wildcardClass37 = basicVerifier30.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        int int40 = type39.getSort();
        int int42 = type39.getOpcode(165);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str44 = type43.toString();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        int int50 = type49.getSize();
        int int51 = type49.getSize();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type48, type49, type52, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray54);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray54);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray54);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray54);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray54);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newValue(type21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("LLchar;;", (java.lang.Object) analyzerException66, value75);
        int int83 = value75.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        int int89 = type85.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value90 = basicVerifier84.newValue(type85);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.merge(value75, value90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 165 + "'", int42 == 165);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)V" + "'", str56, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)V" + "'", str57, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(JVSZ)S" + "'", str58, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str59, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)I" + "'", str60, "(JVSZ)I");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)Z" + "'", str61, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JVSZ)F" + "'", str62, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 157 + "'", int89 == 157);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("F");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter0.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        int int59 = type58.getSize();
        int int60 = type58.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type57, type58, type61, type62 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray63);
        java.lang.Class<?> wildcardClass67 = type51.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass67);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)Z" + "'", str64, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)V" + "'", str65, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)F" + "'", str66, "(JVSZ)F");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/Type" + "'", str70, "org/mockito/asm/Type");
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str2 = type1.getDescriptor();
        int int4 = type1.getOpcode(131072);
        boolean boolean6 = type1.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type7 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 131076 + "'", int4 == 131076);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)F");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value6);
        java.lang.Throwable[] throwableArray8 = analyzerException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = analyzerException7.getSuppressed();
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = analyzerException13.getSuppressed();
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value24);
        java.lang.Throwable[] throwableArray26 = analyzerException25.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value36);
        java.lang.Throwable[] throwableArray38 = analyzerException37.getSuppressed();
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("LLchar;;", (java.lang.Throwable) analyzerException37);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException41);
        java.lang.String str43 = analyzerException41.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: LLchar;;" + "'", str43, "org.mockito.asm.tree.analysis.AnalyzerException: LLchar;;");
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I: expected a, but found I");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F" + "'", str2, "F");
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException68);
        boolean boolean71 = type61.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type61);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier74.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.ternaryOperation(abstractInsnNode57, value72, value73, value80);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type90 = type89.getElementType();
        int int92 = type89.getOpcode(195);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.newValue(type89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = basicInterpreter0.newOperation(abstractInsnNode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 199 + "'", int92 == 199);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str22, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str23, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str24, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(ZV)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I;;");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSort();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type7);
        java.lang.Class<?> wildcardClass10 = basicVerifier3.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int13 = type12.getDimensions();
        int int15 = type12.getOpcode(109);
        int int16 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        java.lang.String str23 = type19.getClassName();
        java.lang.String str24 = type19.getDescriptor();
        int int26 = type19.getOpcode(114);
        java.lang.String str27 = type19.getClassName();
        java.lang.Class<?> wildcardClass28 = type19.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        int int30 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter0.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int36 = type35.getSize();
        int int37 = type35.getSize();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type34, type35, type38, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray40);
        java.lang.Class<?> wildcardClass42 = type32.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        int int46 = type45.getSort();
        java.lang.String str47 = type45.toString();
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newOperation(abstractInsnNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 113 + "'", int15 == 113);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 114 + "'", int26 == 114);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)Z" + "'", str41, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str44, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.mockito.asm.Type" + "'", str48, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean5 = type0.equals((java.lang.Object) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str8, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        int int22 = type1.getSize();
        int int24 = type1.getOpcode(102);
        int int26 = type1.getOpcode(0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)F" + "'", str20, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str21, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 106 + "'", int24 == 106);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier41.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier50.merge(value55, value60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier62.newValue(type67);
        java.lang.Class<?> wildcardClass69 = basicVerifier62.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier50.newValue(type70);
        java.lang.String str72 = type70.getInternalName();
        java.lang.String str73 = type70.getInternalName();
        int int75 = type70.getOpcode(19);
        java.lang.String str76 = type70.getDescriptor();
        int int77 = type70.getSort();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str72, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str73, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str76, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 13, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException13);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        java.lang.Throwable throwable3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("LC;", throwable3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.Type", throwable3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value16);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException17);
        java.lang.Throwable[] throwableArray19 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException13);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I", (java.lang.Throwable) analyzerException32);
        boolean boolean46 = type24.equals((java.lang.Object) analyzerException45);
        analyzerException22.addSuppressed((java.lang.Throwable) analyzerException45);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.BasicValue", (java.lang.Throwable) analyzerException45);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter1.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        boolean boolean14 = type4.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.newValue(type4);
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("V");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type38, type39, type42, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray44);
        int int46 = type36.getSort();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier21.newValue(type36);
        java.lang.String str48 = type36.toString();
        java.lang.Class<?> wildcardClass49 = type36.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newValue(type51);
        int int53 = type51.getDimensions();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "void" + "'", str19, "void");
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(JVSZ)Z" + "'", str45, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Z" + "'", str48, "Z");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.Object obj18 = null;
        boolean boolean19 = type17.equals(obj18);
        boolean boolean20 = type15.equals(obj18);
        int int22 = type15.getOpcode(175);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        int int27 = type26.getSize();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean31 = type26.equals((java.lang.Object) analyzerException30);
        int int33 = type26.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter23.newValue(type26);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str36 = type35.toString();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter23.newValue(type35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier41.merge(value46, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter39.copyOperation(abstractInsnNode40, value52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter39.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter23.copyOperation(abstractInsnNode38, value55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier71 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str73 = type72.getClassName();
        int int74 = type72.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier67.merge(value75, value80);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier82.newValue(type83);
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier63.merge(value81, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value86);
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier57.merge(value86, value88);
        org.mockito.asm.tree.analysis.Value value90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter23.merge(value86, value90);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType("(JVSZ)LJ;");
        java.lang.String str94 = type93.toString();
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter23.newValue(type93);
        boolean boolean96 = type15.equals((java.lang.Object) value95);
        java.lang.String str97 = type15.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 179 + "'", int22 == 179);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 160 + "'", int33 == 160);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "D" + "'", str36, "D");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "LJVSZ)LJ;" + "'", str94, "LJVSZ)LJ;");
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org/mockito/asm/Type" + "'", str97, "org/mockito/asm/Type");
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: L(ZV)F;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        int int2 = type1.getSort();
        int int3 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        java.lang.String str59 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier41.newValue(type56);
        int int61 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter0.newValue(type56);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter0.newValue(type63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str67 = type66.toString();
        int int69 = type66.getOpcode((int) (short) -1);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type66);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        int int74 = type73.getSize();
        java.lang.String str75 = type73.getClassName();
        java.lang.String str76 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicInterpreter0.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "C" + "'", str67, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "void" + "'", str75, "void");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "V" + "'", str76, "V");
        org.junit.Assert.assertNull(value77);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)J");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException6);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException6);
        java.lang.String str9 = analyzerException6.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str9, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier47.merge(value52, value57);
        boolean boolean59 = type46.equals((java.lang.Object) value57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str61 = type60.getClassName();
        int int62 = type60.getSize();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray64);
        int int67 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type46);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type73 = type72.getElementType();
        java.lang.String str74 = type72.getInternalName();
        boolean boolean75 = type70.equals((java.lang.Object) type72);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier0.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = basicVerifier0.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(JVSZ)F" + "'", str65, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str66, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/Type" + "'", str74, "Lorg/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        java.lang.String str20 = type17.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier2.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        int int26 = type23.getSort();
        int int27 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier2.newValue(type23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I", obj1, value28);
        java.lang.String str30 = analyzerException29.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "V" + "'", str20, "V");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I: expected null, but found I" + "'", str30, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I: expected null, but found I");
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Throwable[] throwableArray13 = analyzerException12.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray15 = analyzerException4.getSuppressed();
        java.lang.Throwable[] throwableArray16 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I", (java.lang.Throwable) analyzerException17);
        java.lang.Throwable[] throwableArray19 = analyzerException18.getSuppressed();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier36.newValue(type41);
        java.lang.Class<?> wildcardClass43 = basicVerifier36.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier24.newValue(type44);
        java.lang.String str46 = type44.getInternalName();
        java.lang.String str47 = type44.getInternalName();
        int int49 = type44.getOpcode(19);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier20.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        java.lang.String str55 = type52.getDescriptor();
        int int57 = type52.getOpcode(160);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean61 = type59.equals((java.lang.Object) "(JVSZ)Z");
        int int62 = type59.getSize();
        boolean boolean63 = type52.equals((java.lang.Object) type59);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier20.newValue(type59);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(JVSZ)LJ;");
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier20.newValue(type66);
        int int68 = value67.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;;", (java.lang.Object) throwableArray19, value67);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str46, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str47, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Z" + "'", str55, "Z");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value32, value52, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value8, value15, value52);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str79 = type78.getDescriptor();
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter0.newValue(type78);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier84.newValue(type85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode81, value88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.newOperation(abstractInsnNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Z" + "'", str79, "Z");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "boolean" + "'", str86, "boolean");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier15.merge(value23, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        int int34 = type33.getSize();
        int int35 = type33.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type32, type33, type36, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        int int40 = type30.getSort();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier15.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier46 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier46.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier42.merge(value50, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        java.lang.String str60 = type57.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier42.newValue(type57);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier15.newValue(type57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        boolean boolean67 = type63.equals((java.lang.Object) 4);
        int int68 = type63.getSort();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier15.newValue(type63);
        java.lang.Class<?> wildcardClass70 = value69.getClass();
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass70);
        java.lang.String str72 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        int int74 = type73.getSort();
        int int75 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter0.newValue(type73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = basicInterpreter0.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(JVSZ)Z" + "'", str39, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str71, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str72, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        java.lang.Class<?> wildcardClass41 = basicVerifier0.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str44 = type43.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str44, "org.mockito.asm.tree.analysis.BasicVerifier");
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.String str10 = type0.getDescriptor();
        java.lang.String str11 = type0.getDescriptor();
        int int12 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)L(JVSZ)V;");
        int int2 = type1.getSort();
        java.lang.Throwable throwable4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)I", throwable4);
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException10.getSuppressed();
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value15);
        java.lang.Throwable[] throwableArray17 = analyzerException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = analyzerException16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = analyzerException16.getSuppressed();
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("float");
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException23);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException21);
        boolean boolean26 = type1.equals((java.lang.Object) analyzerException5);
        java.lang.String str27 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str27, "(JVSZ)L(JVSZ)V;");
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getClassName();
        int int4 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.Type");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value10);
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)F;", (java.lang.Throwable) analyzerException11);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray15 = analyzerException6.getSuppressed();
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass17 = analyzerException6.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type28.getSize();
        int int30 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type27, type28, type31, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray33);
        java.lang.Class<?> wildcardClass35 = type25.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = type42.getElementType();
        java.lang.String str45 = type42.getDescriptor();
        java.lang.Class<?> wildcardClass46 = type42.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = basicVerifier0.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(JVSZ)Z" + "'", str34, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str37, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str38, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)Z" + "'", str43, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "L(JVSZ)Z;" + "'", str45, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier29.merge(value37, value42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier25.merge(value43, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter9.copyOperation(abstractInsnNode24, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier52.merge(value60, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter8.merge(value49, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) analyzerException6, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;", (java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException70);
        java.lang.Throwable[] throwableArray72 = analyzerException71.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ");
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException76);
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value81);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = analyzerException82.getSuppressed();
        java.lang.Throwable[] throwableArray85 = analyzerException82.getSuppressed();
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value89);
        java.lang.Throwable[] throwableArray91 = analyzerException90.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException90);
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException90);
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.Throwable throwable95 = null;
        // The following exception was thrown during execution in test generation
        try {
            analyzerException82.addSuppressed(throwable95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier1.newValue(type5);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type14, type15, type18, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray20);
        java.lang.String str22 = type12.getDescriptor();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        java.lang.String str33 = type30.getDescriptor();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type29, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray34);
        int int40 = type5.getOpcode(19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier43.merge(value48, value53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.copyOperation(abstractInsnNode42, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter41.newValue(type56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) type5, value58);
        java.lang.Class<?> wildcardClass60 = type5.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass60);
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass60);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)F" + "'", str10, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)Z" + "'", str21, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Z" + "'", str22, "Z");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "V" + "'", str33, "V");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(ZV)Z" + "'", str35, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(ZV)LZ;" + "'", str36, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(ZV)Z" + "'", str37, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(ZV)F" + "'", str38, "(ZV)F");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org/mockito/asm/Type" + "'", str61, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/Type" + "'", str62, "org/mockito/asm/Type");
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        int int22 = type18.getSort();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = type27.getElementType();
        java.lang.String str30 = type27.getDescriptor();
        java.lang.Class<?> wildcardClass31 = type27.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str59 = type58.toString();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        int int65 = type64.getSize();
        int int66 = type64.getSize();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type63, type64, type67, type68 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray69);
        int int73 = type58.getSort();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier34.newValue(type58);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier34.newValue(type75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("LLZ;;", (java.lang.Object) str33, value76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.copyOperation(abstractInsnNode24, value76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L(JVSZ)Z;" + "'", str30, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str33, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)Z" + "'", str70, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)V" + "'", str71, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(JVSZ)V" + "'", str72, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value81);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        int int21 = type18.getSort();
        int int22 = type18.getSize();
        java.lang.Object obj23 = null;
        boolean boolean24 = type18.equals(obj23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter0.newValue(type18);
        java.lang.String str26 = type18.getDescriptor();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier27.newValue(type48);
        java.lang.String str50 = type48.getDescriptor();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        int int53 = type52.getSize();
        boolean boolean54 = type48.equals((java.lang.Object) type52);
        boolean boolean55 = type18.equals((java.lang.Object) type52);
        int int56 = type52.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "V" + "'", str50, "V");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type14.getOpcode(12);
        int int17 = type14.getDimensions();
        int int19 = type14.getOpcode(120);
        org.mockito.asm.Type type20 = type14.getElementType();
        java.lang.String str21 = type14.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 124 + "'", int19 == 124);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str27 = type26.getInternalName();
        int int29 = type26.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type26);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        java.util.List list34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value35 = basicVerifier0.naryOperation(abstractInsnNode33, list34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 177 + "'", int29 == 177);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier58.newValue(type63);
        java.lang.Class<?> wildcardClass65 = basicVerifier58.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value73);
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = analyzerException74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = analyzerException74.getSuppressed();
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value81);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass86 = analyzerException74.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        int int88 = type87.getSort();
        java.lang.String str89 = type87.getInternalName();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type87);
        int int92 = type87.getOpcode(183);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str67, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str68, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 187 + "'", int92 == 187);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(15);
        java.lang.String str5 = type1.toString();
        org.mockito.asm.Type[] typeArray7 = org.mockito.asm.Type.getArgumentTypes("JVSZ)L(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (ZV)Z: expected 18, but found I");
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        int int9 = type1.getSort();
        java.lang.String str10 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(JVSZ)Z;" + "'", str5, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(VSZ)L(JVSZ)Z;" + "'", str8, "(VSZ)L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "L(JVSZ)Z;" + "'", str10, "L(JVSZ)Z;");
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type26, type27, type30, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray32);
        int int34 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier9.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier36.merge(value44, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier36.newValue(type51);
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier9.newValue(type51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        boolean boolean61 = type57.equals((java.lang.Object) 4);
        int int62 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier9.newValue(type57);
        java.lang.Class<?> wildcardClass64 = value63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier0.newValue(type69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.newValue(type72);
        java.lang.String str74 = type72.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)Z" + "'", str33, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str65, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str66, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: boolean" + "'", str74, "org.mockito.asm.tree.analysis.AnalyzerException: boolean");
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        int int4 = type0.getSort();
        boolean boolean6 = type0.equals((java.lang.Object) (byte) 0);
        int int7 = type0.getSize();
        int int8 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str10, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str13, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier10.merge(value18, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier6.merge(value24, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException77);
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException70);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException63);
        analyzerException31.addSuppressed((java.lang.Throwable) analyzerException83);
        java.lang.String str85 = analyzerException83.toString();
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: F" + "'", str85, "org.mockito.asm.tree.analysis.AnalyzerException: F");
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter15.newValue(type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean23 = type18.equals((java.lang.Object) analyzerException22);
        int int25 = type18.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter15.newValue(type18);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str28 = type27.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter15.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter31.copyOperation(abstractInsnNode32, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter31.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter15.copyOperation(abstractInsnNode30, value47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter15.newValue(type50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.copyOperation(abstractInsnNode14, value52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 160 + "'", int25 == 160);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "D" + "'", str28, "D");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str51, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value52);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        int int10 = type9.getSort();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier5.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier37.merge(value55, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier61.merge(value69, value74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value35, value55, value75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value11, value18, value55);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter3.newValue(type79);
        int int81 = type79.getSort();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        int int85 = type83.getOpcode(48);
        boolean boolean86 = type79.equals((java.lang.Object) type83);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicVerifier", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        boolean boolean29 = type19.equals((java.lang.Object) analyzerException28);
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;");
        analyzerException34.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I", (java.lang.Throwable) analyzerException37);
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected LD;, but found .");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException42);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str9, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str10, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str11, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)LL(JVSZ)Z;;");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier3.merge(value8, value13);
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter1.copyOperation(abstractInsnNode2, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter1.copyOperation(abstractInsnNode16, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier44.merge(value52, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.merge(value41, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier67.newValue(type68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode61, value62, value66, value73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        int int79 = type78.getSize();
        int int80 = type78.getSize();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type77, type78, type81, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.Class<?> wildcardClass85 = type75.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type89);
        java.lang.Class<?> wildcardClass91 = value90.getClass();
        java.lang.String str92 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass91);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JVSZ)Z" + "'", str84, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str92, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        java.lang.String str29 = type23.toString();
        org.mockito.asm.Type type30 = type23.getElementType();
        int int32 = type30.getOpcode(134);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "L(JVSZ)Z;" + "'", str29, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 135 + "'", int32 == 135);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        java.lang.Throwable throwable2 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", throwable2);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException4.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("Lboolean;", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LL(JVSZ)Z;;", (java.lang.Throwable) analyzerException4);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier10 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str12 = type11.getClassName();
        int int13 = type11.getSize();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier10.newValue(type11);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier9.merge(value14, value19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.copyOperation(abstractInsnNode8, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter7.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier0.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str27 = type26.getInternalName();
        int int29 = type26.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier0.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier33.merge(value38, value43);
        boolean boolean45 = type32.equals((java.lang.Object) value43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.Type[] typeArray50 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray50);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter56.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException66);
        boolean boolean69 = type59.equals((java.lang.Object) analyzerException68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.newValue(type59);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter55.newValue(type59);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType("V");
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter55.newValue(type73);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter55.newValue(type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("J");
        java.lang.String str81 = type80.getInternalName();
        int int82 = type80.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter55.newValue(type80);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType("Z");
        int int87 = type85.getOpcode(101);
        java.lang.String str88 = type85.getClassName();
        int int89 = type85.getSize();
        int int91 = type85.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter55.newValue(type85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicVerifier0.copyOperation(abstractInsnNode54, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)Z" + "'", str27, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 177 + "'", int29 == 177);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)F" + "'", str51, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str52, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "void" + "'", str74, "void");
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "J" + "'", str81, "J");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 101 + "'", int87 == 101);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "boolean" + "'", str88, "boolean");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 155 + "'", int91 == 155);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        java.lang.Class<?> wildcardClass18 = basicInterpreter0.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int20 = type19.getSize();
        int int22 = type19.getOpcode(142);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int24 = type23.getSort();
        boolean boolean26 = type23.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        java.lang.String str27 = type23.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str29 = type28.getDescriptor();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.Type[] typeArray34 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray34);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 146 + "'", int22 == 146);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "S" + "'", str29, "S");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)F" + "'", str35, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)S" + "'", str36, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)Z" + "'", str37, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str38, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        int int5 = type2.getSize();
        int int6 = type2.getDimensions();
        org.mockito.asm.Type type7 = type2.getElementType();
        int int9 = type2.getOpcode(192);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        java.lang.Class<?> wildcardClass12 = type10.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        int int19 = type17.getOpcode(182);
        int int20 = type17.getSort();
        boolean boolean21 = type2.equals((java.lang.Object) type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier25.merge(value30, value35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter23.copyOperation(abstractInsnNode24, value36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str54 = type53.getClassName();
        int int55 = type53.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier43.merge(value51, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier39.merge(value57, value61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter23.copyOperation(abstractInsnNode38, value62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier66.merge(value74, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter22.merge(value63, value80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.VOID_TYPE;
        int int87 = type86.getSize();
        int int88 = type86.getSize();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type90 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray91 = new org.mockito.asm.Type[] { type85, type86, type89, type90 };
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray91);
        java.lang.Class<?> wildcardClass93 = type83.getClass();
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass93);
        java.lang.String str95 = type94.getDescriptor();
        int int96 = type94.getDimensions();
        java.lang.String str97 = type94.getClassName();
        org.mockito.asm.tree.analysis.Value value98 = basicInterpreter22.newValue(type94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException99 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) type17, value98);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L(JVSZ)Z;" + "'", str3, "L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 196 + "'", int9 == 196);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(JVSZ)Z" + "'", str92, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str95, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.mockito.asm.Type" + "'", str97, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;: expected V, but found I");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        java.lang.Class<?> wildcardClass1 = basicVerifier0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int3 = type2.getSize();
        int int4 = type2.getSize();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type45);
        java.lang.Class<?> wildcardClass50 = basicVerifier0.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getInternalName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("Z");
        int int8 = type6.getOpcode(101);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        boolean boolean13 = type9.equals((java.lang.Object) 4);
        boolean boolean15 = type9.equals((java.lang.Object) 193);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray25);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray25);
        int int31 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JVSZ)Z" + "'", str4, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)L(JVSZ)Z;" + "'", str30, "(JVSZ)L(JVSZ)Z;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)LZV)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int42 = type41.getSize();
        int int43 = type41.getSize();
        java.lang.String str44 = type41.getDescriptor();
        int int45 = type41.getSort();
        boolean boolean47 = type41.equals((java.lang.Object) (byte) 0);
        int int48 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier72 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = basicVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.Value value76 = basicVerifier53.merge(value71, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.copyOperation(abstractInsnNode50, value76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.copyOperation(abstractInsnNode79, value80);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value81);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier2.newValue(type3);
        java.lang.Class<?> wildcardClass7 = type3.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter9.newValue(type24);
        int int26 = value25.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)L(JVSZ)V;;", (java.lang.Object) wildcardClass7, value25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter30.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str46 = type45.getClassName();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier38.merge(value43, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.copyOperation(abstractInsnNode37, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter36.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter36.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str63 = type62.toString();
        int int65 = type62.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier57.newValue(type62);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int70 = type68.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter36.copyOperation(abstractInsnNode56, value71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) "(ZV)L(JVSZ)Z;", value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter30.copyOperation(abstractInsnNode33, value72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier78 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier79 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str81 = type80.getClassName();
        int int82 = type80.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier79.newValue(type80);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier84 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value88 = basicVerifier84.newValue(type85);
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier78.merge(value83, value88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter76.copyOperation(abstractInsnNode77, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter30.copyOperation(abstractInsnNode75, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I;", (java.lang.Object) type29, value89);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "V" + "'", str63, "V");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 175 + "'", int65 == 175);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "boolean" + "'", str86, "boolean");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(JVSZ)LLLZ;;;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int12 = type11.getSize();
        org.mockito.asm.Type type13 = type11.getElementType();
        java.lang.String str14 = type13.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/Type;" + "'", str14, "Lg/mockito/asm/Type;");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getInternalName();
        int int27 = type23.getOpcode(175);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier0.newValue(type23);
        java.lang.String str29 = type23.getInternalName();
        int int31 = type23.getOpcode(60);
        org.mockito.asm.Type type32 = type23.getElementType();
        int int33 = type23.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JVSZ)Z" + "'", str25, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 179 + "'", int27 == 179);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)Z" + "'", str29, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 64 + "'", int31 == 64);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier12.merge(value20, value25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier8.merge(value26, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Throwable[] throwableArray47 = analyzerException46.getSuppressed();
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException46);
        java.lang.Throwable[] throwableArray49 = analyzerException38.getSuppressed();
        java.lang.Throwable[] throwableArray50 = analyzerException38.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)V;", (java.lang.Throwable) analyzerException38);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Ldouble;", (java.lang.Throwable) analyzerException54);
        java.lang.String str56 = analyzerException54.toString();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: J" + "'", str56, "org.mockito.asm.tree.analysis.AnalyzerException: J");
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean6 = type1.equals((java.lang.Object) analyzerException5);
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value9);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException10);
        java.lang.Throwable[] throwableArray13 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier18.newValue(type19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        int int23 = type22.getSort();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier33 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str35 = type34.getClassName();
        int int36 = type34.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier33.newValue(type34);
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier27.merge(value32, value37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.copyOperation(abstractInsnNode26, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter25.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier18.newValue(type40);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier18.newValue(type43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)LZ;", (java.lang.Object) "(ZV)LZ;", value44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException45);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException46);
        java.lang.Throwable[] throwableArray48 = analyzerException46.getSuppressed();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value9 = basicVerifier0.newOperation(abstractInsnNode8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected Z, but found I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value10);
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter0.copyOperation(abstractInsnNode3, value10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter0.newValue(type14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type18 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        java.util.List list21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.naryOperation(abstractInsnNode20, list21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;" + "'", str2, "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;" + "'", str3, "LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier9.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier5.merge(value23, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)F");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException35);
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray38 = analyzerException35.getSuppressed();
        java.lang.Throwable[] throwableArray39 = analyzerException35.getSuppressed();
        java.lang.Throwable[] throwableArray40 = analyzerException35.getSuppressed();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier14.merge(value19, value24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter12.copyOperation(abstractInsnNode13, value25);
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter0.merge(value26, value27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier31.merge(value36, value41);
        boolean boolean43 = type30.equals((java.lang.Object) value41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.Type[] typeArray48 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray48);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newValue(type30);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType("L(JVSZ)Z;");
        java.lang.String str54 = type53.getDescriptor();
        java.lang.String str55 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.newValue(type53);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)F" + "'", str49, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str50, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L(JVSZ)Z;" + "'", str54, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(JVSZ)Z;" + "'", str55, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value56);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lfloat;", (java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass17 = analyzerException16.getClass();
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        boolean boolean38 = type28.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type28);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter0.newValue(type28);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str44 = type43.getDescriptor();
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.newValue(type43);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter0.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.Type[] typeArray56 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray56);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier48.newValue(type52);
        java.lang.String str59 = type52.toString();
        int int60 = type52.getSort();
        int int61 = type52.getSize();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        java.lang.Class<?> wildcardClass72 = type62.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        java.lang.String str77 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        boolean boolean78 = type52.equals((java.lang.Object) str77);
        java.lang.String str79 = type52.getClassName();
        java.lang.String str80 = type52.getClassName();
        java.lang.String str81 = type52.getDescriptor();
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.newValue(type52);
        java.lang.String str83 = type52.getClassName();
        int int84 = type52.getSort();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Ldouble;" + "'", str44, "Ldouble;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)F" + "'", str57, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "F" + "'", str59, "F");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str73, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str75, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str76, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str77, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "F" + "'", str81, "F");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;: expected (ZV)LZ;, but found .");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier0.newValue(type51);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier0.newValue(type54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier0.newValue(type57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getReturnType("L(JVSZ)V;");
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier0.newValue(type60);
        java.lang.Class<?> wildcardClass62 = basicVerifier0.getClass();
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str63, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str64, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type65);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        int int19 = type15.getSort();
        boolean boolean21 = type15.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter0.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier29.merge(value34, value39);
        boolean boolean41 = type28.equals((java.lang.Object) value39);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter0.copyOperation(abstractInsnNode26, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.copyOperation(abstractInsnNode43, value44);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value45);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray6 = analyzerException3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = analyzerException3.getSuppressed();
        java.lang.Class<?> wildcardClass8 = throwableArray7.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[Ljava/lang/Throwable;" + "'", str9, "[Ljava/lang/Throwable;");
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier5 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier5.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier5.merge(value13, value18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier1.merge(value19, value23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier25.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.merge(value19, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean50 = type45.equals((java.lang.Object) analyzerException49);
        int int52 = type45.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter42.newValue(type45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter42.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode41, value56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier62.merge(value67, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.copyOperation(abstractInsnNode61, value73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier76 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier76.newValue(type77);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier76.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter60.copyOperation(abstractInsnNode75, value82);
        boolean boolean84 = type59.equals((java.lang.Object) value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.newValue(type59);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        java.lang.String str88 = type87.toString();
        java.lang.String str89 = type87.getDescriptor();
        java.lang.String str90 = type87.getClassName();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.newValue(type87);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.newOperation(abstractInsnNode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 160 + "'", int52 == 160);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "D" + "'", str55, "D");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Z" + "'", str88, "Z");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Z" + "'", str89, "Z");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "boolean" + "'", str90, "boolean");
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier35.merge(value40, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean55 = type50.equals((java.lang.Object) analyzerException54);
        int int57 = type50.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter47.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        int int63 = type62.getSize();
        int int64 = type62.getSize();
        java.lang.String str65 = type62.getDescriptor();
        int int66 = type62.getSort();
        boolean boolean68 = type62.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter47.newValue(type62);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str71 = type70.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter47.newValue(type70);
        int int73 = value72.getSize();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier74.merge(value79, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.ternaryOperation(abstractInsnNode34, value40, value72, value79);
        java.lang.Class<?> wildcardClass87 = basicInterpreter0.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        java.lang.String str91 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str93 = type92.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 160 + "'", int57 == 160);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "D" + "'", str60, "D");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "V" + "'", str65, "V");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "C" + "'", str71, "C");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str88, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str90, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str91, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str93, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        int int19 = type17.getSize();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier16.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode15, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier30.merge(value35, value40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.copyOperation(abstractInsnNode29, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        boolean boolean47 = type43.equals((java.lang.Object) 4);
        java.lang.String str48 = type43.getClassName();
        java.lang.String str49 = type43.getClassName();
        java.lang.String str50 = type43.toString();
        java.lang.String str51 = type43.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter28.newValue(type43);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str55 = type54.getClassName();
        java.lang.String str56 = type54.toString();
        java.lang.String str57 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.copyOperation(abstractInsnNode27, value58);
        int int60 = value58.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(JVSZ)Z;" + "'", str56, "L(JVSZ)Z;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L(JVSZ)Z;" + "'", str57, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        int int8 = type5.getOpcode((int) 'a');
        int int9 = type5.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter10.newValue(type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean18 = type13.equals((java.lang.Object) analyzerException17);
        int int20 = type13.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter10.newValue(type13);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str23 = type22.toString();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter10.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("Z");
        java.lang.String str27 = type26.toString();
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.newValue(type26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)J", (java.lang.Object) int9, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected Z, but found F;", (java.lang.Throwable) analyzerException29);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException30);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 102 + "'", int8 == 102);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 160 + "'", int20 == 160);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "D" + "'", str23, "D");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LZ;" + "'", str27, "LZ;");
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (ZV)LZ;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type14 = type13.getElementType();
        int int16 = type13.getOpcode(195);
        int int18 = type13.getOpcode(60);
        java.lang.String str19 = type13.getInternalName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier0.newValue(type13);
        int int21 = type13.getSize();
        int int23 = type13.getOpcode(131077);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 199 + "'", int16 == 199);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)V" + "'", str19, "(JVSZ)V");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 131081 + "'", int23 == 131081);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type14.getOpcode(12);
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("(ZV)L(JVSZ)V;");
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray18);
        org.mockito.asm.Type type20 = type14.getElementType();
        java.lang.String str21 = type14.toString();
        int int22 = type14.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str19, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        boolean boolean14 = type1.equals((java.lang.Object) value12);
        java.lang.String str15 = type1.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier24.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.Type[] typeArray32 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray32);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier24.newValue(type28);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type37, type38, type41, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray43);
        java.lang.String str45 = type35.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        int int54 = type53.getSize();
        int int55 = type53.getSize();
        java.lang.String str56 = type53.getDescriptor();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type52, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray57);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray57);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray57);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray57);
        java.lang.String str64 = type1.getInternalName();
        int int65 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L(JVSZ)V;" + "'", str15, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)F" + "'", str33, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)Z" + "'", str44, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(ZV)Z" + "'", str58, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)LZ;" + "'", str59, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(ZV)F" + "'", str61, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)V" + "'", str62, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(ZV)L(JVSZ)V;" + "'", str63, "(ZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(JVSZ)V" + "'", str64, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type3, type4, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str16 = type15.getInternalName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter17.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter17.copyOperation(abstractInsnNode20, value27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter17.newValue(type31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Z", (java.lang.Object) str16, value32);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JVSZ)Z" + "'", str10, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        int int4 = type0.getSort();
        boolean boolean6 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass7 = type0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type47.getSize();
        int int49 = type47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean52 = type47.equals((java.lang.Object) analyzerException51);
        int int54 = type47.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter44.newValue(type47);
        int int57 = type47.getOpcode((int) (byte) -1);
        java.lang.String str58 = type47.toString();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier0.newValue(type47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier64.newValue(type65);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier60.merge(value68, value73);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier75.newValue(type76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        int int81 = type80.getSize();
        int int82 = type80.getSize();
        java.lang.String str83 = type80.getDescriptor();
        org.mockito.asm.Type[] typeArray84 = new org.mockito.asm.Type[] { type79, type80 };
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray84);
        org.mockito.asm.Type[] typeArray87 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray87);
        org.mockito.asm.tree.analysis.Value value89 = basicVerifier60.newValue(type76);
        int int91 = type76.getOpcode(256);
        java.lang.String str92 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value93 = basicVerifier0.newValue(type76);
        java.lang.Class<?> wildcardClass94 = value93.getClass();
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass94);
        java.lang.String str96 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass94);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 160 + "'", int54 == 160);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "V" + "'", str83, "V");
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(ZV)Z" + "'", str85, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JVSZ)Z" + "'", str88, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 256 + "'", int91 == 256);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "boolean" + "'", str92, "boolean");
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str95, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str96, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        java.lang.String str40 = type39.getInternalName();
        java.lang.String str41 = type39.getDescriptor();
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier44 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier44.merge(value49, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier56.newValue(type61);
        java.lang.Class<?> wildcardClass63 = basicVerifier56.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier44.newValue(type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier44.newValue(type67);
        java.lang.String str70 = type67.getClassName();
        int int71 = type67.getDimensions();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newValue(type67);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.newOperation(abstractInsnNode73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str36, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str40, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;" + "'", str41, "Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str42, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str68, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str70, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter6.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter6.newValue(type21);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter6.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str33 = type32.toString();
        int int35 = type32.getOpcode(170);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier27.newValue(type32);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int40 = type38.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter6.copyOperation(abstractInsnNode26, value41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Object) "(ZV)L(JVSZ)Z;", value42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter0.copyOperation(abstractInsnNode3, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        int int52 = type50.getSize();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier48.merge(value53, value58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter46.copyOperation(abstractInsnNode47, value59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.copyOperation(abstractInsnNode45, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier62.merge(value67, value72);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier74.newValue(type79);
        java.lang.Class<?> wildcardClass81 = basicVerifier74.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier62.newValue(type82);
        java.lang.String str84 = type82.getInternalName();
        java.lang.String str85 = type82.getInternalName();
        int int87 = type82.getOpcode(19);
        int int89 = type82.getOpcode(1024);
        java.lang.String str90 = type82.toString();
        org.mockito.asm.Type type91 = type82.getElementType();
        java.lang.String str92 = type91.getInternalName();
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.newValue(type91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        org.mockito.asm.tree.analysis.Value value95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.unaryOperation(abstractInsnNode94, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "V" + "'", str33, "V");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 175 + "'", int35 == 175);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str84, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str85, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 23 + "'", int87 == 23);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1028 + "'", int89 == 1028);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str90, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "g/mockito/asm/tree/analysis/BasicVerifier" + "'", str92, "g/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType("LLorg/mockito/asm/Type;;");
        org.mockito.asm.Type type4 = type3.getElementType();
        java.lang.String str5 = type3.getInternalName();
        boolean boolean6 = type1.equals((java.lang.Object) type3);
        java.lang.Class<?> wildcardClass7 = type3.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type" + "'", str5, "Lorg/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJ;;");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        boolean boolean8 = type4.equals((java.lang.Object) 4);
        boolean boolean10 = type4.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        int int30 = type29.getSize();
        int int31 = type29.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type28, type29, type32, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        int int36 = type26.getSort();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier11.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        int int44 = type43.getSize();
        int int45 = type43.getSize();
        java.lang.String str46 = type43.getDescriptor();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type42, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray47);
        boolean boolean50 = type4.equals((java.lang.Object) typeArray47);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str53 = type52.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.Type[] typeArray62 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray62);
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier54.newValue(type58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type52, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) type4, value64);
        boolean boolean68 = type4.equals((java.lang.Object) "(JVSZ)V");
        int int69 = type4.getSize();
        java.lang.String str70 = type4.toString();
        org.mockito.asm.Type[] typeArray72 = org.mockito.asm.Type.getArgumentTypes("(ZV)S");
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray72);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJ;" + "'", str2, "Lrg.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJ;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JVSZ)Z" + "'", str35, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(ZV)Z" + "'", str48, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "D" + "'", str53, "D");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(JVSZ)F" + "'", str63, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(ZV)Z" + "'", str73, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJ;" + "'", str74, "(ZV)Lrg.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)LJ;");
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier1.newValue(type6);
        java.lang.Class<?> wildcardClass8 = basicVerifier1.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(165);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type19, type20, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray25);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 165 + "'", int13 == 165);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JVSZ)Z" + "'", str26, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(JVSZ)V" + "'", str27, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)V" + "'", str28, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)S" + "'", str29, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str30, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)I" + "'", str31, "(JVSZ)I");
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier0.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type23);
        java.lang.String str26 = type23.getClassName();
        java.lang.String str27 = type23.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str24, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float" + "'", str26, "org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;" + "'", str27, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier24.merge(value29, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter22.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter22.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier15.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str42 = type41.getInternalName();
        int int44 = type41.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier15.newValue(type41);
        int int47 = type41.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter0.newValue(type41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        int int56 = type55.getSize();
        int int57 = type55.getSize();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type54, type55, type58, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray60);
        java.lang.Class<?> wildcardClass62 = type52.getClass();
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.newValue(type66);
        java.lang.String str68 = type66.getClassName();
        java.lang.String str69 = type66.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 177 + "'", int44 == 177);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 145 + "'", int47 == 145);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JVSZ)Z" + "'", str61, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str63, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str64, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.mockito.asm.Type" + "'", str68, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean21 = type19.equals((java.lang.Object) "(JVSZ)Z");
        int int22 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type29);
        java.lang.Class<?> wildcardClass31 = basicVerifier24.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str34 = type33.toString();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type33);
        int int36 = type33.getSize();
        org.mockito.asm.Type type37 = type33.getElementType();
        int int39 = type33.getOpcode(144);
        int int41 = type33.getOpcode(1033);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str32, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str34, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 148 + "'", int39 == 148);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1037 + "'", int41 == 1037);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicVerifier3.newValue(type8);
        java.lang.Class<?> wildcardClass10 = basicVerifier3.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        int int13 = type12.getSort();
        int int15 = type12.getOpcode(165);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str17 = type16.toString();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type21, type22, type25, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray27);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray27);
        boolean boolean34 = type1.equals((java.lang.Object) str33);
        int int35 = type1.getSort();
        java.lang.String str36 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 165 + "'", int15 == 165);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "V" + "'", str17, "V");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JVSZ)Z" + "'", str28, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)V" + "'", str29, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(JVSZ)V" + "'", str30, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(JVSZ)S" + "'", str31, "(JVSZ)S");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str32, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JVSZ)I" + "'", str33, "(JVSZ)I");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "D" + "'", str36, "D");
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        java.lang.Class<?> wildcardClass7 = basicVerifier0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str10 = type9.toString();
        java.lang.String str11 = type9.getClassName();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type17);
        java.lang.Class<?> wildcardClass19 = basicVerifier12.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)LL(JVSZ)Z;;");
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray22);
        int int25 = type9.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str10, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str11, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str23, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str24, "(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str2 = type1.toString();
        int int4 = type1.getOpcode(142);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        java.lang.String str8 = type5.getDescriptor();
        int int9 = type5.getSort();
        boolean boolean11 = type5.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean15 = type13.equals((java.lang.Object) "(JVSZ)Z");
        int int16 = type13.getSize();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        int int23 = type20.getSort();
        int int24 = type20.getSize();
        boolean boolean26 = type20.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type44, type45, type48, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray50);
        int int52 = type42.getSort();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int60 = type59.getSize();
        int int61 = type59.getSize();
        java.lang.String str62 = type59.getDescriptor();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type58, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray63);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray63);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray63);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray63);
        java.lang.String str69 = type5.getDescriptor();
        java.lang.String str70 = type5.getClassName();
        boolean boolean71 = type1.equals((java.lang.Object) type5);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LC;" + "'", str2, "LC;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 146 + "'", int4 == 146);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z" + "'", str18, "Z");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(ZV)Z" + "'", str64, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)Z" + "'", str66, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(ZV)Z" + "'", str67, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(ZV)V" + "'", str68, "(ZV)V");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "V" + "'", str69, "V");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "void" + "'", str70, "void");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)F;: expected org.mockito.asm.tree.analysis.AnalyzerException, but found D");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        int int44 = type42.getSize();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier41.newValue(type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier41.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter0.newValue(type47);
        java.lang.String str50 = type47.toString();
        java.lang.String str51 = type47.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str50, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V" + "'", str51, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        java.lang.String str8 = type5.getDescriptor();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type4, type5 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier17.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier13.merge(value31, value35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier37.merge(value55, value59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        int int72 = type70.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier65.merge(value73, value78);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier80 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = basicVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value84 = basicVerifier61.merge(value79, value83);
        int int85 = value84.getSize();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier13.merge(value55, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z", (java.lang.Object) 18, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Z");
        analyzerException87.addSuppressed((java.lang.Throwable) analyzerException89);
        java.lang.Throwable[] throwableArray91 = analyzerException89.getSuppressed();
        boolean boolean92 = type1.equals((java.lang.Object) analyzerException89);
        java.lang.String str93 = type1.toString();
        java.lang.String str94 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(ZV)Z" + "'", str10, "(ZV)Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Z" + "'", str93, "Z");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Z" + "'", str94, "Z");
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str10 = type9.getDescriptor();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.newValue(type9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier16.merge(value21, value26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter14.copyOperation(abstractInsnNode15, value27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier34.merge(value42, value47);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier30.merge(value48, value52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter14.copyOperation(abstractInsnNode29, value53);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier61 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getSize();
        org.mockito.asm.tree.analysis.Value value65 = basicVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier66 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        int int69 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier66.newValue(type67);
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier57.merge(value65, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Object) 183, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter13.merge(value54, value71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = basicVerifier0.unaryOperation(abstractInsnNode12, value54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "V" + "'", str10, "V");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        boolean boolean13 = type3.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("S");
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.newValue(type16);
        java.lang.Class<?> wildcardClass18 = type16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException5);
        java.lang.Throwable[] throwableArray7 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)B", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = type11.getElementType();
        java.lang.Class<?> wildcardClass14 = type11.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter19.newValue(type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        boolean boolean32 = type22.equals((java.lang.Object) analyzerException31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter19.newValue(type22);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier37.merge(value42, value47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter35.copyOperation(abstractInsnNode36, value48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier54.merge(value62, value67);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier69.newValue(type70);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier50.merge(value68, value72);
        int int74 = value73.getSize();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter18.merge(value48, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter76.newValue(type77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        boolean boolean89 = type79.equals((java.lang.Object) analyzerException88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter76.newValue(type79);
        int int91 = type79.getSize();
        boolean boolean93 = type79.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: F: expected 178, but found I");
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter18.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str17, value94);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException95);
        java.lang.String str97 = analyzerException95.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(JVSZ)Z" + "'", str12, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "boolean" + "'", str71, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I" + "'", str97, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected org/mockito/asm/Type, but found I");
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.getDescriptor();
        int int4 = type0.getSort();
        boolean boolean6 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass7 = type0.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type15);
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!");
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier11.merge(value19, value24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier7.merge(value25, value29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier40.newValue(type41);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier31.merge(value39, value44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.merge(value25, value45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) analyzerException4, value46);
        java.lang.Throwable[] throwableArray48 = analyzerException47.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I", (java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value52);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value56);
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException57);
        analyzerException47.addSuppressed((java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("LZ;");
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)L(JVSZ)V;: expected org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I, but found I");
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException65);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        java.lang.String str12 = type3.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)LLorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier3.merge(value11, value16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) 21, value17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier23.merge(value41, value45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException47);
        analyzerException19.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)F");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException52);
        analyzerException19.addSuppressed((java.lang.Throwable) analyzerException52);
        java.lang.Throwable[] throwableArray55 = analyzerException52.getSuppressed();
        java.lang.Throwable[] throwableArray56 = analyzerException52.getSuppressed();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        int int2 = type1.getDimensions();
        int int3 = type1.getDimensions();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = type5.getDescriptor();
        java.lang.String str7 = type5.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        int int5 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type13.getSize();
        int int15 = type13.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type12, type13, type16, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        java.lang.String str22 = type7.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        int int30 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier23.merge(value31, value36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        int int39 = type38.getSize();
        int int40 = type38.getSize();
        java.lang.String str41 = type38.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier23.newValue(type38);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier23.newValue(type44);
        java.lang.String str46 = type44.toString();
        boolean boolean47 = type7.equals((java.lang.Object) str46);
        int int48 = type7.getSort();
        int int50 = type7.getOpcode(8192);
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier0.newValue(type7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        java.util.List list53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value54 = basicVerifier0.naryOperation(abstractInsnNode52, list53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JVSZ)Z" + "'", str19, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)V" + "'", str20, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JVSZ)V" + "'", str21, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "V" + "'", str22, "V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "V" + "'", str41, "V");
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8197 + "'", int50 == 8197);
        org.junit.Assert.assertNull(value51);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(ZV)LZ;");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LZV)LZ;" + "'", str2, "LZV)LZ;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LZV)LZ;" + "'", str3, "LZV)LZ;");
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.Object obj16 = null;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str19 = type18.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray28);
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier20.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type18, value30);
        int int32 = value30.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V", obj16, value30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected 185, but found null", (java.lang.Throwable) analyzerException33);
        boolean boolean35 = type13.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue: expected 185, but found null");
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("(JVSZ)F");
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getDimensions();
        int int40 = type37.getDimensions();
        int int42 = type37.getOpcode(86);
        boolean boolean43 = type13.equals((java.lang.Object) 86);
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value48);
        java.lang.Throwable[] throwableArray50 = analyzerException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = analyzerException49.getSuppressed();
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value54);
        java.lang.Throwable[] throwableArray56 = analyzerException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = analyzerException55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = analyzerException55.getSuppressed();
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)Z;", (java.lang.Throwable) analyzerException60);
        java.lang.Throwable[] throwableArray65 = analyzerException60.getSuppressed();
        boolean boolean66 = type13.equals((java.lang.Object) analyzerException60);
        java.lang.String str67 = type13.getClassName();
        int int68 = type13.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "D" + "'", str19, "D");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(JVSZ)F" + "'", str29, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "L(JVSZ)F;" + "'", str38, "L(JVSZ)F;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 90 + "'", int42 == 90);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.Type" + "'", str67, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier1 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier1.newValue(type2);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier0.merge(value5, value10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier12.newValue(type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        int int17 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        int int24 = type23.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.copyOperation(abstractInsnNode27, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter26.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier19.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str46 = type45.getInternalName();
        int int48 = type45.getOpcode(173);
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier19.newValue(type45);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier52 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        int int61 = type59.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.Value value63 = basicVerifier52.merge(value57, value62);
        boolean boolean64 = type51.equals((java.lang.Object) value62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int67 = type65.getSize();
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray69);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier19.newValue(type51);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier0.merge(value18, value72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        int int76 = type75.getDimensions();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        int int81 = type80.getSize();
        int int82 = type80.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean85 = type80.equals((java.lang.Object) analyzerException84);
        int int87 = type80.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter77.newValue(type80);
        int int90 = type80.getOpcode((int) (byte) -1);
        org.mockito.asm.Type[] typeArray92 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray92);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray92);
        org.mockito.asm.Type[] typeArray96 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;");
        java.lang.String str97 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray96);
        org.mockito.asm.tree.analysis.Value value98 = basicVerifier0.newValue(type75);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 177 + "'", int48 == 177);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)F" + "'", str70, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)L(JVSZ)V;" + "'", str71, "(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 160 + "'", int87 == 160);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(JVSZ)V" + "'", str93, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str94, "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;" + "'", str97, "(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V;");
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null;");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        int int9 = type6.getSort();
        java.lang.String str10 = type6.getClassName();
        int int11 = type6.getSort();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str20 = type19.getClassName();
        int int21 = type19.getSize();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier18.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier12.merge(value17, value22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier24.newValue(type29);
        java.lang.Class<?> wildcardClass31 = basicVerifier24.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier12.newValue(type32);
        java.lang.String str34 = type32.getInternalName();
        java.lang.String str35 = type32.getInternalName();
        java.lang.String str36 = type32.getClassName();
        int int38 = type32.getOpcode(131);
        int int39 = type32.getSort();
        int int40 = type32.getSort();
        org.mockito.asm.Type type41 = type32.getElementType();
        int int42 = type41.getDimensions();
        java.lang.String str43 = type41.getDescriptor();
        int int44 = type41.getDimensions();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        java.lang.Class<?> wildcardClass46 = basicVerifier45.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier48.newValue(type49);
        int int52 = type49.getSort();
        int int53 = type49.getSize();
        boolean boolean55 = type49.equals((java.lang.Object) 0.0f);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier60 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        int int63 = type61.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier60.newValue(type61);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.tree.analysis.Value value70 = basicVerifier56.merge(value64, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type73, type74, type77, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray79);
        int int81 = type71.getSort();
        org.mockito.asm.tree.analysis.Value value82 = basicVerifier56.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier83 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str85 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = basicVerifier83.newValue(type84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type88 = org.mockito.asm.Type.VOID_TYPE;
        int int89 = type88.getSize();
        int int90 = type88.getSize();
        java.lang.String str91 = type88.getDescriptor();
        org.mockito.asm.Type[] typeArray92 = new org.mockito.asm.Type[] { type87, type88 };
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type84, typeArray92);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray92);
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray92);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray92);
        java.lang.String str97 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray92);
        java.lang.String str98 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray92);
        java.lang.String str99 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray92);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "short" + "'", str10, "short");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str34, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str35, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str36, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 135 + "'", int38 == 135);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str43, "Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(JVSZ)Z" + "'", str80, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "V" + "'", str91, "V");
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(ZV)Z" + "'", str93, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(ZV)Z" + "'", str94, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(ZV)Z" + "'", str95, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str96, "(ZV)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(ZV)Lg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str97, "(ZV)Lg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(ZV)S" + "'", str98, "(ZV)S");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I;" + "'", str99, "(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I;");
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier8.merge(value16, value21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier4.merge(value22, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 144, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException42);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Z", (java.lang.Throwable) analyzerException35);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException46);
        java.lang.Throwable[] throwableArray48 = analyzerException46.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;", (java.lang.Throwable) analyzerException46);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JVSZ)L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I");
        int int2 = type1.getDimensions();
        int int3 = type1.getSize();
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter2.newValue(type3);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter2.copyOperation(abstractInsnNode5, value12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter2.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter19.newValue(type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type22.getSize();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean27 = type22.equals((java.lang.Object) analyzerException26);
        int int29 = type22.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter19.newValue(type22);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int32 = type31.getSort();
        boolean boolean34 = type31.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: L(JVSZ)Z;: expected 1, but found I");
        int int36 = type31.getOpcode(148);
        int int38 = type31.getOpcode(197);
        java.lang.String str39 = type31.getDescriptor();
        java.lang.String str40 = type31.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter19.newValue(type31);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int46 = type45.getSize();
        int int47 = type45.getSize();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type44, type45, type48, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray50);
        java.lang.Class<?> wildcardClass52 = type42.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        int int57 = type56.getSort();
        org.mockito.asm.Type type58 = type56.getElementType();
        java.lang.String str59 = type58.getClassName();
        int int61 = type58.getOpcode(52);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter19.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier63.newValue(type68);
        java.lang.Class<?> wildcardClass70 = basicVerifier63.getClass();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        java.lang.String str72 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        java.lang.String str74 = type73.getClassName();
        java.lang.String str75 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter19.newValue(type73);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter19.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter2.copyOperation(abstractInsnNode18, value79);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = basicVerifier0.copyOperation(abstractInsnNode1, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 160 + "'", int29 == 160);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 148 + "'", int36 == 148);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 197 + "'", int38 == 197);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Z" + "'", str40, "Z");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JVSZ)Z" + "'", str51, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str53, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "g.mockito.asm.Type" + "'", str59, "g.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 56 + "'", int61 == 56);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str72, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str74, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.mockito.asm.tree.analysis.BasicVerifier" + "'", str75, "org.mockito.asm.tree.analysis.BasicVerifier");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = type39.getElementType();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter43.newValue(type44);
        java.lang.String str46 = type44.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier34.newValue(type44);
        java.lang.Class<?> wildcardClass48 = basicVerifier34.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.Class<?> wildcardClass61 = type51.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str65 = type64.getDescriptor();
        java.lang.String str66 = type64.getInternalName();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.newValue(type64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.newOperation(abstractInsnNode71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "V" + "'", str46, "V");
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str62, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str65, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type2, type3, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        java.lang.String str10 = type0.getDescriptor();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier13.newValue(type14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        java.lang.String str21 = type18.getDescriptor();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type17, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 142);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter29.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        int int33 = type32.getSize();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean37 = type32.equals((java.lang.Object) analyzerException36);
        int int39 = type32.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter29.newValue(type32);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str42 = type41.toString();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter29.newValue(type41);
        boolean boolean44 = type26.equals((java.lang.Object) value43);
        boolean boolean45 = type0.equals((java.lang.Object) type26);
        int int47 = type26.getOpcode(83);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "boolean" + "'", str1, "boolean");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(JVSZ)Z" + "'", str9, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "V" + "'", str21, "V");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(ZV)Z" + "'", str23, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(ZV)LZ;" + "'", str24, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 160 + "'", int39 == 160);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "D" + "'", str42, "D");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 83 + "'", int47 == 83);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        int int24 = type22.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier20.merge(value25, value30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier32.newValue(type37);
        java.lang.Class<?> wildcardClass39 = basicVerifier32.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier20.newValue(type40);
        java.lang.String str42 = type40.getInternalName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newValue(type40);
        java.lang.String str45 = type40.toString();
        int int47 = type40.getOpcode((int) ' ');
        int int48 = type40.getDimensions();
        int int49 = type40.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str42, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str43, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str45, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36 + "'", int47 == 36);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: V: expected 185, but found I");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type4, type5, type8, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray10);
        java.lang.String str12 = type2.getDescriptor();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier15.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        int int21 = type20.getSize();
        int int22 = type20.getSize();
        java.lang.String str23 = type20.getDescriptor();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type19, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray24);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray24);
        boolean boolean28 = type1.equals((java.lang.Object) str27);
        int int29 = type1.getDimensions();
        int int30 = type1.getDimensions();
        int int31 = type1.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type32 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JVSZ)Z" + "'", str11, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(ZV)Z" + "'", str25, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(ZV)LZ;" + "'", str26, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(ZV)Z" + "'", str27, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = type1.getElementType();
        java.lang.String str4 = type1.getDescriptor();
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int7 = type6.getDimensions();
        java.lang.String str8 = type6.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("double");
        java.lang.String str11 = type10.getDescriptor();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier14.merge(value19, value24);
        boolean boolean26 = type13.equals((java.lang.Object) value24);
        java.lang.String str27 = type13.toString();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        int int29 = type28.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("(ZV)LZ;");
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.Type[] typeArray36 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray36);
        java.lang.String str38 = type32.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        java.lang.String str47 = type44.getDescriptor();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type43, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray48);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray48);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray48);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray48);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray48);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JVSZ)Z" + "'", str2, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(JVSZ)Z;" + "'", str4, "L(JVSZ)Z;");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ldouble;" + "'", str11, "Ldouble;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "L(JVSZ)V;" + "'", str27, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)F" + "'", str37, "(JVSZ)F");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "V" + "'", str47, "V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(ZV)Z" + "'", str49, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(ZV)F" + "'", str50, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(ZV)LZ;" + "'", str51, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(ZV)F" + "'", str52, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(ZV)L(JVSZ)V;" + "'", str53, "(ZV)L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(ZV)Ldouble;" + "'", str54, "(ZV)Ldouble;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str55, "(ZV)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 144, but found I");
        java.lang.Class<?> wildcardClass2 = analyzerException1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LLrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;;");
        java.lang.String str2 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.BasicValue;;" + "'", str2, "LLrg.mockito.asm.tree.analysis.AnalyzerException: : expected org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.BasicValue;;");
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSize();
        boolean boolean3 = type0.equals((java.lang.Object) 0L);
        java.lang.String str4 = type0.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier7.merge(value12, value17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter5.copyOperation(abstractInsnNode6, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter5.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSize();
        boolean boolean27 = type23.equals((java.lang.Object) 4);
        boolean boolean29 = type23.equals((java.lang.Object) 193);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        int int35 = type34.getSize();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type33, type34, type37, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray39);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray39);
        int int46 = type0.getOpcode(146);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        int int51 = type50.getSize();
        int int52 = type50.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type49, type50, type53, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray55);
        java.lang.Class<?> wildcardClass57 = type47.getClass();
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        int int65 = type64.getSize();
        int int66 = type64.getSize();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type63, type64, type67, type68 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray69);
        java.lang.String str71 = type61.getDescriptor();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        int int80 = type79.getSize();
        int int81 = type79.getSize();
        java.lang.String str82 = type79.getDescriptor();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type78, type79 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray83);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray83);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V" + "'", str4, "V");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(JVSZ)Z" + "'", str40, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(JVSZ)V" + "'", str41, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(JVSZ)Z" + "'", str42, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(JVSZ)Z" + "'", str43, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(JVSZ)V" + "'", str44, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 151 + "'", int46 == 151);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)Z" + "'", str56, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str58, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JVSZ)Z" + "'", str70, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Z" + "'", str71, "Z");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "V" + "'", str82, "V");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(ZV)Z" + "'", str84, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(ZV)LZ;" + "'", str85, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(ZV)Z" + "'", str86, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)Lorg/mockito/asm/Type;" + "'", str87, "(ZV)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(ZV)V" + "'", str88, "(ZV)V");
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        int int7 = type5.getSize();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.Value value14 = basicVerifier0.merge(value8, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        int int19 = type18.getSize();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type17, type18, type21, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray23);
        int int25 = type15.getSort();
        org.mockito.asm.tree.analysis.Value value26 = basicVerifier0.newValue(type15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier27 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        int int39 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier27.merge(value35, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type42.getSize();
        int int44 = type42.getSize();
        java.lang.String str45 = type42.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier27.newValue(type42);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.newValue(type42);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier0.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier0.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier57 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getClassName();
        int int60 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier56.merge(value61, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter54.copyOperation(abstractInsnNode55, value67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicVerifier0.unaryOperation(abstractInsnNode53, value67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JVSZ)Z" + "'", str24, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        int int7 = type6.getSort();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier2.newValue(type6);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier19.merge(value27, value32);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier38 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier38.newValue(type39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier38.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier53 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = basicVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier34.merge(value52, value56);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier58 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier58.newValue(type59);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier62 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getSize();
        org.mockito.asm.tree.analysis.Value value66 = basicVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier58.merge(value66, value71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value32, value52, value72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value8, value15, value52);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("(ZV)F");
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.newValue(type76);
        int int78 = type76.getSort();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        boolean boolean81 = type76.equals((java.lang.Object) type80);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier82 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier82.newValue(type83);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type87 = org.mockito.asm.Type.VOID_TYPE;
        int int88 = type87.getSize();
        int int89 = type87.getSize();
        java.lang.String str90 = type87.getDescriptor();
        org.mockito.asm.Type[] typeArray91 = new org.mockito.asm.Type[] { type86, type87 };
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray91);
        org.mockito.asm.Type[] typeArray94 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray94);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray94);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "V" + "'", str90, "V");
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(ZV)Z" + "'", str92, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(JVSZ)Z" + "'", str95, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier;" + "'", str96, "(JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier;");
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type4 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z");
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter4.newValue(type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        boolean boolean17 = type7.equals((java.lang.Object) analyzerException16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type7);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter3.newValue(type7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier23 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        int int26 = type24.getSize();
        org.mockito.asm.tree.analysis.Value value27 = basicVerifier23.newValue(type24);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier22.merge(value27, value32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter20.copyOperation(abstractInsnNode21, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier39 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier39.newValue(type40);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier43 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier48 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        int int51 = type49.getSize();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier48.newValue(type49);
        org.mockito.asm.tree.analysis.Value value53 = basicVerifier39.merge(value47, value52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier54 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier54.newValue(type55);
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier35.merge(value53, value57);
        int int59 = value58.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter3.merge(value33, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 18, but found I;", (java.lang.Object) 56, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier69 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier70 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str72 = type71.getClassName();
        int int73 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicVerifier70.newValue(type71);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier75 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getClassName();
        int int78 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicVerifier75.newValue(type76);
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier69.merge(value74, value79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter67.copyOperation(abstractInsnNode68, value80);
        int int82 = value81.getSize();
        int int83 = value81.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)L(JVSZ)V;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I", value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        analyzerException61.addSuppressed((java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass87 = analyzerException84.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier18 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier18.merge(value23, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter16.copyOperation(abstractInsnNode17, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter16.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.copyOperation(abstractInsnNode15, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter0.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter0.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier40 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("D");
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier40.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str45 = type44.getClassName();
        int int46 = type44.getSize();
        org.mockito.asm.Type[] typeArray48 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray48);
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier40.newValue(type44);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type53, type54, type57, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        java.lang.String str61 = type51.getDescriptor();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("Z");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier64 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier64.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        int int70 = type69.getSize();
        int int71 = type69.getSize();
        java.lang.String str72 = type69.getDescriptor();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type68, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray73);
        java.lang.String str78 = type44.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("(ZV)D");
        boolean boolean81 = type44.equals((java.lang.Object) "(ZV)D");
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.newValue(type44);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(JVSZ)F" + "'", str49, "(JVSZ)F");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JVSZ)Z" + "'", str60, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Z" + "'", str61, "Z");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "V" + "'", str72, "V");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(ZV)Z" + "'", str74, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(ZV)LZ;" + "'", str75, "(ZV)LZ;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(ZV)Z" + "'", str76, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(ZV)F" + "'", str77, "(ZV)F");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)Lorg.mockito.asm.tree.analysis.AnalyzerException: Ldouble;: expected org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null, but found F;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier9 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getSize();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier14.newValue(type15);
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier8.merge(value13, value18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter6.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier26.merge(value34, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.Value value45 = basicVerifier22.merge(value40, value44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter6.copyOperation(abstractInsnNode21, value45);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = basicVerifier0.unaryOperation(abstractInsnNode5, value46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier3 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        int int6 = type4.getSize();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier3.newValue(type4);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier2.merge(value7, value12);
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.copyOperation(abstractInsnNode1, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier16 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier16.newValue(type17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier24 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str26 = type25.getClassName();
        int int27 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier20.merge(value28, value33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier16.merge(value34, value38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode15, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        int int50 = type48.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier41.merge(value46, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        int int57 = type56.getSize();
        int int58 = type56.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean61 = type56.equals((java.lang.Object) analyzerException60);
        int int63 = type56.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter53.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier67 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier73 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str75 = type74.getClassName();
        int int76 = type74.getSize();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier73.newValue(type74);
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier67.merge(value72, value77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter65.copyOperation(abstractInsnNode66, value78);
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter53.merge(value79, value80);
        int int82 = value79.getSize();
        int int83 = value79.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.merge(value52, value79);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.newOperation(abstractInsnNode85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 160 + "'", int63 == 160);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean3 = type1.equals((java.lang.Object) "(JVSZ)Z");
        int int4 = type1.getSize();
        java.lang.String str5 = type1.getClassName();
        int int6 = type1.getSize();
        int int8 = type1.getOpcode(1028);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1028 + "'", int8 == 1028);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.String str10 = type9.toString();
        int int11 = type9.getSort();
        java.lang.String str12 = type9.getDescriptor();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("(ZV)F");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray14);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier0.newValue(type9);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/AnalyzerException");
        int int20 = type19.getSize();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)S");
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int28 = type27.getSize();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean32 = type27.equals((java.lang.Object) analyzerException31);
        int int34 = type27.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter24.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier42 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.Value value47 = basicVerifier36.merge(value41, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier50.merge(value55, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter48.copyOperation(abstractInsnNode49, value61);
        int int63 = value62.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter24.merge(value47, value62);
        int int65 = value62.getSize();
        int int66 = value62.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("JVSZ)Lorg.mockito.asm.tree.analysis.BasicVerifier", (java.lang.Object) type19, value62);
        org.mockito.asm.tree.analysis.Value value68 = basicVerifier0.newValue(type19);
        java.lang.String str69 = type19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type70 = type19.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LLZ;;" + "'", str10, "LLZ;;");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LLZ;;" + "'", str12, "LLZ;;");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(ZV)LLZ;;" + "'", str15, "(ZV)LLZ;;");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str23, "(JVSZ)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 160 + "'", int34 == 160);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)Z: expected 183, but found I", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("JVSZ)Lorg/mockito/asm/Type", (java.lang.Throwable) analyzerException4);
        java.lang.String str6 = analyzerException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: JVSZ)Lorg/mockito/asm/Type" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException: JVSZ)Lorg/mockito/asm/Type");
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;: expected 21, but found I");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int3 = type1.getDimensions();
        int int4 = type1.getSort();
        java.lang.String str5 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type" + "'", str5, "rg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type");
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JVSZ)Z");
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = type5.getElementType();
        org.mockito.asm.tree.analysis.Value value8 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter9.newValue(type10);
        java.lang.String str12 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicVerifier0.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        int int18 = type17.getSize();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type16, type17, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        int int24 = type14.getSort();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier0.newValue(type14);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier34 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str36 = type35.getClassName();
        int int37 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicVerifier34.newValue(type35);
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier28.merge(value33, value38);
        boolean boolean40 = type27.equals((java.lang.Object) value38);
        java.lang.String str41 = type27.toString();
        java.lang.String str42 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicVerifier0.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        java.util.List list45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value46 = basicVerifier0.naryOperation(abstractInsnNode44, list45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(JVSZ)Z" + "'", str6, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JVSZ)Z" + "'", str23, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "L(JVSZ)V;" + "'", str41, "L(JVSZ)V;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "L(JVSZ)V;" + "'", str42, "L(JVSZ)V;");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("L(JVSZ)LLorg/mockito/asm/Type;;;");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("L(JVSZ)LJVSZ)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)F: expected 188, but found I;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int3 = type0.getOpcode(93);
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 95 + "'", int3 == 95);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        int int6 = type5.getSize();
        int int7 = type5.getSize();
        java.lang.String str8 = type5.getDescriptor();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type4, type5 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray9);
        org.mockito.asm.Type[] typeArray12 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray12);
        int int14 = type1.getSort();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str16 = type15.getClassName();
        int int17 = type15.getSize();
        boolean boolean19 = type15.equals((java.lang.Object) 4);
        boolean boolean21 = type15.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier22 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier26 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        int int29 = type27.getSize();
        org.mockito.asm.tree.analysis.Value value30 = basicVerifier26.newValue(type27);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier31 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str33 = type32.getClassName();
        int int34 = type32.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier31.newValue(type32);
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier22.merge(value30, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        int int41 = type40.getSize();
        int int42 = type40.getSize();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type39, type40, type43, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray45);
        int int47 = type37.getSort();
        org.mockito.asm.tree.analysis.Value value48 = basicVerifier22.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier49 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = basicVerifier49.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        int int55 = type54.getSize();
        int int56 = type54.getSize();
        java.lang.String str57 = type54.getDescriptor();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type53, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray58);
        boolean boolean61 = type15.equals((java.lang.Object) typeArray58);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray58);
        int int64 = type1.getOpcode(512);
        int int65 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(ZV)Z" + "'", str10, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(JVSZ)Z" + "'", str13, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(JVSZ)Z" + "'", str46, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "V" + "'", str57, "V");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(ZV)Z" + "'", str59, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(ZV)Z" + "'", str60, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(ZV)Z" + "'", str62, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 512 + "'", int64 == 512);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (JVSZ)V");
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value21 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier11.merge(value16, value21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter9.copyOperation(abstractInsnNode10, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter9.newValue(type24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("(JVSZ)Z");
        boolean boolean30 = type28.equals((java.lang.Object) "(JVSZ)Z");
        int int31 = type28.getSize();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter9.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter34.newValue(type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        boolean boolean47 = type37.equals((java.lang.Object) analyzerException46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter34.newValue(type37);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter9.newValue(type37);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier51.newValue(type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.SHORT_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.tree.analysis.Value value57 = basicVerifier51.newValue(type55);
        java.lang.Class<?> wildcardClass58 = basicVerifier51.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter9.newValue(type59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("C");
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter9.newValue(type63);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier65 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str67 = type66.getClassName();
        int int68 = type66.getSize();
        org.mockito.asm.tree.analysis.Value value69 = basicVerifier65.newValue(type66);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicVerifier65.newValue(type70);
        java.lang.Class<?> wildcardClass72 = basicVerifier65.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        java.lang.String str75 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter9.newValue(type76);
        int int78 = value77.getSize();
        int int79 = value77.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = basicVerifier0.unaryOperation(abstractInsnNode8, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicVerifier;" + "'", str60, "Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str74, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicVerifier" + "'", str75, "org/mockito/asm/tree/analysis/BasicVerifier");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(ZV)LJVSZ)Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        java.lang.Throwable[] throwableArray4 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: J: expected null, but found R", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (ZV)V", (java.lang.Throwable) analyzerException3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.tree.analysis.Value value4 = basicVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type12.getSize();
        int int14 = type12.getSize();
        java.lang.String str15 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type11, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray16);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        int int21 = type8.getSort();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier0.newValue(type8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter23.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getClassName();
        int int32 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value33 = basicVerifier29.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Object) 185, value33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter23.copyOperation(abstractInsnNode26, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        int int40 = type39.getSize();
        int int41 = type39.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean44 = type39.equals((java.lang.Object) analyzerException43);
        int int46 = type39.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter36.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter36.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        int int52 = type51.getSize();
        int int53 = type51.getSize();
        java.lang.String str54 = type51.getDescriptor();
        int int55 = type51.getSort();
        boolean boolean57 = type51.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter36.newValue(type51);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter36.newValue(type59);
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier0.merge(value33, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicVerifier0.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.toString();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier0.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        int int72 = type71.getSize();
        int int73 = type71.getSize();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type70, type71, type74, type75 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray76);
        java.lang.Class<?> wildcardClass78 = type68.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        int int82 = type81.getSort();
        java.lang.String str83 = type81.toString();
        java.lang.String str84 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = basicVerifier0.newValue(type81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicVerifier0.unaryOperation(abstractInsnNode86, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(ZV)Z" + "'", str17, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JVSZ)Z" + "'", str20, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 160 + "'", int46 == 160);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "D" + "'", str49, "D");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "B" + "'", str66, "B");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(JVSZ)Z" + "'", str77, "(JVSZ)Z");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str79, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str80, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.asm.Type" + "'", str84, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value4);
        java.lang.Throwable[] throwableArray6 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("(ZV)Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value12);
        java.lang.Throwable[] throwableArray14 = analyzerException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = analyzerException13.getSuppressed();
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 115, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = analyzerException19.getSuppressed();
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 88, but found null", (java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value28 = basicVerifier25.newValue(type26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        java.lang.String str33 = type30.getDescriptor();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type29, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray34);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(JVSZ)Z");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        int int39 = type26.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str41 = type40.getClassName();
        int int42 = type40.getSize();
        boolean boolean44 = type40.equals((java.lang.Object) 4);
        boolean boolean46 = type40.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier47 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = basicVerifier47.newValue(type48);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier51 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier51.newValue(type52);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier56 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str58 = type57.getClassName();
        int int59 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicVerifier56.newValue(type57);
        org.mockito.asm.tree.analysis.Value value61 = basicVerifier47.merge(value55, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        int int66 = type65.getSize();
        int int67 = type65.getSize();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type64, type65, type68, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray70);
        int int72 = type62.getSort();
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier47.newValue(type62);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        int int80 = type79.getSize();
        int int81 = type79.getSize();
        java.lang.String str82 = type79.getDescriptor();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type78, type79 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray83);
        boolean boolean86 = type40.equals((java.lang.Object) typeArray83);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray83);
        int int89 = type26.getOpcode(512);
        int int90 = type26.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)V", (java.lang.Throwable) analyzerException93);
        boolean boolean95 = type26.equals((java.lang.Object) analyzerException93);
        java.lang.Throwable[] throwableArray96 = analyzerException93.getSuppressed();
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException93);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException93);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "V" + "'", str33, "V");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(ZV)Z" + "'", str35, "(ZV)Z");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)Z" + "'", str38, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JVSZ)Z" + "'", str71, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "V" + "'", str82, "V");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(ZV)Z" + "'", str84, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(ZV)Z" + "'", str85, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(ZV)Z" + "'", str87, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 512 + "'", int89 == 512);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(ZV)V");
        int int3 = type2.getDimensions();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier7 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str9 = type8.getClassName();
        int int10 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value11 = basicVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier12 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str14 = type13.getClassName();
        int int15 = type13.getSize();
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier12.newValue(type13);
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier6.merge(value11, value16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.copyOperation(abstractInsnNode5, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter4.newValue(type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        boolean boolean25 = type21.equals((java.lang.Object) 4);
        boolean boolean27 = type21.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier28 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = basicVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier32 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str34 = type33.getClassName();
        int int35 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier37 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str39 = type38.getClassName();
        int int40 = type38.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier28.merge(value36, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type46.getSize();
        int int48 = type46.getSize();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type45, type46, type49, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray51);
        int int53 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier28.newValue(type43);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier55 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = basicVerifier55.newValue(type56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type60.getSize();
        int int62 = type60.getSize();
        java.lang.String str63 = type60.getDescriptor();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type59, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray64);
        boolean boolean67 = type21.equals((java.lang.Object) typeArray64);
        int int68 = type21.getSize();
        int int69 = type21.getSort();
        java.lang.String str70 = type21.toString();
        int int71 = type21.getSort();
        int int72 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter4.newValue(type21);
        int int74 = value73.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: short;", (java.lang.Object) int3, value73);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "boolean" + "'", str39, "boolean");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(JVSZ)Z" + "'", str52, "(JVSZ)Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "V" + "'", str63, "V");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(ZV)Z" + "'", str65, "(ZV)Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(ZV)Z" + "'", str66, "(ZV)Z");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.Type type2 = type1.getElementType();
        int int4 = type1.getOpcode(195);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 199 + "'", int4 == 199);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier14 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier15 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str17 = type16.getClassName();
        int int18 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value19 = basicVerifier15.newValue(type16);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier20 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str22 = type21.getClassName();
        int int23 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier20.newValue(type21);
        org.mockito.asm.tree.analysis.Value value25 = basicVerifier14.merge(value19, value24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter12.copyOperation(abstractInsnNode13, value25);
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter0.merge(value26, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("void");
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value35);
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value39);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException40);
        java.lang.Throwable[] throwableArray42 = analyzerException36.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("(JVSZ)S", (java.lang.Throwable) analyzerException36);
        analyzerException31.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException55);
        java.lang.Throwable[] throwableArray57 = analyzerException43.getSuppressed();
        java.lang.Class<?> wildcardClass58 = throwableArray57.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.newValue(type59);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier0 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.tree.analysis.Value value3 = basicVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier4 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.tree.analysis.Value value7 = basicVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier8 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        org.mockito.asm.tree.analysis.Value value12 = basicVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier13 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str15 = type14.getClassName();
        int int16 = type14.getSize();
        org.mockito.asm.tree.analysis.Value value17 = basicVerifier13.newValue(type14);
        org.mockito.asm.tree.analysis.Value value18 = basicVerifier4.merge(value12, value17);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier19 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.tree.analysis.Value value22 = basicVerifier19.newValue(type20);
        org.mockito.asm.tree.analysis.Value value23 = basicVerifier0.merge(value18, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSize();
        int int32 = type30.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type29, type30, type33, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray35);
        int int39 = type24.getSort();
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier0.newValue(type24);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicVerifier0.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = basicVerifier0.newOperation(abstractInsnNode43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(JVSZ)Z" + "'", str36, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(JVSZ)V" + "'", str37, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(JVSZ)V" + "'", str38, "(JVSZ)V");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("rg.mockito.asm.tree.analysis.AnalyzerException: Lchar");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value2 = basicInterpreter0.newValue(type1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        boolean boolean8 = type3.equals((java.lang.Object) analyzerException7);
        int int10 = type3.getOpcode(155);
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type3);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSize();
        java.lang.String str18 = type15.getDescriptor();
        int int19 = type15.getSort();
        boolean boolean21 = type15.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.newValue(type15);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter0.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("(JVSZ)V");
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier29 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier35 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str37 = type36.getClassName();
        int int38 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier35.newValue(type36);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier29.merge(value34, value39);
        boolean boolean41 = type28.equals((java.lang.Object) value39);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter0.copyOperation(abstractInsnNode26, value39);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str44 = type43.toString();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        int int50 = type49.getSize();
        int int51 = type49.getSize();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type48, type49, type52, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray54);
        java.lang.String str58 = type43.toString();
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier59 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = basicVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier63 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str65 = type64.getClassName();
        int int66 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value67 = basicVerifier63.newValue(type64);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier68 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str70 = type69.getClassName();
        int int71 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicVerifier68.newValue(type69);
        org.mockito.asm.tree.analysis.Value value73 = basicVerifier59.merge(value67, value72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        int int75 = type74.getSize();
        int int76 = type74.getSize();
        java.lang.String str77 = type74.getDescriptor();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier59.newValue(type74);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("V");
        org.mockito.asm.tree.analysis.Value value81 = basicVerifier59.newValue(type80);
        java.lang.String str82 = type80.toString();
        boolean boolean83 = type43.equals((java.lang.Object) str82);
        java.lang.String str84 = type43.getClassName();
        int int85 = type43.getSize();
        int int86 = type43.getSort();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode88, value89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.newOperation(abstractInsnNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 160 + "'", int10 == 160);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(JVSZ)Z" + "'", str55, "(JVSZ)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(JVSZ)V" + "'", str56, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JVSZ)V" + "'", str57, "(JVSZ)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "V" + "'", str58, "V");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "V" + "'", str77, "V");
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "V" + "'", str82, "V");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "void" + "'", str84, "void");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNull(value90);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier2 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.tree.analysis.Value value5 = basicVerifier2.newValue(type3);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier6 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        int int9 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value10 = basicVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier11 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSize();
        org.mockito.asm.tree.analysis.Value value15 = basicVerifier11.newValue(type12);
        org.mockito.asm.tree.analysis.Value value16 = basicVerifier2.merge(value10, value15);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier17 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicVerifier17.newValue(type18);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier21 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value24 = basicVerifier21.newValue(type22);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier25 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSize();
        org.mockito.asm.tree.analysis.Value value29 = basicVerifier25.newValue(type26);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier30 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getClassName();
        int int33 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value34 = basicVerifier30.newValue(type31);
        org.mockito.asm.tree.analysis.Value value35 = basicVerifier21.merge(value29, value34);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier36 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = basicVerifier36.newValue(type37);
        org.mockito.asm.tree.analysis.Value value40 = basicVerifier17.merge(value35, value39);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier41 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicVerifier41.newValue(type42);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier45 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str47 = type46.getClassName();
        int int48 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier50 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str52 = type51.getClassName();
        int int53 = type51.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.Value value55 = basicVerifier41.merge(value49, value54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value15, value35, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter58.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 88, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 115, but found null", (java.lang.Throwable) analyzerException68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException68);
        boolean boolean71 = type61.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type61);
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.BasicVerifier basicVerifier74 = new org.mockito.asm.tree.analysis.BasicVerifier();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str76 = type75.getClassName();
        int int77 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicVerifier74.newValue(type75);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicVerifier74.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.ternaryOperation(abstractInsnNode57, value72, value73, value80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("(ZV)Lckito/asm/tree/analysis/BasicVerifier;");
        int int85 = type83.getOpcode(49);
        org.mockito.asm.Type type86 = type83.getElementType();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newValue(type86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 53 + "'", int85 == 53);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
    }
}


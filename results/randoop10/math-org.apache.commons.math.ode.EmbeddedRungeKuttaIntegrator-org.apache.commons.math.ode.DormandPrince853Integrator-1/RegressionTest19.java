import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        dormandPrince853Integrator19.setMinReduction((double) (short) -1);
        dormandPrince853Integrator19.setInitialStepSize((double) (byte) 1);
        java.lang.String str25 = dormandPrince853Integrator19.getName();
        java.lang.String str26 = dormandPrince853Integrator19.getName();
        double double27 = dormandPrince853Integrator19.getCurrentStepStart();
        dormandPrince853Integrator19.setInitialStepSize((-1.0d));
        java.lang.String str30 = dormandPrince853Integrator19.getName();
        dormandPrince853Integrator19.setMinReduction((double) ' ');
        dormandPrince853Integrator19.setInitialStepSize((double) (byte) -1);
        double double35 = dormandPrince853Integrator19.getMaxGrowth();
        java.lang.String str36 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator19.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler37);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (-1L));
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getMinStep();
        double double17 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getSafety();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 97.0d + "'", double9 == 97.0d);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray8);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(7.211102550927978d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        double double11 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        double[] doubleArray2 = null;
        double[] doubleArray14 = new double[] { 58.26662852782886d, 9.486832980505138d, 1.0f, 8.0d, 8.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray21, doubleArray22);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray26, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray22, doubleArray27);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray32, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray27, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1.0f), doubleArray14, doubleArray32);
        double[] doubleArray37 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 2.0932702787842112d, doubleArray14, doubleArray37);
        double[] doubleArray41 = null;
        double[] doubleArray50 = new double[] {};
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray50, doubleArray51);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray51, doubleArray56);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray56, doubleArray61);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray71, doubleArray72);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray76, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray72, doubleArray77);
        double[] doubleArray82 = new double[] {};
        double[] doubleArray83 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray82, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray77, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray56, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (byte) -1, doubleArray41, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, 10.0d, doubleArray37, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, 33.46640106136302d, doubleArray2, doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[58.26662852782886, 9.486832980505138, 1.0, 8.0, 8.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray23);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException24);
        java.lang.Throwable[] throwableArray26 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray30 = integratorException29.getArguments();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(28.284271247461902d, (double) 0.0f, (double) 10L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (short) 0, (double) (-1.0f), (double) (short) -1);
        java.lang.String str17 = dormandPrince853Integrator16.getName();
        double double18 = dormandPrince853Integrator16.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        double double25 = dormandPrince853Integrator23.getMinStep();
        dormandPrince853Integrator23.setSafety((double) '#');
        double double28 = dormandPrince853Integrator23.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double34 = dormandPrince853Integrator33.getSafety();
        double double35 = dormandPrince853Integrator33.getMinStep();
        dormandPrince853Integrator33.setSafety((double) '#');
        double double38 = dormandPrince853Integrator33.getCurrentStepStart();
        double double39 = dormandPrince853Integrator33.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator33.getStepHandler();
        dormandPrince853Integrator23.setStepHandler(stepHandler40);
        dormandPrince853Integrator16.setStepHandler(stepHandler40);
        dormandPrince853Integrator4.setStepHandler(stepHandler40);
        java.lang.String str44 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9d + "'", double34 == 0.9d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) (-1), (double) (short) 100, 0.43558771746928626d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        dormandPrince853Integrator4.setSafety(32.0d);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 100.0d, (double) (byte) 10, (double) 100);
        dormandPrince853Integrator4.setMinReduction((-1.0d));
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 1.0f, (double) (-1L), (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 9.486832980505138d, 55.71355310873648d, (int) (short) 0);
        dormandPrince853Integrator4.setSafety(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        java.lang.String str11 = integratorException10.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray13 = integratorException10.getArguments();
        java.lang.Object[] objArray14 = integratorException10.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str11, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 1, (double) (-1L), (double) (short) 0);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 23.673797188510488d, (double) (byte) -1, (int) (short) 10);
        dormandPrince853Integrator4.setMinReduction((double) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray15 = derivativeException12.getSuppressed();
        java.lang.Object[] objArray16 = derivativeException12.getArguments();
        java.lang.Object[] objArray17 = derivativeException12.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.Throwable[] throwableArray20 = derivativeException19.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", strArray11);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        dormandPrince853Integrator4.setInitialStepSize(55.71355310873648d);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        int int21 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setMaxGrowth((double) 0L);
        dormandPrince853Integrator20.setMaxGrowth((double) 8);
        double double26 = dormandPrince853Integrator20.getMinReduction();
        double double27 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        dormandPrince853Integrator20.setMaxGrowth((double) 100.0f);
        dormandPrince853Integrator20.setMaxGrowth(3.7470125727948562d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.2d + "'", double26 == 0.2d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9486832980505138d + "'", double27 == 0.9486832980505138d);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray23, doubleArray44);
        double[] doubleArray49 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 40.0d, doubleArray44, doubleArray49);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray64, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray65, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray57, doubleArray70);
        double[] doubleArray74 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) (short) 10, doubleArray57, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (short) 10, doubleArray49, doubleArray74);
        int int77 = dormandPrince853Integrator76.getOrder();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(2.0870738306760646d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (short) 100, (double) (short) 10, (-1));
        int int18 = dormandPrince853Integrator4.getOrder();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        double double20 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(3.138288992714996d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        double double25 = dormandPrince853Integrator4.getSafety();
        double double26 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        dormandPrince853Integrator31.setMinReduction((double) (short) -1);
        dormandPrince853Integrator31.setInitialStepSize((double) (byte) 1);
        java.lang.String str37 = dormandPrince853Integrator31.getName();
        int int38 = dormandPrince853Integrator31.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator43.setMinReduction((double) 1);
        dormandPrince853Integrator43.setMaxGrowth((double) (byte) -1);
        double double48 = dormandPrince853Integrator43.getMaxGrowth();
        int int49 = dormandPrince853Integrator43.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator31.setStepHandler(stepHandler50);
        double double52 = dormandPrince853Integrator31.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler53);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.1622776601683795d + "'", double26 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(stepHandler50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9d + "'", double52 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler53);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.94427190999916d, (double) (byte) 100, 3.1622776601683795d, 0.0d);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        dormandPrince853Integrator20.setMinReduction((double) (short) -1);
        dormandPrince853Integrator20.setInitialStepSize((double) (byte) 1);
        java.lang.String str26 = dormandPrince853Integrator20.getName();
        java.lang.String str27 = dormandPrince853Integrator20.getName();
        double double28 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setInitialStepSize((-1.0d));
        java.lang.String str31 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler32);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 0.0d, (double) 0L, 8);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(8.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        java.lang.String str17 = integratorException16.getPattern();
        java.lang.Throwable[] throwableArray18 = integratorException16.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException(throwable20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException21);
        java.lang.String str23 = integratorException21.getPattern();
        java.lang.Throwable[] throwableArray24 = integratorException21.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException21);
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException21);
        java.lang.Throwable[] throwableArray28 = derivativeException27.getSuppressed();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str17, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray9);
        java.lang.String str11 = integratorException10.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray15 = integratorException10.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray15);
        java.lang.Throwable[] throwableArray17 = integratorException16.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.IntegratorException integratorException1 = new org.apache.commons.math.ode.IntegratorException(throwable0);
        java.lang.String str2 = integratorException1.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException1);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException1);
        java.lang.Throwable[] throwableArray5 = derivativeException4.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray7 = derivativeException4.getArguments();
        java.lang.String str8 = derivativeException4.getPattern();
        java.lang.Object[] objArray9 = derivativeException4.getArguments();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '4', (double) 0.0f, 1);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(62.30055074422899d);
        double double15 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException(throwable13);
        java.lang.String[] strArray17 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        java.lang.Throwable[] throwableArray19 = derivativeException18.getSuppressed();
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException18);
        java.lang.String str21 = derivativeException18.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException22);
        java.lang.Object[] objArray24 = derivativeException22.getArguments();
        java.lang.Throwable[] throwableArray25 = derivativeException22.getSuppressed();
        java.lang.Object[] objArray26 = derivativeException22.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException22);
        java.lang.Object[] objArray28 = derivativeException22.getArguments();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (-1.0d), (double) 0, (double) ' ');
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 8);
        dormandPrince853Integrator4.setMinReduction(16.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 10.0f);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(5.623413251903491d);
        org.junit.Assert.assertNotNull(stepHandler5);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(17.88854381999832d, 9.485494822646622d, 7.113117640155691d, 28.284271247461902d);
        dormandPrince853Integrator4.setInitialStepSize(55.71355310873648d);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0, (double) '#', (double) (byte) 10);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(16.0d, (double) (byte) 10, 33.46640106136302d, 0.0d);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray7, doubleArray12);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray12, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setSafety((double) (short) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction24, 0.0d, (double) 1, 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double34 = dormandPrince853Integrator33.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator33.addSwitchingFunction(switchingFunction35, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator33.getStepHandler();
        int int41 = dormandPrince853Integrator33.getOrder();
        double double42 = dormandPrince853Integrator33.getCurrentStepStart();
        int int43 = dormandPrince853Integrator33.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator33.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler44);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction46, 17.88854381999832d, 0.43558771746928626d, (int) (byte) -1);
        int int51 = dormandPrince853Integrator20.getOrder();
        double double52 = dormandPrince853Integrator20.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.2d + "'", double52 == 0.2d);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.Throwable[] throwableArray18 = integratorException17.getSuppressed();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        int int16 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray25, doubleArray26);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray30, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray26, doubleArray31);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray31, doubleArray36);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray44, doubleArray45);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray51, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray52, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray44, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray36, doubleArray57);
        double double62 = dormandPrince853Integrator61.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler63 = dormandPrince853Integrator61.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction64 = null;
        dormandPrince853Integrator61.addSwitchingFunction(switchingFunction64, (double) 100L, 31.622776601683793d, 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double74 = dormandPrince853Integrator73.getSafety();
        dormandPrince853Integrator73.setMinReduction((double) (short) -1);
        dormandPrince853Integrator73.setInitialStepSize((double) (byte) 1);
        java.lang.String str79 = dormandPrince853Integrator73.getName();
        int int80 = dormandPrince853Integrator73.getOrder();
        java.lang.String str81 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction((double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler84 = dormandPrince853Integrator73.getStepHandler();
        dormandPrince853Integrator61.setStepHandler(stepHandler84);
        dormandPrince853Integrator4.setStepHandler(stepHandler84);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction87 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction87, 5.623413251903491d, (double) '4', (int) 'a');
        java.lang.String str92 = dormandPrince853Integrator4.getName();
        double double93 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler94 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler94);
        org.apache.commons.math.ode.StepHandler stepHandler96 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(stepHandler63);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9d + "'", double74 == 0.9d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str81, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler84);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str92, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.2d + "'", double93 == 0.2d);
        org.junit.Assert.assertNull(stepHandler96);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, 10.059467437463484d, 0.43558771746928626d, 7.113117640155691d);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        double double7 = dormandPrince853Integrator4.getSafety();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray15 = integratorException14.getSuppressed();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray23);
        integratorException14.addSuppressed((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        derivativeException8.addSuppressed((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException26);
        java.lang.Object[] objArray29 = integratorException26.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException26);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 10.0d, (double) '4', Double.NaN);
        int int5 = dormandPrince853Integrator4.getOrder();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        int int46 = dormandPrince853Integrator44.getOrder();
        double double47 = dormandPrince853Integrator44.getMaxGrowth();
        double double48 = dormandPrince853Integrator44.getCurrentStepStart();
        dormandPrince853Integrator44.setMaxGrowth((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setMaxGrowth(100.0d);
        double double54 = dormandPrince853Integrator44.getMinStep();
        double double55 = dormandPrince853Integrator44.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction56, 5.916079783099616d, 3.7470125727948562d, 100);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety(0.9d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int19 = dormandPrince853Integrator18.getOrder();
        double double20 = dormandPrince853Integrator18.getSafety();
        dormandPrince853Integrator18.setSafety((double) (-1));
        int int23 = dormandPrince853Integrator18.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setMaxGrowth(9.848857801796104d);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(stepHandler24);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException23);
        java.lang.String str25 = derivativeException24.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str25, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        java.lang.Object[] objArray10 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray10);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        int int14 = dormandPrince853Integrator4.getOrder();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray16 = integratorException8.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety(55.71355310873648d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) (byte) 0, (double) (byte) 0, (int) (short) 10);
        dormandPrince853Integrator4.setMaxGrowth((double) 1);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth(0.9d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        int int13 = dormandPrince853Integrator11.getOrder();
        int int14 = dormandPrince853Integrator11.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMinStep();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(32.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.43558771746928626d, 100.0d, 22.98848884907765d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        dormandPrince853Integrator4.setInitialStepSize(55.71355310873648d);
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (short) 100, 0.4472135954999579d, (int) ' ');
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(1.755012902585341d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray26, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray21, doubleArray26);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray26, doubleArray47);
        double double52 = dormandPrince853Integrator51.getCurrentStepStart();
        double double53 = dormandPrince853Integrator51.getSafety();
        java.lang.String str54 = dormandPrince853Integrator51.getName();
        java.lang.String str55 = dormandPrince853Integrator51.getName();
        java.lang.String str56 = dormandPrince853Integrator51.getName();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator51.getStepHandler();
        java.lang.String str58 = dormandPrince853Integrator51.getName();
        org.apache.commons.math.ode.StepHandler stepHandler59 = dormandPrince853Integrator51.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler59);
        java.lang.String str61 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str58, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray50, doubleArray51);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray58, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray50, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray29, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray19, doubleArray29);
        int int69 = dormandPrince853Integrator68.getOrder();
        double double70 = dormandPrince853Integrator68.getMinStep();
        double double71 = dormandPrince853Integrator68.getCurrentSignedStepsize();
        double double72 = dormandPrince853Integrator68.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.9486832980505138d + "'", double71 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.9486832980505138d + "'", double72 == 0.9486832980505138d);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray10, doubleArray11);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray11, doubleArray16);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray21, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray16, doubleArray21);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        double[] doubleArray48 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray44, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) 10, doubleArray21, doubleArray44);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray64, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray65, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray57, doubleArray70);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray79 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray78, doubleArray79);
        double[] doubleArray85 = new double[] {};
        double[] doubleArray86 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray85, doubleArray86);
        double[] doubleArray90 = new double[] {};
        double[] doubleArray91 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray90, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray86, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray78, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray70, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(16.0d, (double) '#', doubleArray21, doubleArray91);
        dormandPrince853Integrator96.setMinReduction(5.916079783099616d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getSafety();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (-1), (double) (short) 0, 0);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass16 = stepHandler15.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        double double10 = dormandPrince853Integrator4.getSafety();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 0L, (double) (short) 0, (int) (byte) 100);
        dormandPrince853Integrator4.setSafety(35.0d);
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 16.0d, 0.0d, 40.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (short) 10, 3.1622776601683795d, (double) (byte) 0);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler11);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler11);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 3.1622776601683795d, (double) (byte) 0, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (-1L));
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 10L);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(100.0d);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, 0.43558771746928626d, (double) 'a');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction20, (double) ' ', 0.9486832980505138d, (int) '#');
        double double25 = dormandPrince853Integrator19.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction26, (double) 8, (-1.0d), (int) (byte) 0);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator19.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator19.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        int int34 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int15 = dormandPrince853Integrator14.getOrder();
        double double16 = dormandPrince853Integrator14.getSafety();
        dormandPrince853Integrator14.setSafety((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        dormandPrince853Integrator4.setSafety((-1.0d));
        double double23 = dormandPrince853Integrator4.getMinReduction();
        int int24 = dormandPrince853Integrator4.getOrder();
        int int25 = dormandPrince853Integrator4.getOrder();
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        double double27 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.2d + "'", double23 == 0.2d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        dormandPrince853Integrator4.setMaxGrowth(35.0d);
        double double16 = dormandPrince853Integrator4.getMinStep();
        int int17 = dormandPrince853Integrator4.getOrder();
        double double18 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        java.lang.Throwable[] throwableArray11 = derivativeException9.getSuppressed();
        java.lang.String str12 = derivativeException9.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        java.lang.Object[] objArray15 = integratorException13.getArguments();
        java.lang.Object[] objArray16 = integratorException13.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", objArray16);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str12, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray22, doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray23, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray15, doubleArray28);
        double double32 = dormandPrince853Integrator31.getCurrentSignedStepsize();
        int int33 = dormandPrince853Integrator31.getOrder();
        dormandPrince853Integrator31.setSafety(31.622776601683793d);
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass39 = stepHandler38.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9486832980505138d + "'", double32 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 0.0d, 10.0d, 97.0d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        double double8 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator20.getMinStep();
        double double23 = dormandPrince853Integrator20.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double29 = dormandPrince853Integrator28.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction30, (double) (-1L), (double) '4', 10);
        double double35 = dormandPrince853Integrator28.getCurrentSignedStepsize();
        java.lang.String str36 = dormandPrince853Integrator28.getName();
        double double37 = dormandPrince853Integrator28.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double43 = dormandPrince853Integrator42.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction44, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator42.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator28.setStepHandler(stepHandler50);
        dormandPrince853Integrator20.setStepHandler(stepHandler50);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction53, (double) 100, (double) 0.0f, (-1));
        dormandPrince853Integrator20.setInitialStepSize((double) 1.0f);
        dormandPrince853Integrator20.setMaxGrowth(0.0d);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction64 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction64, 0.0d, 1.6870239755710472d, 10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.1622776601683795d + "'", double35 == 3.1622776601683795d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertNotNull(stepHandler50);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        double double24 = dormandPrince853Integrator4.getMaxGrowth();
        int int25 = dormandPrince853Integrator4.getOrder();
        int int26 = dormandPrince853Integrator4.getOrder();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, 10.059467437463484d, (-1.0d), (double) (short) 10);
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator32.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler33);
        double double35 = dormandPrince853Integrator4.getSafety();
        double double36 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double37 = dormandPrince853Integrator4.getMinStep();
        double double38 = dormandPrince853Integrator4.getCurrentStepStart();
        double double39 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.1622776601683795d + "'", double27 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9d + "'", double35 == 0.9d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.1622776601683795d + "'", double36 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) (byte) 10, (double) 8, 52.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getMinStep();
        java.lang.String str11 = dormandPrince853Integrator9.getName();
        double double12 = dormandPrince853Integrator9.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator9.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, 9.848857801796104d, 32.0d, (int) (byte) -1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) (byte) 10, 58.26662852782886d, (int) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, (double) 10L, (-1));
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 10);
        dormandPrince853Integrator4.setMaxGrowth(Double.NaN);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) '#');
        double double25 = dormandPrince853Integrator20.getMinStep();
        double double26 = dormandPrince853Integrator20.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        dormandPrince853Integrator4.setMinReduction((double) 100);
        double double31 = dormandPrince853Integrator4.getMaxStep();
        int int32 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray6);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = derivativeException12.getSuppressed();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        int int11 = dormandPrince853Integrator4.getOrder();
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getSafety();
        double double20 = dormandPrince853Integrator18.getMinStep();
        double double21 = dormandPrince853Integrator18.getMinStep();
        double double22 = dormandPrince853Integrator18.getCurrentSignedStepsize();
        int int23 = dormandPrince853Integrator18.getOrder();
        double double24 = dormandPrince853Integrator18.getMaxGrowth();
        java.lang.String str25 = dormandPrince853Integrator18.getName();
        java.lang.String str26 = dormandPrince853Integrator18.getName();
        double double27 = dormandPrince853Integrator18.getMaxStep();
        java.lang.String str28 = dormandPrince853Integrator18.getName();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction32, (double) 100, 22.98848884907765d, 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double16 = dormandPrince853Integrator15.getSafety();
        dormandPrince853Integrator15.setMinReduction((double) (short) -1);
        double double19 = dormandPrince853Integrator15.getMaxGrowth();
        double double20 = dormandPrince853Integrator15.getCurrentSignedStepsize();
        dormandPrince853Integrator15.setSafety(0.9d);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator15.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator4.getStepHandler();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        int int30 = dormandPrince853Integrator4.getOrder();
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.1622776601683795d + "'", double27 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray5, doubleArray10);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double double14 = dormandPrince853Integrator12.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator12.getStepHandler();
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        int int17 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 97.0d + "'", double14 == 97.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(74.64151198142793d, 28.284271247461902d, 3.7470125727948562d, 18.1550495783196d);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.Object[] objArray12 = derivativeException10.getArguments();
        java.lang.Throwable[] throwableArray13 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray41);
        java.lang.String[] strArray52 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.IntegratorException integratorException54 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray52);
        java.lang.Object[] objArray56 = derivativeException55.getArguments();
        integratorException48.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException55);
        integratorException30.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        derivativeException14.addSuppressed((java.lang.Throwable) integratorException60);
        java.lang.String str62 = integratorException60.getPattern();
        java.lang.String str63 = integratorException60.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str62, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str63, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(0.43558771746928626d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        dormandPrince853Integrator44.setSafety(0.0d);
        dormandPrince853Integrator44.setSafety((double) (byte) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction50, (double) 8, 0.0d, (int) ' ');
        double double55 = dormandPrince853Integrator44.getCurrentStepStart();
        dormandPrince853Integrator44.setMaxGrowth(8.94427190999916d);
        java.lang.String str58 = dormandPrince853Integrator44.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str58, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 1);
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations20 = null;
        double[] doubleArray28 = new double[] {};
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray28, doubleArray29);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray29, doubleArray34);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray50, doubleArray51);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray51, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray43, doubleArray56);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray64, doubleArray65);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray71, doubleArray72);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray76, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray72, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray64, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray56, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) 0L, doubleArray34, doubleArray56);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations20, 0.9486832980505138d, doubleArray56, 3.1622776601683795d, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray23);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException24);
        java.lang.Throwable[] throwableArray26 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException45 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray38);
        integratorException27.addSuppressed((java.lang.Throwable) derivativeException48);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray51);
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException52);
        java.lang.Throwable[] throwableArray54 = integratorException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = integratorException53.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray64);
        java.lang.String str66 = integratorException65.getPattern();
        java.lang.Throwable[] throwableArray67 = integratorException65.getSuppressed();
        integratorException53.addSuppressed((java.lang.Throwable) integratorException65);
        java.lang.String str69 = integratorException65.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException65);
        integratorException27.addSuppressed((java.lang.Throwable) derivativeException70);
        java.lang.Throwable[] throwableArray72 = integratorException27.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException73 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException27);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str12 = integratorException8.getPattern();
        java.lang.String str13 = integratorException8.getPattern();
        java.lang.Throwable[] throwableArray14 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray16 = integratorException15.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException15);
        java.lang.String str18 = integratorException17.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str18, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        java.lang.String str17 = derivativeException16.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!" + "'", str17, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.623413251903491d, 9.486832980505138d, (double) 100, 1.0d);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator7 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double15 = dormandPrince853Integrator14.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction16, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator26.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler29 = null;
        dormandPrince853Integrator26.setStepHandler(stepHandler29);
        java.lang.Class<?> wildcardClass31 = dormandPrince853Integrator26.getClass();
        java.lang.Object[] objArray32 = new java.lang.Object[] { 0L, 0.2d, ' ', (-1L), (byte) 0, dormandPrince853Integrator26 };
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray32);
        java.lang.Throwable[] throwableArray34 = integratorException33.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray34);
        java.lang.String str37 = integratorException36.getPattern();
        java.lang.String str38 = integratorException36.toString();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str38, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), 16.0d, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 2.0932702787842112d, (double) 10.0f, 0);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(10.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        double double18 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize(9.848857801796104d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction24, (double) (-1.0f), (double) (short) 1, (int) '4');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction29, (double) 0, 1.755012902585341d, (int) (byte) -1);
        double double34 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray14);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double14 = dormandPrince853Integrator13.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler20);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double24 = dormandPrince853Integrator4.getMinStep();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        double double27 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        int int45 = dormandPrince853Integrator44.getOrder();
        double double46 = dormandPrince853Integrator44.getCurrentStepStart();
        int int47 = dormandPrince853Integrator44.getOrder();
        java.lang.String str48 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator44.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler49);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int15 = dormandPrince853Integrator14.getOrder();
        double double16 = dormandPrince853Integrator14.getSafety();
        dormandPrince853Integrator14.setSafety((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        dormandPrince853Integrator4.setSafety((-1.0d));
        double double23 = dormandPrince853Integrator4.getSafety();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        double double25 = dormandPrince853Integrator4.getSafety();
        double double26 = dormandPrince853Integrator4.getMinStep();
        int int27 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(31.622776601683793d);
        dormandPrince853Integrator4.setMinReduction((double) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray26 = new double[] { (-1.0d) };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray47, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray43, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray35, doubleArray48);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray63 = new double[] {};
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray63, doubleArray64);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray64, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray56, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray48, doubleArray69);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray79 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray78, doubleArray79);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray84 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray83, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray79, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray48, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, doubleArray26, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.7952707287670507d, 1.0d, doubleArray14, doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) '#', (double) (byte) 10, 0.43558771746928626d);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.6870239755710472d, (double) (short) 10, (double) (byte) 1, 0.9d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, 35.0d, 3.080070288241023d, 100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler12);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, 31.622776601683793d, 1.0d, 32.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 31.622776601683793d + "'", double9 == 31.622776601683793d);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", strArray10);
        java.lang.Throwable[] throwableArray21 = derivativeException20.getSuppressed();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, 0.0d, (double) 1L, 0.9d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(10.059467437463484d);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray25);
        java.lang.String str27 = integratorException26.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        java.lang.Object[] objArray31 = integratorException26.getArguments();
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        integratorException26.addSuppressed((java.lang.Throwable) derivativeException42);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray46);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray50);
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException51);
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException52);
        derivativeException48.addSuppressed((java.lang.Throwable) derivativeException53);
        java.lang.Object[] objArray55 = derivativeException48.getArguments();
        derivativeException42.addSuppressed((java.lang.Throwable) derivativeException48);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException48);
        java.lang.String str58 = derivativeException48.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException48);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray68);
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray68);
        org.apache.commons.math.ode.DerivativeException derivativeException71 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray68);
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray68);
        org.apache.commons.math.ode.IntegratorException integratorException73 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray68);
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray68);
        org.apache.commons.math.ode.IntegratorException integratorException75 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray68);
        java.lang.Throwable[] throwableArray76 = integratorException75.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException77 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray76);
        java.lang.String str78 = integratorException77.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException79 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException77);
        java.lang.Throwable[] throwableArray80 = integratorException79.getSuppressed();
        java.lang.Object[] objArray81 = integratorException79.getArguments();
        derivativeException48.addSuppressed((java.lang.Throwable) integratorException79);
        org.apache.commons.math.ode.IntegratorException integratorException83 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException48);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 100, (double) (byte) 100, 0.43558771746928626d);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getSafety();
        double double20 = dormandPrince853Integrator18.getMinStep();
        dormandPrince853Integrator18.setSafety((double) '#');
        double double23 = dormandPrince853Integrator18.getMinStep();
        double double24 = dormandPrince853Integrator18.getMaxStep();
        double double25 = dormandPrince853Integrator18.getMinStep();
        double double26 = dormandPrince853Integrator18.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        java.lang.String str29 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(3.080070288241023d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double16 = dormandPrince853Integrator15.getMinStep();
        int int17 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double23 = dormandPrince853Integrator22.getSafety();
        double double24 = dormandPrince853Integrator22.getMinStep();
        double double25 = dormandPrince853Integrator22.getMinStep();
        double double26 = dormandPrince853Integrator22.getCurrentSignedStepsize();
        int int27 = dormandPrince853Integrator22.getOrder();
        double double28 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler29);
        double double31 = dormandPrince853Integrator15.getCurrentStepStart();
        dormandPrince853Integrator15.setMinReduction((double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator15.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        java.lang.String str36 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray35);
        java.lang.String str37 = integratorException36.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException36);
        java.lang.Object[] objArray39 = derivativeException38.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray39);
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException49 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray48);
        java.lang.String str50 = integratorException49.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException49);
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException49);
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException49);
        integratorException40.addSuppressed((java.lang.Throwable) derivativeException53);
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException53);
        integratorException26.addSuppressed((java.lang.Throwable) integratorException55);
        java.lang.Class<?> wildcardClass57 = integratorException26.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = integratorException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray13 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray13);
        derivativeException2.addSuppressed((java.lang.Throwable) integratorException15);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 0.0f, (double) (-1L), (int) (byte) 1);
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0, (double) 0L, (double) 10L);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.String str21 = integratorException8.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException7);
        derivativeException2.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray12 = integratorException11.getSuppressed();
        java.lang.String str13 = integratorException11.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 10L, (double) 10, (double) 0L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 100.0d, (double) (-1L), 8);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) 100.0f, 10.059467437463484d, (int) (short) 1);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.2d, 0.2d, 0.43558771746928626d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, (double) 10L, (-1));
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(72.11102550927978d);
        dormandPrince853Integrator4.setMaxGrowth(63.245553203367585d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 0.0d, (double) (byte) 100, (int) (byte) 0);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException15);
        java.lang.Throwable[] throwableArray17 = integratorException16.getSuppressed();
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException16);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray26);
        java.lang.String str28 = integratorException27.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException27);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException27);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException27);
        java.lang.Object[] objArray32 = integratorException27.getArguments();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        integratorException27.addSuppressed((java.lang.Throwable) derivativeException43);
        java.lang.String[] strArray47 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray47);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray51);
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException52);
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        derivativeException49.addSuppressed((java.lang.Throwable) derivativeException54);
        java.lang.Object[] objArray56 = derivativeException49.getArguments();
        derivativeException43.addSuppressed((java.lang.Throwable) derivativeException49);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException49);
        java.lang.Object[] objArray59 = derivativeException5.getArguments();
        java.lang.String[] strArray61 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray61);
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException62);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException63);
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException64);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException64);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.Object[] objArray68 = derivativeException67.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException69 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray68);
        java.lang.String str70 = integratorException69.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str70, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.Object[] objArray12 = derivativeException10.getArguments();
        java.lang.Throwable[] throwableArray13 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray21);
        derivativeException10.addSuppressed((java.lang.Throwable) derivativeException27);
        java.lang.String str29 = derivativeException27.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str29, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException1 = new org.apache.commons.math.ode.DerivativeException(throwable0);
        java.lang.String[] strArray4 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        java.lang.Throwable[] throwableArray6 = derivativeException5.getSuppressed();
        derivativeException1.addSuppressed((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String str9 = derivativeException5.getPattern();
        java.lang.Object[] objArray10 = derivativeException5.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String str12 = derivativeException5.toString();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str12, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (-1.0f));
        dormandPrince853Integrator4.setMinReduction(0.2d);
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        double double18 = dormandPrince853Integrator4.getSafety();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        double double20 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, 8.94427190999916d, (double) (-1), (double) (-1));
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 97.0d + "'", double6 == 97.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 10.0d, (double) '#', 1);
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, 0.0d, (double) (short) 1, (int) (byte) 10);
        double double20 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, (double) (-1L), (double) (byte) -1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        int int6 = dormandPrince853Integrator4.getOrder();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        dormandPrince853Integrator20.setSafety((double) (short) 10);
        java.lang.String str24 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setMaxGrowth(0.9d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        double double23 = dormandPrince853Integrator20.getMinStep();
        int int24 = dormandPrince853Integrator20.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        java.lang.String str4 = derivativeException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException3);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        java.lang.String str10 = derivativeException9.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        derivativeException3.addSuppressed((java.lang.Throwable) derivativeException9);
        java.lang.Throwable[] throwableArray14 = derivativeException9.getSuppressed();
        java.lang.Throwable[] throwableArray15 = derivativeException9.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException16);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(40.0d, 0.9486832980505138d, 7.113117640155691d, 10.0d);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) '#');
        double double25 = dormandPrince853Integrator20.getCurrentStepStart();
        double double26 = dormandPrince853Integrator20.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator20.getStepHandler();
        double double28 = dormandPrince853Integrator20.getMinReduction();
        dormandPrince853Integrator20.setInitialStepSize((double) 100L);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator20.setMaxGrowth(10.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator38.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler41 = null;
        dormandPrince853Integrator38.setStepHandler(stepHandler41);
        dormandPrince853Integrator38.setMaxGrowth((double) (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double50 = dormandPrince853Integrator49.getSafety();
        double double51 = dormandPrince853Integrator49.getMinStep();
        dormandPrince853Integrator49.setSafety((double) '#');
        double double54 = dormandPrince853Integrator49.getCurrentStepStart();
        double double55 = dormandPrince853Integrator49.getMaxStep();
        dormandPrince853Integrator49.setMinReduction((double) (short) 10);
        int int58 = dormandPrince853Integrator49.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction59, (double) 1.0f, 0.0d, (int) '#');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', 0.0d, (double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator68.getStepHandler();
        dormandPrince853Integrator49.setStepHandler(stepHandler69);
        dormandPrince853Integrator38.setStepHandler(stepHandler69);
        dormandPrince853Integrator20.setStepHandler(stepHandler69);
        dormandPrince853Integrator4.setStepHandler(stepHandler69);
        java.lang.Class<?> wildcardClass74 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.2d + "'", double28 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9d + "'", double50 == 0.9d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (short) 0, (double) ' ', (int) (short) 1);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 0.9486832980505138d, (double) (byte) 0, (double) 10L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(97.0d);
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int16 = dormandPrince853Integrator15.getOrder();
        double double17 = dormandPrince853Integrator15.getSafety();
        dormandPrince853Integrator15.setSafety((double) (-1));
        int int20 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator15.getStepHandler();
        dormandPrince853Integrator15.setSafety((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator28.setSafety((double) '#');
        dormandPrince853Integrator28.setMaxGrowth((double) 100.0f);
        java.lang.String str33 = dormandPrince853Integrator28.getName();
        double double34 = dormandPrince853Integrator28.getSafety();
        dormandPrince853Integrator28.setMaxGrowth((double) 0.0f);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator28.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler37);
        dormandPrince853Integrator15.setSafety(33.46640106136302d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        double double47 = dormandPrince853Integrator45.getMinStep();
        double double48 = dormandPrince853Integrator45.getMinStep();
        double double49 = dormandPrince853Integrator45.getCurrentSignedStepsize();
        int int50 = dormandPrince853Integrator45.getOrder();
        double double51 = dormandPrince853Integrator45.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator45.setMaxGrowth(0.0d);
        int int55 = dormandPrince853Integrator45.getOrder();
        double double56 = dormandPrince853Integrator45.getMaxGrowth();
        dormandPrince853Integrator45.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (byte) 1, Double.NaN, (double) '#');
        dormandPrince853Integrator63.setInitialStepSize((double) 10.0f);
        int int66 = dormandPrince853Integrator63.getOrder();
        dormandPrince853Integrator63.setMinReduction((double) (-1L));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double74 = dormandPrince853Integrator73.getSafety();
        double double75 = dormandPrince853Integrator73.getMinStep();
        dormandPrince853Integrator73.setSafety((double) '#');
        double double78 = dormandPrince853Integrator73.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double84 = dormandPrince853Integrator83.getSafety();
        double double85 = dormandPrince853Integrator83.getMinStep();
        dormandPrince853Integrator83.setSafety((double) '#');
        double double88 = dormandPrince853Integrator83.getCurrentStepStart();
        double double89 = dormandPrince853Integrator83.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler90 = dormandPrince853Integrator83.getStepHandler();
        dormandPrince853Integrator73.setStepHandler(stepHandler90);
        dormandPrince853Integrator63.setStepHandler(stepHandler90);
        dormandPrince853Integrator45.setStepHandler(stepHandler90);
        dormandPrince853Integrator15.setStepHandler(stepHandler90);
        dormandPrince853Integrator4.setStepHandler(stepHandler90);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.43558771746928626d + "'", double7 == 0.43558771746928626d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9d + "'", double74 == 0.9d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.9d + "'", double84 == 0.9d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler90);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 16.0d, 58.26662852782886d, (double) 8);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth(0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.113117640155691d + "'", double6 == 7.113117640155691d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException36);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException(throwable38);
        java.lang.String str40 = integratorException39.getPattern();
        java.lang.Object[] objArray41 = integratorException39.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException39);
        derivativeException37.addSuppressed((java.lang.Throwable) integratorException39);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException39);
        java.lang.Object[] objArray45 = integratorException44.getArguments();
        derivativeException24.addSuppressed((java.lang.Throwable) integratorException44);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, Double.NaN, (double) (byte) 0, 58.26662852782886d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, (double) (byte) 100, (double) 0, 97.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 17.55012902585341d + "'", double6 == 17.55012902585341d);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray20, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray12, doubleArray25);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray41, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray33, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray25, doubleArray46);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray60 = new double[] {};
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray60, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray56, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray25, doubleArray56);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10L, doubleArray25, doubleArray68);
        double[] doubleArray75 = new double[] {};
        double[] doubleArray76 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray75, doubleArray76);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray81 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray80, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray76, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), Double.NaN, doubleArray25, doubleArray76);
        int int85 = dormandPrince853Integrator84.getOrder();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 16.0d, 58.26662852782886d, (double) 8);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getSafety();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, 32.0d, (double) 100, 40.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        java.lang.Class<?> wildcardClass8 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.656854249492381d + "'", double6 == 5.656854249492381d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(55.71355310873648d, 17.55012902585341d, (double) (byte) 10, 8.0d);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) 'a');
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) '4');
        dormandPrince853Integrator4.setInitialStepSize(98.48857801796105d);
        double double22 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getMinStep();
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        double double19 = dormandPrince853Integrator4.getSafety();
        double double20 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray8, doubleArray21);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray21, doubleArray42);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray51, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray52, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray21, doubleArray52);
        int int61 = dormandPrince853Integrator60.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations62 = null;
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator60.integrate(firstOrderDifferentialEquations62, (double) ' ', doubleArray66, 32.0d, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray17);
        java.lang.String str23 = integratorException22.getPattern();
        integratorException8.addSuppressed((java.lang.Throwable) integratorException22);
        java.lang.String str25 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray27 = integratorException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str23, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, 0.0d, 1.0d, (double) 0);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (-1.0d), 72.11102550927978d, 0);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (-1.0d), (double) 1L, (int) 'a');
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getMinStep();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        java.lang.String str16 = integratorException15.getPattern();
        java.lang.Throwable[] throwableArray17 = integratorException15.getSuppressed();
        integratorException3.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.String str19 = integratorException15.getPattern();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray27);
        java.lang.String str29 = integratorException28.getPattern();
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray34);
        integratorException28.addSuppressed((java.lang.Throwable) derivativeException38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        java.lang.String str41 = integratorException28.getPattern();
        integratorException15.addSuppressed((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException43);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray54);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray54);
        java.lang.String str64 = integratorException63.getPattern();
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException73 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray72);
        java.lang.String str74 = integratorException73.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException73);
        java.lang.String str76 = integratorException73.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException77 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException73);
        org.apache.commons.math.ode.IntegratorException integratorException78 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException77);
        integratorException63.addSuppressed((java.lang.Throwable) integratorException78);
        integratorException43.addSuppressed((java.lang.Throwable) integratorException78);
        java.lang.Class<?> wildcardClass81 = integratorException78.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str64, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException26);
        java.lang.Throwable[] throwableArray30 = derivativeException26.getSuppressed();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        java.lang.String str4 = derivativeException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Object[] objArray6 = integratorException5.getArguments();
        java.lang.Object[] objArray7 = integratorException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(1.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        dormandPrince853Integrator4.setSafety((double) 100);
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations20 = null;
        double[] doubleArray24 = null;
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray34 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray31, doubleArray34);
        double[] doubleArray36 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.94427190999916d, (-1.0d), doubleArray31, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) 1.0f, doubleArray24, doubleArray31);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray52, doubleArray53);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray53, doubleArray58);
        double[] doubleArray63 = new double[] {};
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray63, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray58, doubleArray63);
        double[] doubleArray73 = new double[] {};
        double[] doubleArray74 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray73, doubleArray74);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray79 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray78, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray74, doubleArray79);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray79, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray58, doubleArray79);
        double[] doubleArray91 = new double[] {};
        double[] doubleArray92 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray91, doubleArray92);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.623413251903491d, (double) (byte) 100, doubleArray79, doubleArray92);
        double[] doubleArray95 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.6870239755710472d, (double) (short) 0, doubleArray92, doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations20, (double) ' ', doubleArray31, 5.623413251903491d, doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.2d, (double) 0.0f, (double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 0.0d, 0.9486832980505138d, (-1));
        java.lang.Class<?> wildcardClass10 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray8);
        java.lang.Object[] objArray16 = derivativeException15.getArguments();
        java.lang.Throwable[] throwableArray17 = derivativeException15.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray17);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 10);
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray6);
        java.lang.Object[] objArray13 = derivativeException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray15 = integratorException14.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        java.lang.String str22 = derivativeException19.getPattern();
        integratorException16.addSuppressed((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        java.lang.String str25 = derivativeException24.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: " + "'", str25, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        double[] doubleArray3 = new double[] { (-1.0d) };
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray20, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray12, doubleArray25);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray41, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray33, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray25, doubleArray46);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray60 = new double[] {};
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray60, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray56, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray25, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, doubleArray3, doubleArray56);
        java.lang.String str66 = dormandPrince853Integrator65.getName();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str66, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String str7 = derivativeException2.getPattern();
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.String str11 = derivativeException10.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("", strArray21);
        derivativeException13.addSuppressed((java.lang.Throwable) derivativeException28);
        derivativeException2.addSuppressed((java.lang.Throwable) derivativeException13);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray9 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray6, doubleArray9);
        double[] doubleArray11 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.94427190999916d, (-1.0d), doubleArray6, doubleArray11);
        double double13 = dormandPrince853Integrator12.getMinReduction();
        dormandPrince853Integrator12.setSafety(3.22490309931942d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator44.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction47, (double) 100L, 31.622776601683793d, 100);
        double double52 = dormandPrince853Integrator44.getMaxGrowth();
        double double53 = dormandPrince853Integrator44.getCurrentStepStart();
        java.lang.String str54 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setInitialStepSize(7.211102550927978d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler55);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 'a', (double) 1L, 31.622776601683793d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(72.11102550927978d, 17.88854381999832d, 8.94427190999916d, 48.655726475421666d);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) 10, 10.059467437463484d, (double) 10L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 1.0f, 0.0d, (int) '#');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', 0.0d, (double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double26 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str27 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(55.71355310873648d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 10L, (double) 10, (double) 0L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 100.0d, (double) (-1L), 8);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) 10, 0.2d, (double) '#');
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double13 = dormandPrince853Integrator4.getMinStep();
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray25, doubleArray26);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray30, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray26, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray18, doubleArray31);
        double double35 = dormandPrince853Integrator34.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        double double47 = dormandPrince853Integrator45.getMinStep();
        double double48 = dormandPrince853Integrator45.getCurrentStepStart();
        java.lang.String str49 = dormandPrince853Integrator45.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double55 = dormandPrince853Integrator54.getMinStep();
        int int56 = dormandPrince853Integrator54.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double62 = dormandPrince853Integrator61.getSafety();
        double double63 = dormandPrince853Integrator61.getMinStep();
        double double64 = dormandPrince853Integrator61.getMinStep();
        double double65 = dormandPrince853Integrator61.getCurrentSignedStepsize();
        int int66 = dormandPrince853Integrator61.getOrder();
        double double67 = dormandPrince853Integrator61.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator61.getStepHandler();
        dormandPrince853Integrator54.setStepHandler(stepHandler68);
        dormandPrince853Integrator45.setStepHandler(stepHandler68);
        dormandPrince853Integrator40.setStepHandler(stepHandler68);
        dormandPrince853Integrator34.setStepHandler(stepHandler68);
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        double double74 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9486832980505138d + "'", double35 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.9d + "'", double62 == 0.9d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray9);
        java.lang.Object[] objArray19 = derivativeException18.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", strArray11);
        java.lang.String str23 = derivativeException22.getPattern();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: " + "'", str23, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ");
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray9);
        java.lang.String str19 = derivativeException18.getPattern();
        java.lang.Throwable[] throwableArray20 = derivativeException18.getSuppressed();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.DerivativeException" + "'", str19, "org.apache.commons.math.ode.DerivativeException");
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray6);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray20);
        derivativeException12.addSuppressed((java.lang.Throwable) integratorException27);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException27);
        java.lang.String str30 = integratorException29.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException29);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: " + "'", str30, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray7, doubleArray12);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray12, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setSafety((double) (short) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction24, 0.0d, (double) 1, 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double34 = dormandPrince853Integrator33.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator33.addSwitchingFunction(switchingFunction35, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator33.getStepHandler();
        int int41 = dormandPrince853Integrator33.getOrder();
        double double42 = dormandPrince853Integrator33.getCurrentStepStart();
        int int43 = dormandPrince853Integrator33.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator33.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler44);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction46, (double) '4', (double) 1, 10);
        java.lang.String str51 = dormandPrince853Integrator20.getName();
        double double52 = dormandPrince853Integrator20.getSafety();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getSafety();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        java.lang.String str14 = derivativeException13.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray16 = derivativeException13.getSuppressed();
        integratorException10.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException20);
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException26);
        integratorException21.addSuppressed((java.lang.Throwable) derivativeException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException21);
        java.lang.Object[] objArray30 = integratorException21.getArguments();
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException33);
        java.lang.Throwable[] throwableArray35 = integratorException34.getSuppressed();
        java.lang.String str36 = integratorException34.getPattern();
        java.lang.Throwable[] throwableArray37 = integratorException34.getSuppressed();
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException40);
        java.lang.Throwable[] throwableArray42 = integratorException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = integratorException41.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException41);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray52);
        java.lang.String str54 = integratorException53.getPattern();
        java.lang.Throwable[] throwableArray55 = integratorException53.getSuppressed();
        integratorException41.addSuppressed((java.lang.Throwable) integratorException53);
        integratorException34.addSuppressed((java.lang.Throwable) integratorException41);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException41);
        integratorException21.addSuppressed((java.lang.Throwable) integratorException58);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException67 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException68);
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException68);
        org.apache.commons.math.ode.IntegratorException integratorException71 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException68);
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException71);
        java.lang.Throwable[] throwableArray73 = integratorException71.getSuppressed();
        java.lang.String str74 = integratorException71.getPattern();
        java.lang.String str75 = integratorException71.getPattern();
        java.lang.Throwable[] throwableArray76 = integratorException71.getSuppressed();
        integratorException21.addSuppressed((java.lang.Throwable) integratorException71);
        org.apache.commons.math.ode.IntegratorException integratorException78 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException71);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException78);
        integratorException10.addSuppressed((java.lang.Throwable) derivativeException79);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str74, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str75, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 10L, (double) 10, (double) 0L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 100.0d, (double) (-1L), 8);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) 100.0f, 10.059467437463484d, (int) (short) 1);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getSafety();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 31.622776601683793d + "'", double18 == 31.622776601683793d);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        dormandPrince853Integrator14.setMinReduction((double) (short) -1);
        dormandPrince853Integrator14.setInitialStepSize((double) (byte) 1);
        java.lang.String str20 = dormandPrince853Integrator14.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double26 = dormandPrince853Integrator25.getSafety();
        dormandPrince853Integrator25.setMinReduction((double) (short) -1);
        dormandPrince853Integrator25.setInitialStepSize((double) 0.0f);
        int int31 = dormandPrince853Integrator25.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction32, (-1.0d), (double) 1L, (int) 'a');
        double double37 = dormandPrince853Integrator25.getMaxGrowth();
        double double38 = dormandPrince853Integrator25.getMaxStep();
        double double39 = dormandPrince853Integrator25.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator14.setStepHandler(stepHandler40);
        dormandPrince853Integrator4.setStepHandler(stepHandler40);
        double double43 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 'a', 0.0d, 8);
        dormandPrince853Integrator4.setMaxGrowth((double) 0L);
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        double double18 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(31.622776601683793d);
        double double21 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 31.622776601683793d + "'", double21 == 31.622776601683793d);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        int int5 = dormandPrince853Integrator4.getOrder();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        dormandPrince853Integrator11.setMinReduction((double) (byte) 0);
        double double17 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getMinStep();
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        double double22 = dormandPrince853Integrator4.getSafety();
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.Throwable[] throwableArray19 = derivativeException18.getSuppressed();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray19);
        java.lang.String str26 = derivativeException25.getPattern();
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException25);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str26, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        java.lang.Class<?> wildcardClass16 = integratorException14.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        double double15 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 1.0f);
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.String str10 = integratorException9.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray12 = integratorException11.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str10, "org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        double[] doubleArray5 = new double[] { (-1.0d) };
        double[] doubleArray14 = new double[] {};
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray14, doubleArray15);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray21, doubleArray22);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray26, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray22, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray14, doubleArray27);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray47, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray43, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray35, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray27, doubleArray48);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray58, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray27, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, doubleArray5, doubleArray58);
        double[] doubleArray72 = new double[] {};
        double[] doubleArray73 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray72, doubleArray73);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray79, doubleArray80);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray80, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray72, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator(31.622776601683793d, (double) 1.0f, doubleArray5, doubleArray85);
        dormandPrince853Integrator89.setInitialStepSize(9.485494822646622d);
        int int92 = dormandPrince853Integrator89.getOrder();
        double double93 = dormandPrince853Integrator89.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        dormandPrince853Integrator4.setMaxGrowth(3.1622776601683795d);
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(3.080070288241023d);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, (double) (-1L), (double) 100L, (-1));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, (double) 10L, 35.0d, (int) (byte) 1);
        int int27 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, 0.7952707287670507d, 97.0d, (double) (short) 100);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety((double) 8);
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        double double15 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 1.0f);
        double double18 = dormandPrince853Integrator4.getMinReduction();
        double double19 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(5.656854249492381d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) (byte) 10);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        double double15 = dormandPrince853Integrator13.getMinStep();
        java.lang.String str16 = dormandPrince853Integrator13.getName();
        int int17 = dormandPrince853Integrator13.getOrder();
        double double18 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator13.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction23, 52.0d, 100.0d, (int) ' ');
        double double28 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 0.0d, (double) (byte) 1, (double) (byte) -1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int7 = dormandPrince853Integrator4.getOrder();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray8);
        java.lang.String str17 = integratorException16.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        java.lang.String str20 = derivativeException19.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str17, "org.apache.commons.math.ode.IntegratorException: ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str20, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(40.0d);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNull(stepHandler22);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.Throwable[] throwableArray14 = integratorException8.getSuppressed();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException19);
        java.lang.Throwable[] throwableArray23 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray23);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray32);
        java.lang.String str34 = integratorException33.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException33);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException33);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException33);
        java.lang.Object[] objArray38 = integratorException33.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException33);
        integratorException24.addSuppressed((java.lang.Throwable) integratorException33);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException33);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException33);
        java.lang.Throwable[] throwableArray43 = integratorException33.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.1622776601683795d + "'", double8 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.1622776601683795d + "'", double13 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler14);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray6);
        java.lang.Object[] objArray13 = derivativeException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray21);
        java.lang.Throwable[] throwableArray28 = derivativeException27.getSuppressed();
        integratorException14.addSuppressed((java.lang.Throwable) derivativeException27);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException27);
        java.lang.Throwable[] throwableArray31 = derivativeException30.getSuppressed();
        java.lang.String str32 = derivativeException30.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str32, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 3.1622776601683795d, (double) (byte) 0, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (-1L));
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 10L);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 0.0d, (double) 10L, 100);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, Double.NaN, (double) (byte) -1, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(8.0d);
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str11 = derivativeException10.getPattern();
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray21);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray39);
        java.lang.String str41 = integratorException40.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException43);
        java.lang.String str45 = derivativeException43.getPattern();
        java.lang.Throwable[] throwableArray46 = derivativeException43.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray46);
        derivativeException30.addSuppressed((java.lang.Throwable) integratorException47);
        derivativeException10.addSuppressed((java.lang.Throwable) derivativeException30);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        java.lang.String str51 = derivativeException10.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str51, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getSafety();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException24);
        integratorException19.addSuppressed((java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException19);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.String str30 = integratorException28.getPattern();
        java.lang.Throwable[] throwableArray31 = integratorException28.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray41);
        java.lang.Throwable[] throwableArray49 = integratorException48.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray49);
        java.lang.String str51 = integratorException50.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException50);
        java.lang.Throwable[] throwableArray53 = integratorException52.getSuppressed();
        integratorException32.addSuppressed((java.lang.Throwable) integratorException52);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, 32.0d, 0.2d, 31.622776601683793d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(52.0d);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 0.9d, (double) (short) -1, (double) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth(0.43558771746928626d);
        double double7 = dormandPrince853Integrator4.getMinReduction();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth(23.673797188510488d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.6870239755710472d + "'", double8 == 1.6870239755710472d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 0L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, (double) (short) 1, 31.622776601683793d, (int) (byte) -1);
        dormandPrince853Integrator4.setMinReduction((double) 100);
        double double27 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setMinReduction(1.0d);
        java.lang.String str55 = dormandPrince853Integrator44.getName();
        int int56 = dormandPrince853Integrator44.getOrder();
        java.lang.String str57 = dormandPrince853Integrator44.getName();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.7470125727948562d, 2.0932702787842112d, 97.0d, (double) 100.0f);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 28.284271247461902d, 48.655726475421666d, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException15);
        java.lang.Object[] objArray17 = derivativeException15.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", objArray17);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) (-1L), (double) 0.0f, 0.2d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double14 = dormandPrince853Integrator13.getMinStep();
        double double15 = dormandPrince853Integrator13.getMinStep();
        java.lang.String str16 = dormandPrince853Integrator13.getName();
        double double17 = dormandPrince853Integrator13.getSafety();
        dormandPrince853Integrator13.setMinReduction((double) 100L);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler20);
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 40.0d, 0.43558771746928626d, (int) (byte) 10);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations13 = null;
        double[] doubleArray17 = null;
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (byte) 10, doubleArray17, doubleArray21);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray36, doubleArray41);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray41, doubleArray46);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray62, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray54, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray46, doubleArray67);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray76, doubleArray77);
        double[] doubleArray79 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.755012902585341d, 0.0d, doubleArray46, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations13, 5.916079783099616d, doubleArray17, 1.6870239755710472d, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double16 = dormandPrince853Integrator15.getMinStep();
        int int17 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double23 = dormandPrince853Integrator22.getSafety();
        double double24 = dormandPrince853Integrator22.getMinStep();
        double double25 = dormandPrince853Integrator22.getMinStep();
        double double26 = dormandPrince853Integrator22.getCurrentSignedStepsize();
        int int27 = dormandPrince853Integrator22.getOrder();
        double double28 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler29);
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double double32 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) ' ');
        dormandPrince853Integrator4.setSafety(5.916079783099616d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction37, (double) 100L, 22.98848884907765d, (int) (short) -1);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 10.0f);
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray9);
        java.lang.String str19 = derivativeException18.getPattern();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException" + "'", str19, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.623413251903491d, 31.71666350274487d, (double) 0L, 0.0d);
        dormandPrince853Integrator4.setInitialStepSize(0.7952707287670507d);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        int int10 = dormandPrince853Integrator4.getOrder();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double17 = dormandPrince853Integrator16.getMinStep();
        int int18 = dormandPrince853Integrator16.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        double double25 = dormandPrince853Integrator23.getMinStep();
        double double26 = dormandPrince853Integrator23.getMinStep();
        double double27 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        int int28 = dormandPrince853Integrator23.getOrder();
        double double29 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator16.setStepHandler(stepHandler30);
        double double32 = dormandPrince853Integrator16.getCurrentStepStart();
        double double33 = dormandPrince853Integrator16.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, 3.080070288241023d, 55.71355310873648d, (double) (byte) -1);
        int int39 = dormandPrince853Integrator38.getOrder();
        dormandPrince853Integrator38.setSafety((double) (short) 10);
        double double42 = dormandPrince853Integrator38.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double48 = dormandPrince853Integrator47.getSafety();
        double double49 = dormandPrince853Integrator47.getMinStep();
        double double50 = dormandPrince853Integrator47.getMinStep();
        double double51 = dormandPrince853Integrator47.getCurrentSignedStepsize();
        double double52 = dormandPrince853Integrator47.getMinStep();
        dormandPrince853Integrator47.setMinReduction((double) (-1L));
        double double55 = dormandPrince853Integrator47.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator47.getStepHandler();
        dormandPrince853Integrator38.setStepHandler(stepHandler56);
        dormandPrince853Integrator16.setStepHandler(stepHandler56);
        dormandPrince853Integrator4.setStepHandler(stepHandler56);
        double double60 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.080070288241023d + "'", double42 == 3.080070288241023d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9d + "'", double48 == 0.9d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.9d + "'", double55 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler56);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(28.284271247461902d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        int int11 = dormandPrince853Integrator4.getOrder();
        int int12 = dormandPrince853Integrator4.getOrder();
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        int int16 = dormandPrince853Integrator4.getOrder();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.3713737056616555d, 2.0870738306760646d, (double) '#', 9.485494822646622d);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) 10.0f, (double) 'a', (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.080070288241023d + "'", double5 == 3.080070288241023d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.Class<?> wildcardClass15 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray8);
        java.lang.String str10 = integratorException9.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray14 = integratorException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray16 = integratorException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", objArray16);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException(throwable13);
        java.lang.String[] strArray17 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        java.lang.Throwable[] throwableArray19 = derivativeException18.getSuppressed();
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException18);
        java.lang.String str21 = derivativeException18.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException22);
        java.lang.Object[] objArray24 = derivativeException22.getArguments();
        java.lang.String str25 = derivativeException22.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException22);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray16 = integratorException8.getArguments();
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException27);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException27);
        java.lang.String str30 = derivativeException27.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str30, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, 35.0d, (double) '#', (int) '#');
        double double50 = dormandPrince853Integrator44.getMinReduction();
        double double51 = dormandPrince853Integrator44.getMaxStep();
        dormandPrince853Integrator44.setInitialStepSize((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.2d + "'", double50 == 0.2d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.Object[] objArray12 = derivativeException10.getArguments();
        java.lang.Throwable[] throwableArray13 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray41);
        java.lang.String[] strArray52 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.IntegratorException integratorException54 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray52);
        java.lang.Object[] objArray56 = derivativeException55.getArguments();
        integratorException48.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException55);
        integratorException30.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        derivativeException14.addSuppressed((java.lang.Throwable) integratorException60);
        java.lang.String str62 = integratorException60.getPattern();
        java.lang.Object[] objArray63 = integratorException60.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str62, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray8);
        java.lang.String str10 = integratorException9.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray26);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException38);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray42);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException43);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException43);
        derivativeException38.addSuppressed((java.lang.Throwable) derivativeException45);
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException38);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException47);
        derivativeException35.addSuppressed((java.lang.Throwable) integratorException47);
        integratorException16.addSuppressed((java.lang.Throwable) derivativeException35);
        java.lang.Object[] objArray51 = integratorException16.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray51);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(10.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) (-1.0f), 5.623413251903491d, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.String str14 = integratorException13.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str14, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, 100.0d, 3.080070288241023d, 0.9486832980505138d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        java.lang.String str5 = derivativeException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray10 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        java.lang.String str14 = integratorException12.getPattern();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException" + "'", str14, "org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray8);
        java.lang.String str10 = integratorException9.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        java.lang.Throwable[] throwableArray26 = integratorException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = integratorException25.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        integratorException20.addSuppressed((java.lang.Throwable) integratorException25);
        java.lang.Object[] objArray30 = integratorException25.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray34);
        java.lang.String str36 = derivativeException35.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException35);
        java.lang.String str40 = derivativeException35.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException35);
        derivativeException32.addSuppressed((java.lang.Throwable) derivativeException42);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException42);
        java.lang.Object[] objArray45 = derivativeException42.getArguments();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) 100.0f, 10);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException4);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 1.6870239755710472d, 2.3713737056616555d, (double) (-1));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        double double16 = dormandPrince853Integrator14.getMinStep();
        dormandPrince853Integrator14.setSafety((double) '#');
        double double19 = dormandPrince853Integrator14.getCurrentStepStart();
        double double20 = dormandPrince853Integrator14.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler21);
        double double23 = dormandPrince853Integrator4.getMaxStep();
        double double24 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray17);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray12 = derivativeException11.getArguments();
        java.lang.String str13 = derivativeException11.getPattern();
        java.lang.String str14 = derivativeException11.getPattern();
        java.lang.String str15 = derivativeException11.getPattern();
        java.lang.String str16 = derivativeException11.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str16, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str12 = integratorException8.getPattern();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException21);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException(throwable24);
        java.lang.String str26 = integratorException25.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        derivativeException23.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.Throwable[] throwableArray30 = integratorException28.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException31);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException(throwable33);
        java.lang.String str35 = integratorException34.getPattern();
        integratorException8.addSuppressed((java.lang.Throwable) integratorException34);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException34);
        java.lang.Throwable[] throwableArray38 = integratorException34.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), (double) 0.0f, 3.080070288241023d, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMinStep();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth(1.755012902585341d);
        dormandPrince853Integrator4.setMinReduction(97.0d);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, 2.0870738306760646d, (double) 10L, 8.94427190999916d);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (-1.0f), (double) 10.0f, 0.0d);
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) 1, (double) (-1L), 10);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = derivativeException8.getSuppressed();
        java.lang.String str11 = derivativeException8.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str13 = derivativeException8.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str11, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str13, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (short) 100);
        double double17 = dormandPrince853Integrator4.getMaxStep();
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(58.26662852782886d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 0.0d, (double) (short) 10, 1);
        double double18 = dormandPrince853Integrator4.getMinReduction();
        int int19 = dormandPrince853Integrator4.getOrder();
        int int20 = dormandPrince853Integrator4.getOrder();
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        double double22 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 0, (double) 'a', 0.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, 97.0d, (double) 100.0f, (double) (-1L));
        int int5 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMinReduction((double) (short) -1);
        dormandPrince853Integrator10.setInitialStepSize((double) (byte) 1);
        java.lang.String str16 = dormandPrince853Integrator10.getName();
        int int17 = dormandPrince853Integrator10.getOrder();
        java.lang.String str18 = dormandPrince853Integrator10.getName();
        dormandPrince853Integrator10.setMinReduction((double) (byte) 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double26 = dormandPrince853Integrator25.getSafety();
        int int27 = dormandPrince853Integrator25.getOrder();
        int int28 = dormandPrince853Integrator25.getOrder();
        double double29 = dormandPrince853Integrator25.getMinReduction();
        java.lang.String str30 = dormandPrince853Integrator25.getName();
        java.lang.String str31 = dormandPrince853Integrator25.getName();
        double double32 = dormandPrince853Integrator25.getMinReduction();
        dormandPrince853Integrator25.setSafety((-1.0d));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator39.setSafety((double) '#');
        dormandPrince853Integrator39.setMaxGrowth((double) 100.0f);
        java.lang.String str44 = dormandPrince853Integrator39.getName();
        double double45 = dormandPrince853Integrator39.getSafety();
        double double46 = dormandPrince853Integrator39.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double52 = dormandPrince853Integrator51.getSafety();
        int int53 = dormandPrince853Integrator51.getOrder();
        int int54 = dormandPrince853Integrator51.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator51.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double61 = dormandPrince853Integrator60.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator60.addSwitchingFunction(switchingFunction62, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator51.setStepHandler(stepHandler67);
        dormandPrince853Integrator39.setStepHandler(stepHandler67);
        dormandPrince853Integrator25.setStepHandler(stepHandler67);
        dormandPrince853Integrator10.setStepHandler(stepHandler67);
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        java.lang.String str73 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.2d + "'", double32 == 0.2d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9d + "'", double52 == 0.9d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.Object[] objArray16 = derivativeException15.getArguments();
        java.lang.Throwable[] throwableArray17 = derivativeException15.getSuppressed();
        java.lang.String str18 = derivativeException15.getPattern();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str18, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray7);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        java.lang.String str32 = integratorException31.getPattern();
        java.lang.Throwable[] throwableArray33 = integratorException31.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException31);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException(throwable35);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException36);
        java.lang.String str38 = integratorException36.getPattern();
        java.lang.Throwable[] throwableArray39 = integratorException36.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException36);
        derivativeException34.addSuppressed((java.lang.Throwable) integratorException36);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray53);
        java.lang.String str65 = derivativeException64.getPattern();
        derivativeException34.addSuppressed((java.lang.Throwable) derivativeException64);
        integratorException14.addSuppressed((java.lang.Throwable) derivativeException64);
        java.lang.Object[] objArray68 = integratorException14.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str32, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str65, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 0.9d, 72.11102550927978d, (double) 8);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator10.setSafety((double) '#');
        dormandPrince853Integrator10.setMaxGrowth((double) 100.0f);
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        double double16 = dormandPrince853Integrator10.getSafety();
        double double17 = dormandPrince853Integrator10.getMaxGrowth();
        double double18 = dormandPrince853Integrator10.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException19);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException23);
        java.lang.Throwable[] throwableArray25 = integratorException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = integratorException24.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException24);
        integratorException19.addSuppressed((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException34);
        integratorException29.addSuppressed((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException35);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException37);
        integratorException14.addSuppressed((java.lang.Throwable) derivativeException37);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray9 = integratorException8.getArguments();
        java.lang.Object[] objArray10 = integratorException8.getArguments();
        java.lang.Object[] objArray11 = integratorException8.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray41, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray33, doubleArray46);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray62, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray54, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray33, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray23, doubleArray33);
        double[] doubleArray75 = new double[] {};
        double[] doubleArray76 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray75, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, 0.0d, doubleArray23, doubleArray76);
        double[] doubleArray79 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) '#', doubleArray23, doubleArray79);
        dormandPrince853Integrator80.setMinReduction(5.916079783099616d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        java.lang.String[] strArray3 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        java.lang.Throwable[] throwableArray5 = derivativeException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = derivativeException4.getSuppressed();
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        java.lang.String str16 = integratorException15.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray20 = integratorException15.getArguments();
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray42);
        java.lang.String str44 = integratorException43.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException43);
        java.lang.Object[] objArray46 = derivativeException45.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray46);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray55);
        java.lang.String str57 = integratorException56.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException56);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException56);
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException56);
        integratorException47.addSuppressed((java.lang.Throwable) derivativeException60);
        org.apache.commons.math.ode.IntegratorException integratorException62 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException60);
        integratorException33.addSuppressed((java.lang.Throwable) integratorException62);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException33);
        java.lang.Throwable[] throwableArray65 = integratorException33.getSuppressed();
        java.lang.Throwable[] throwableArray66 = integratorException33.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException67 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray66);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((-1.0d));
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        int int21 = dormandPrince853Integrator19.getOrder();
        int int22 = dormandPrince853Integrator19.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator19.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getSafety();
        double double9 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(10.059467437463484d);
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.Object[] objArray8 = integratorException3.getArguments();
        java.lang.Throwable[] throwableArray9 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 8.0d, (double) (byte) -1, 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray8);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException21);
        java.lang.Throwable[] throwableArray23 = integratorException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = integratorException22.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException22);
        java.lang.Throwable[] throwableArray26 = integratorException22.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        integratorException16.addSuppressed((java.lang.Throwable) integratorException28);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String str7 = derivativeException6.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations12 = null;
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray25, doubleArray30);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray30, doubleArray35);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray50, doubleArray51);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray51, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray43, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray35, doubleArray56);
        double[] doubleArray65 = new double[] {};
        double[] doubleArray66 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray65, doubleArray66);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray71 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray70, doubleArray71);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray66, doubleArray71);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, (double) 1L, doubleArray56, doubleArray71);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray81 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray80, doubleArray81);
        double[] doubleArray83 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.7470125727948562d, 0.7952707287670507d, doubleArray80, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations12, 17.88854381999832d, doubleArray56, (double) (byte) 0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException15);
        java.lang.String str17 = derivativeException15.getPattern();
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException38);
        derivativeException15.addSuppressed((java.lang.Throwable) integratorException39);
        integratorException12.addSuppressed((java.lang.Throwable) integratorException39);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException39);
        java.lang.Class<?> wildcardClass43 = integratorException39.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException21);
        java.lang.String str23 = integratorException15.getPattern();
        integratorException11.addSuppressed((java.lang.Throwable) integratorException15);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Throwable[] throwableArray26 = integratorException11.getSuppressed();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        java.lang.String str21 = derivativeException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str21, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.656854249492381d, (-1.0d), 8.0d, 55.71355310873648d);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        dormandPrince853Integrator20.setMaxGrowth(16.0d);
        double double24 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setSafety((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException7);
        derivativeException2.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.String str14 = derivativeException12.getPattern();
        java.lang.Class<?> wildcardClass15 = derivativeException12.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinStep();
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMinStep();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(3.7470125727948562d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray18, doubleArray23);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray23, doubleArray28);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray48, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray44, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray36, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray28, doubleArray49);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray58, doubleArray59);
        double[] doubleArray61 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray58, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.755012902585341d, 0.0d, doubleArray28, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, (double) 10L, doubleArray4, doubleArray58);
        int int65 = dormandPrince853Integrator64.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        double double24 = dormandPrince853Integrator4.getMaxGrowth();
        int int25 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, 10.059467437463484d, 0.9486832980505138d, (int) 'a');
        double double31 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, (double) 1, 9.485494822646622d, (int) (byte) 0);
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double24 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getMinReduction();
        dormandPrince853Integrator44.setMinReduction(16.0d);
        dormandPrince853Integrator44.setInitialStepSize(5.623413251903491d);
        double double50 = dormandPrince853Integrator44.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.2d + "'", double45 == 0.2d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (-1), (double) (short) 0, 0);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (short) -1, (double) 8, (int) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(10.059467437463484d);
        int int23 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        double double22 = dormandPrince853Integrator20.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 10L, (double) 1.0f, 1);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        double double16 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        double double18 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1);
        double double7 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 1.755012902585341d, 1.0d, 100);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        double double15 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler12 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler12);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(58.26662852782886d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 100L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (byte) 10, 17.88854381999832d, 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) 1.0f);
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        int int9 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(1.6870239755710472d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray5 = derivativeException4.getArguments();
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        integratorException9.addSuppressed((java.lang.Throwable) derivativeException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException22);
        java.lang.Throwable[] throwableArray24 = integratorException23.getSuppressed();
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray32);
        integratorException23.addSuppressed((java.lang.Throwable) integratorException33);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException23);
        java.lang.Throwable[] throwableArray36 = integratorException23.getSuppressed();
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException23);
        java.lang.String str38 = derivativeException19.getPattern();
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray42);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException43);
        java.lang.Throwable[] throwableArray45 = integratorException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = integratorException44.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        java.lang.String str48 = integratorException44.getPattern();
        java.lang.Object[] objArray49 = integratorException44.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray49);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray49);
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException51);
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException19);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray62);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray62);
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray62);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray62);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray62);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray62);
        org.apache.commons.math.ode.IntegratorException integratorException69 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray62);
        org.apache.commons.math.ode.IntegratorException integratorException70 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray62);
        java.lang.String str71 = integratorException70.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException70);
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException70);
        derivativeException19.addSuppressed((java.lang.Throwable) derivativeException73);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray80);
        org.apache.commons.math.ode.IntegratorException integratorException84 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException85 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray80);
        java.lang.String str86 = derivativeException85.getPattern();
        java.lang.Throwable[] throwableArray87 = derivativeException85.getSuppressed();
        derivativeException19.addSuppressed((java.lang.Throwable) derivativeException85);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str71, "org.apache.commons.math.ode.IntegratorException: ");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getSafety();
        double double20 = dormandPrince853Integrator18.getMinStep();
        dormandPrince853Integrator18.setSafety((double) '#');
        double double23 = dormandPrince853Integrator18.getMinStep();
        double double24 = dormandPrince853Integrator18.getMaxStep();
        double double25 = dormandPrince853Integrator18.getMinStep();
        double double26 = dormandPrince853Integrator18.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        java.lang.String str29 = dormandPrince853Integrator4.getName();
        java.lang.String str30 = dormandPrince853Integrator4.getName();
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(32.0d);
        dormandPrince853Integrator4.setMaxGrowth(98.48857801796105d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        java.lang.Throwable[] throwableArray13 = integratorException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = integratorException12.getSuppressed();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) (-1L));
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        java.lang.String str11 = derivativeException10.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.String str23 = derivativeException22.getPattern();
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray33);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("", strArray33);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray33);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray51);
        java.lang.String str53 = integratorException52.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException52);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException52);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException55);
        java.lang.String str57 = derivativeException55.getPattern();
        java.lang.Throwable[] throwableArray58 = derivativeException55.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray58);
        derivativeException42.addSuppressed((java.lang.Throwable) integratorException59);
        derivativeException22.addSuppressed((java.lang.Throwable) derivativeException42);
        derivativeException10.addSuppressed((java.lang.Throwable) derivativeException42);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException71 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray70);
        java.lang.String str72 = integratorException71.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException71);
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException71);
        java.lang.String str75 = integratorException71.getPattern();
        java.lang.Throwable[] throwableArray76 = integratorException71.getSuppressed();
        derivativeException10.addSuppressed((java.lang.Throwable) integratorException71);
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException71);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String str7 = derivativeException2.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.Object[] objArray9 = derivativeException2.getArguments();
        java.lang.Class<?> wildcardClass10 = objArray9.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        java.lang.Object[] objArray18 = integratorException17.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray18);
        java.lang.String str20 = integratorException19.toString();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str20, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(8.94427190999916d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.1622776601683795d + "'", double9 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) (-1), (double) 10L, 98.48857801796105d);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNull(stepHandler8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.43558771746928626d, (double) (short) 1, Double.NaN, (double) (byte) 0);
        dormandPrince853Integrator4.setSafety(35.0d);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) (short) 1, (double) 100L, (int) '#');
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertNotNull(stepHandler8);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) 100.0f, 10);
        dormandPrince853Integrator4.setMinReduction(32.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator21.setSafety((double) '#');
        int int24 = dormandPrince853Integrator21.getOrder();
        dormandPrince853Integrator21.setMinReduction((double) 10);
        java.lang.String str27 = dormandPrince853Integrator21.getName();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        dormandPrince853Integrator4.setSafety((double) 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) 10.0f, (double) 1, (double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 3.1622776601683795d, (double) 100.0f, (int) (short) -1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, 1.0d, 55.71355310873648d, (int) (short) 1);
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) (-1), (double) (short) 100, 0.43558771746928626d);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        int int7 = dormandPrince853Integrator4.getOrder();
        java.lang.Class<?> wildcardClass8 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (-1.0f), (double) 10.0f, 0.0d);
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) 1, (double) (-1L), 10);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator44.getStepHandler();
        double double47 = dormandPrince853Integrator44.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler48 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setMinReduction((double) 8);
        dormandPrince853Integrator44.setInitialStepSize((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.2d + "'", double47 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler48);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, 0.9d, 17.55012902585341d, (double) '4');
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        int int21 = dormandPrince853Integrator20.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 10L, (double) (short) -1, (double) 100L);
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray24);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException25);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38);
        java.lang.String str47 = integratorException46.getPattern();
        java.lang.Throwable[] throwableArray48 = integratorException46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = integratorException46.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException51);
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException51);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException51);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str47, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.String str6 = integratorException4.getPattern();
        java.lang.Throwable[] throwableArray7 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException4);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException13);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        java.lang.String str20 = derivativeException19.getPattern();
        java.lang.Throwable[] throwableArray21 = derivativeException19.getSuppressed();
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        java.lang.Throwable[] throwableArray26 = integratorException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = integratorException25.getSuppressed();
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        java.lang.Object[] objArray33 = derivativeException31.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", objArray33);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (byte) 1, Double.NaN, (double) '#');
        dormandPrince853Integrator21.setInitialStepSize((double) 10.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double29 = dormandPrince853Integrator28.getSafety();
        double double30 = dormandPrince853Integrator28.getMinStep();
        dormandPrince853Integrator28.setSafety((double) '#');
        double double33 = dormandPrince853Integrator28.getCurrentStepStart();
        double double34 = dormandPrince853Integrator28.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator28.getStepHandler();
        double double36 = dormandPrince853Integrator28.getCurrentStepStart();
        double double37 = dormandPrince853Integrator28.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator28.getStepHandler();
        dormandPrince853Integrator21.setStepHandler(stepHandler38);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((-1.0d));
        dormandPrince853Integrator4.setSafety((double) 'a');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.Object[] objArray12 = derivativeException10.getArguments();
        java.lang.Throwable[] throwableArray13 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException30);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray41);
        java.lang.String[] strArray52 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.IntegratorException integratorException54 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray52);
        java.lang.Object[] objArray56 = derivativeException55.getArguments();
        integratorException48.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException55);
        integratorException30.addSuppressed((java.lang.Throwable) derivativeException55);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException30);
        derivativeException14.addSuppressed((java.lang.Throwable) integratorException60);
        java.lang.Class<?> wildcardClass62 = derivativeException14.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 0.9d, (double) (short) -1, (double) (short) 100);
        int int5 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray10, doubleArray11);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray30, doubleArray31);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray31, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray23, doubleArray36);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray44, doubleArray45);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray51, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray52, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray44, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray36, doubleArray57);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray67, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray36, doubleArray67);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray79 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray78, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10L, doubleArray36, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, 0.0d, doubleArray11, doubleArray79);
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator82.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler83);
        java.lang.String str85 = dormandPrince853Integrator4.getName();
        double double86 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(stepHandler83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str85, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.9d + "'", double86 == 0.9d);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        dormandPrince853Integrator44.setSafety((double) (-1L));
        java.lang.String str47 = dormandPrince853Integrator44.getName();
        int int48 = dormandPrince853Integrator44.getOrder();
        double double49 = dormandPrince853Integrator44.getMaxGrowth();
        double double50 = dormandPrince853Integrator44.getMaxStep();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction52, (double) 1, (double) (byte) 1, 10);
        dormandPrince853Integrator44.setSafety((double) 8);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException24);
        integratorException19.addSuppressed((java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException19);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.Object[] objArray30 = integratorException28.getArguments();
        java.lang.Throwable[] throwableArray31 = integratorException28.getSuppressed();
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray39);
        integratorException28.addSuppressed((java.lang.Throwable) derivativeException46);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException46);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 0.2d, 0.0d, (int) (short) 100);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray17);
        java.lang.String str23 = integratorException22.getPattern();
        integratorException8.addSuppressed((java.lang.Throwable) integratorException22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException22);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray33);
        java.lang.String str35 = integratorException34.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        java.lang.Object[] objArray39 = integratorException34.getArguments();
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray45);
        org.apache.commons.math.ode.IntegratorException integratorException49 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray45);
        integratorException34.addSuppressed((java.lang.Throwable) derivativeException50);
        java.lang.Object[] objArray52 = derivativeException50.getArguments();
        integratorException22.addSuppressed((java.lang.Throwable) derivativeException50);
        java.lang.String[] strArray55 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray55);
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException56);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException57);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException58);
        derivativeException50.addSuppressed((java.lang.Throwable) derivativeException58);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException50);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException50);
        java.lang.Throwable[] throwableArray63 = derivativeException50.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException64 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException50);
        java.lang.String[] strArray69 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray69);
        org.apache.commons.math.ode.DerivativeException derivativeException71 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray69);
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray69);
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray69);
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException73);
        java.lang.String[] strArray77 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray77);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray81);
        org.apache.commons.math.ode.IntegratorException integratorException83 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException82);
        org.apache.commons.math.ode.DerivativeException derivativeException84 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException83);
        derivativeException79.addSuppressed((java.lang.Throwable) derivativeException84);
        derivativeException74.addSuppressed((java.lang.Throwable) derivativeException79);
        java.lang.Object[] objArray87 = derivativeException79.getArguments();
        derivativeException50.addSuppressed((java.lang.Throwable) derivativeException79);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str23, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        dormandPrince853Integrator4.setMinReduction(3.080070288241023d);
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.String str10 = integratorException8.getPattern();
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray20);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray20);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray31);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException32);
        java.lang.Throwable[] throwableArray34 = integratorException33.getSuppressed();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray42);
        integratorException33.addSuppressed((java.lang.Throwable) integratorException43);
        java.lang.Object[] objArray45 = integratorException33.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException33);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray50);
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException51);
        java.lang.Throwable[] throwableArray53 = integratorException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = integratorException52.getSuppressed();
        java.lang.Object[] objArray55 = integratorException52.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray55);
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException("", objArray55);
        java.lang.String[] strArray59 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException60);
        org.apache.commons.math.ode.IntegratorException integratorException62 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException60);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException66 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException65);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException65);
        derivativeException60.addSuppressed((java.lang.Throwable) derivativeException67);
        integratorException57.addSuppressed((java.lang.Throwable) derivativeException60);
        java.lang.Throwable[] throwableArray70 = integratorException57.getSuppressed();
        java.lang.String[] strArray76 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException77 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray76);
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray76);
        org.apache.commons.math.ode.IntegratorException integratorException79 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray76);
        org.apache.commons.math.ode.DerivativeException derivativeException80 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray76);
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray76);
        java.lang.Object[] objArray82 = derivativeException81.getArguments();
        integratorException57.addSuppressed((java.lang.Throwable) derivativeException81);
        integratorException33.addSuppressed((java.lang.Throwable) integratorException57);
        derivativeException29.addSuppressed((java.lang.Throwable) integratorException33);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException29);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str10, "org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        double[] doubleArray2 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray19, doubleArray24);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray63, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray55, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray34, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray24, doubleArray34);
        double[] doubleArray79 = new double[] { (short) -1, '4', 8, (byte) 1, (-1.0d) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (byte) 100, doubleArray24, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) 0L, doubleArray2, doubleArray24);
        java.lang.String str82 = dormandPrince853Integrator81.getName();
        double double83 = dormandPrince853Integrator81.getCurrentStepStart();
        double double84 = dormandPrince853Integrator81.getMinStep();
        dormandPrince853Integrator81.setSafety(33.46640106136302d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, 8.0, 1.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 3.1622776601683795d + "'", double84 == 3.1622776601683795d);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.4472135954999579d, (double) 0, 97.0d, 0.0d);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        double[] doubleArray2 = null;
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray19, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray11, doubleArray24);
        double[] doubleArray28 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray24, doubleArray28);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray44, doubleArray49);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray60 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray59, doubleArray60);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray67, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray59, doubleArray72);
        double[] doubleArray76 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray72, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) 10, doubleArray49, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) 1, doubleArray24, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) 'a', doubleArray2, doubleArray72);
        java.lang.String str81 = dormandPrince853Integrator80.getName();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str81, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray9);
        java.lang.Throwable[] throwableArray19 = derivativeException18.getSuppressed();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray28);
        java.lang.String str30 = integratorException29.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException29);
        java.lang.Object[] objArray32 = derivativeException31.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray32);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray41);
        java.lang.String str43 = integratorException42.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException42);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException42);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException42);
        integratorException33.addSuppressed((java.lang.Throwable) derivativeException46);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException46);
        derivativeException18.addSuppressed((java.lang.Throwable) integratorException48);
        java.lang.String str50 = integratorException48.toString();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str50, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getSafety();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(10.059467437463484d);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int18 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.1622776601683795d + "'", double17 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(55.71355310873648d, (double) (byte) 10, 10.059467437463484d, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety(18.1550495783196d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 55.71355310873648d + "'", double6 == 55.71355310873648d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (short) -1, 100.0d, (double) (short) 100);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        int int21 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setMaxGrowth((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        double double25 = dormandPrince853Integrator20.getMinReduction();
        double double26 = dormandPrince853Integrator20.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.916079783099616d, (double) (short) 1, (double) 100L, 31.622776601683793d);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getMaxStep();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(1.0d);
        int int15 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass19 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        double double18 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(5.623413251903491d);
        dormandPrince853Integrator4.setSafety((-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(10.0d);
        double double17 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction21, (double) 'a', (double) 100, (int) (byte) -1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, 20.0d, 0.9486832980505138d, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2d + "'", double19 == 0.2d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray23);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray43);
        java.lang.String str45 = integratorException44.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        java.lang.Object[] objArray49 = integratorException44.getArguments();
        java.lang.String[] strArray55 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray55);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray55);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray55);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray55);
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray55);
        integratorException44.addSuppressed((java.lang.Throwable) derivativeException60);
        org.apache.commons.math.ode.IntegratorException integratorException62 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException44);
        java.lang.Object[] objArray63 = integratorException44.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        derivativeException12.addSuppressed((java.lang.Throwable) integratorException44);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.755012902585341d, 2.0932702787842112d, 10.059467437463484d, 0.0d);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        int int7 = dormandPrince853Integrator4.getOrder();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) (short) 10, 7.113117640155691d, 31.622776601683793d);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction53, 0.9486832980505138d, (double) (-1), 100);
        double double58 = dormandPrince853Integrator44.getSafety();
        double double59 = dormandPrince853Integrator44.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9d + "'", double58 == 0.9d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, (double) 100.0f, (double) ' ', 55.71355310873648d);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.059467437463484d + "'", double5 == 10.059467437463484d);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 10L, (double) 1.0f, 1);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        double double20 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(2.0870738306760646d);
        java.lang.String str23 = dormandPrince853Integrator4.getName();
        double double24 = dormandPrince853Integrator4.getMaxStep();
        double double25 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.6870239755710472d, (double) (short) 10, (double) (byte) 1, 0.9d);
        double double31 = dormandPrince853Integrator30.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(stepHandler32);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        double double10 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(72.11102550927978d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        int int13 = dormandPrince853Integrator11.getOrder();
        int int14 = dormandPrince853Integrator11.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        int int21 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, (double) ' ', (double) (short) 100, (int) (short) 0);
        int int27 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double33 = dormandPrince853Integrator32.getSafety();
        double double34 = dormandPrince853Integrator32.getMinStep();
        java.lang.String str35 = dormandPrince853Integrator32.getName();
        double double36 = dormandPrince853Integrator32.getMaxStep();
        double double37 = dormandPrince853Integrator32.getMinStep();
        java.lang.String str38 = dormandPrince853Integrator32.getName();
        double double39 = dormandPrince853Integrator32.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator32.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler40);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        java.lang.Throwable[] throwableArray17 = derivativeException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = derivativeException16.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray18);
        java.lang.Class<?> wildcardClass20 = integratorException19.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(2.0870738306760646d);
        double double15 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(22.98848884907765d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.Throwable[] throwableArray14 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str16 = integratorException8.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str16, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        double double18 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) ' ', 0.43558771746928626d, (int) 'a');
        dormandPrince853Integrator4.setSafety(10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str12 = integratorException8.getPattern();
        java.lang.Throwable[] throwableArray13 = integratorException8.getSuppressed();
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        derivativeException19.addSuppressed((java.lang.Throwable) derivativeException26);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException36);
        derivativeException26.addSuppressed((java.lang.Throwable) integratorException37);
        java.lang.String str39 = derivativeException26.getPattern();
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException26);
        java.lang.Throwable[] throwableArray41 = integratorException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray8);
        java.lang.Object[] objArray17 = derivativeException16.getArguments();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException16);
        java.lang.String str18 = derivativeException17.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(40.0d, 100.0d, 8.94427190999916d, (double) 0L);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 40.0d + "'", double6 == 40.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, 10.0d, (double) (short) -1, 32.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1L, 0.43558771746928626d, (int) 'a');
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) (byte) 10);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 1);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Object[] objArray7 = integratorException6.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray9 = derivativeException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = derivativeException8.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException19);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException37);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException38);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray53);
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray53);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray53);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException66);
        java.lang.String[] strArray74 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray74);
        org.apache.commons.math.ode.DerivativeException derivativeException76 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray74);
        org.apache.commons.math.ode.DerivativeException derivativeException77 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray74);
        org.apache.commons.math.ode.IntegratorException integratorException78 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray74);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray74);
        org.apache.commons.math.ode.DerivativeException derivativeException80 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray74);
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException(throwable81);
        java.lang.String[] strArray85 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException86 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray85);
        java.lang.Throwable[] throwableArray87 = derivativeException86.getSuppressed();
        derivativeException82.addSuppressed((java.lang.Throwable) derivativeException86);
        java.lang.String str89 = derivativeException86.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException90 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException86);
        derivativeException80.addSuppressed((java.lang.Throwable) derivativeException90);
        java.lang.Object[] objArray92 = derivativeException90.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException93 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException90);
        derivativeException66.addSuppressed((java.lang.Throwable) derivativeException90);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str89, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 97.0d, (double) (short) 100, (double) (byte) 1);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 5.623413251903491d, 1.755012902585341d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety(97.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException5);
        java.lang.String str7 = integratorException5.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException5);
        java.lang.Throwable[] throwableArray9 = integratorException5.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray9);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        dormandPrince853Integrator4.setMaxGrowth(5.916079783099616d);
        double double14 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray15 = integratorException14.getSuppressed();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray23);
        integratorException14.addSuppressed((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        derivativeException8.addSuppressed((java.lang.Throwable) integratorException26);
        java.lang.String str28 = derivativeException8.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str28, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (-1.0d), (double) 0, (double) ' ');
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) (byte) 0, (double) 100L, (int) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray11 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = derivativeException12.getArguments();
        java.lang.Object[] objArray14 = derivativeException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray23);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray34);
        java.lang.String[] strArray44 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray48);
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException49);
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException50);
        derivativeException46.addSuppressed((java.lang.Throwable) derivativeException51);
        java.lang.Object[] objArray53 = derivativeException46.getArguments();
        java.lang.String str54 = derivativeException46.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException46);
        derivativeException41.addSuppressed((java.lang.Throwable) integratorException55);
        derivativeException26.addSuppressed((java.lang.Throwable) derivativeException41);
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException26);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray21);
        java.lang.Object[] objArray30 = integratorException29.getArguments();
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException39);
        derivativeException35.addSuppressed((java.lang.Throwable) derivativeException40);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException35);
        java.lang.String[] strArray47 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray47);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray47);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray47);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray47);
        derivativeException35.addSuppressed((java.lang.Throwable) integratorException51);
        integratorException29.addSuppressed((java.lang.Throwable) derivativeException35);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException67 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException71 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException72 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException73 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray64);
        java.lang.Throwable[] throwableArray74 = integratorException73.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException75 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray74);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray80);
        org.apache.commons.math.ode.IntegratorException integratorException82 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException81);
        java.lang.Throwable[] throwableArray83 = integratorException82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = integratorException82.getSuppressed();
        java.lang.Object[] objArray85 = integratorException82.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException86 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray85);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException("", objArray85);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray85);
        integratorException75.addSuppressed((java.lang.Throwable) integratorException88);
        integratorException29.addSuppressed((java.lang.Throwable) integratorException88);
        java.lang.String str91 = integratorException29.getPattern();
        java.lang.Throwable[] throwableArray92 = integratorException29.getSuppressed();
        derivativeException12.addSuppressed((java.lang.Throwable) integratorException29);
        java.lang.String str94 = integratorException29.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str91, "org.apache.commons.math.ode.IntegratorException: ");
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str94, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) '4');
        dormandPrince853Integrator4.setInitialStepSize(9.485494822646622d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(58.26662852782886d, (double) ' ', 3.080070288241023d, 1.755012902585341d);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 1.755012902585341d, 8.0d, 16.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 0.2d, (double) (-1L), (int) (byte) 100);
        dormandPrince853Integrator4.setInitialStepSize(9.924141172814958d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray13 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray13);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        java.lang.String str19 = integratorException18.getPattern();
        java.lang.Object[] objArray20 = integratorException18.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str19, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray12 = integratorException10.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray15 = derivativeException13.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        java.lang.Object[] objArray15 = derivativeException14.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray17 = derivativeException16.getSuppressed();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        double double12 = dormandPrince853Integrator9.getCurrentStepStart();
        java.lang.String str13 = dormandPrince853Integrator9.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double19 = dormandPrince853Integrator18.getMinStep();
        int int20 = dormandPrince853Integrator18.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double26 = dormandPrince853Integrator25.getSafety();
        double double27 = dormandPrince853Integrator25.getMinStep();
        double double28 = dormandPrince853Integrator25.getMinStep();
        double double29 = dormandPrince853Integrator25.getCurrentSignedStepsize();
        int int30 = dormandPrince853Integrator25.getOrder();
        double double31 = dormandPrince853Integrator25.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        dormandPrince853Integrator9.setStepHandler(stepHandler32);
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        double double36 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize(0.43558771746928626d);
        double double39 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException(throwable13);
        java.lang.String[] strArray17 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        java.lang.Throwable[] throwableArray19 = derivativeException18.getSuppressed();
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException18);
        java.lang.String str21 = derivativeException18.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException22);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray31);
        java.lang.String str33 = integratorException32.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException32);
        java.lang.String str35 = integratorException32.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException32);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException36);
        derivativeException22.addSuppressed((java.lang.Throwable) derivativeException36);
        java.lang.String str39 = derivativeException36.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException36);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        int int9 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(0.7952707287670507d);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray24);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException25);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.Throwable[] throwableArray28 = integratorException15.getSuppressed();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray30);
        java.lang.String str32 = derivativeException31.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray36);
        java.lang.String str38 = derivativeException37.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException37);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException37);
        derivativeException31.addSuppressed((java.lang.Throwable) derivativeException37);
        java.lang.Throwable[] throwableArray42 = derivativeException37.getSuppressed();
        java.lang.Throwable[] throwableArray43 = derivativeException37.getSuppressed();
        java.lang.Object[] objArray44 = derivativeException37.getArguments();
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException37);
        java.lang.String str46 = integratorException15.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str46, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 0.0f, 10.059467437463484d, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 52.0d, 22.98848884907765d, (int) (short) 10);
        double double21 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray10);
        java.lang.String str12 = integratorException11.getPattern();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        integratorException11.addSuppressed((java.lang.Throwable) derivativeException21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Throwable[] throwableArray24 = integratorException11.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray24);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.Object[] objArray12 = derivativeException8.getArguments();
        java.lang.String str13 = derivativeException8.getPattern();
        java.lang.String str14 = derivativeException8.getPattern();
        java.lang.Object[] objArray15 = derivativeException8.getArguments();
        java.lang.String str16 = derivativeException8.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str13, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str14, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str16, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getMinStep();
        dormandPrince853Integrator44.setSafety((double) '4');
        double double48 = dormandPrince853Integrator44.getCurrentStepStart();
        java.lang.Class<?> wildcardClass49 = dormandPrince853Integrator44.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        int int21 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setMinReduction(7.113117640155691d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        dormandPrince853Integrator4.setMinReduction((double) 0);
        double double21 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.1622776601683795d + "'", double16 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 1.0f, 0.0d, (int) '#');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator4.getStepHandler();
        double double20 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        int int26 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 10.0d, (double) '#', (double) '4');
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray15 = integratorException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = integratorException14.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException14);
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray20 = derivativeException5.getArguments();
        java.lang.Throwable[] throwableArray21 = derivativeException5.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray21);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray41, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray33, doubleArray46);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray62, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray54, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray33, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray23, doubleArray33);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray79, doubleArray80);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray80, doubleArray85);
        double[] doubleArray90 = new double[] {};
        double[] doubleArray91 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray90, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray85, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, (double) 0, doubleArray23, doubleArray90);
        double[] doubleArray95 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), 1.0d, doubleArray90, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        dormandPrince853Integrator20.setSafety(97.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        java.lang.String str25 = dormandPrince853Integrator20.getName();
        double[] doubleArray29 = new double[] { (-1.0d) };
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray45, doubleArray46);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray46, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray38, doubleArray51);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray60 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray59, doubleArray60);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray66, doubleArray67);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray67, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray59, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray51, doubleArray72);
        double[] doubleArray81 = new double[] {};
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray81, doubleArray82);
        double[] doubleArray86 = new double[] {};
        double[] doubleArray87 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray86, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray82, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray51, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, doubleArray29, doubleArray82);
        int int92 = dormandPrince853Integrator91.getOrder();
        java.lang.String str93 = dormandPrince853Integrator91.getName();
        org.apache.commons.math.ode.StepHandler stepHandler94 = dormandPrince853Integrator91.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler94);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str93, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler94);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getMinStep();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 10.0f);
        double double16 = dormandPrince853Integrator4.getMinReduction();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(3.1622776601683795d);
        int int19 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray8);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(33.46640106136302d, 1.755012902585341d, 9.924141172814958d, (double) 8);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.9d);
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, 35.0d, 0.0d, (double) (short) 0);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        int int9 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.Throwable[] throwableArray6 = integratorException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = integratorException5.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException5);
        java.lang.String str9 = integratorException5.getPattern();
        java.lang.Object[] objArray10 = integratorException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", objArray10);
        java.lang.Throwable[] throwableArray13 = integratorException12.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException12);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException15);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        double[] doubleArray2 = null;
        double[] doubleArray3 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, 55.71355310873648d, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        double double15 = dormandPrince853Integrator13.getMinStep();
        java.lang.String str16 = dormandPrince853Integrator13.getName();
        int int17 = dormandPrince853Integrator13.getOrder();
        double double18 = dormandPrince853Integrator13.getCurrentStepStart();
        double double19 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        int int25 = dormandPrince853Integrator24.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator24.getStepHandler();
        dormandPrince853Integrator13.setStepHandler(stepHandler26);
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 23.673797188510488d + "'", double5 == 23.673797188510488d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(stepHandler26);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) 100.0f, (double) (short) 1, 35.0d);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        java.lang.Object[] objArray17 = integratorException16.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (short) 0, (double) 10.0f, (double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) ' ');
        double double8 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 5.916079783099616d, (double) 0.0f, (int) '4');
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.Object[] objArray15 = derivativeException14.getArguments();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (short) 0, (double) 10.0f, (double) 10.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 0.9d, 0.9d, 0);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getSafety();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(55.71355310873648d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray23, doubleArray44);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray53, doubleArray54);
        double[] doubleArray56 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray53, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.755012902585341d, 0.0d, doubleArray23, doubleArray53);
        double[] doubleArray59 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.486832980505138d, 3.080070288241023d, doubleArray53, doubleArray59);
        double double61 = dormandPrince853Integrator60.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.080070288241023d + "'", double61 == 3.080070288241023d);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double double9 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 8, 3.080070288241023d, 8);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinStep();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        double double26 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction27, (double) (byte) 10, 0.0d, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        integratorException5.addSuppressed((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException5);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException5);
        java.lang.Throwable[] throwableArray15 = integratorException5.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray15);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) (-1L), (double) 0.0f, 0.2d);
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, 2.3713737056616555d, 1.6870239755710472d, 72.11102550927978d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10L, 0.9486832980505138d, 0);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.String str16 = derivativeException14.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str16, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(9.924141172814958d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator11.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double21 = dormandPrince853Integrator20.getMinStep();
        int int22 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        double double29 = dormandPrince853Integrator27.getMinStep();
        double double30 = dormandPrince853Integrator27.getMinStep();
        double double31 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator27.getOrder();
        double double33 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler34);
        dormandPrince853Integrator11.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        java.lang.String str38 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(31.622776601683793d);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str43 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler39);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler44);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String str7 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Object[] objArray16 = derivativeException14.getArguments();
        derivativeException9.addSuppressed((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray26);
        derivativeException9.addSuppressed((java.lang.Throwable) derivativeException34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException34);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 32.0d, (double) (-1L), (double) 8);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.String str6 = integratorException4.getPattern();
        java.lang.Throwable[] throwableArray7 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException4);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException13);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray16 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray16);
        java.lang.String str18 = integratorException17.getPattern();
        java.lang.String str19 = integratorException17.getPattern();
        java.lang.String str20 = integratorException17.getPattern();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str18, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str19, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str20, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) '#', (double) (short) 0, 10.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.1622776601683795d + "'", double8 == 3.1622776601683795d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = derivativeException8.getSuppressed();
        java.lang.String str11 = derivativeException8.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        java.lang.Object[] objArray14 = integratorException12.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray21);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException29);
        java.lang.Object[] objArray32 = derivativeException29.getArguments();
        derivativeException26.addSuppressed((java.lang.Throwable) derivativeException29);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException26);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray43);
        java.lang.String str45 = integratorException44.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException44);
        java.lang.String str49 = derivativeException48.getPattern();
        derivativeException35.addSuppressed((java.lang.Throwable) derivativeException48);
        integratorException12.addSuppressed((java.lang.Throwable) derivativeException35);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str11, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 10L, (double) (short) -1, (double) 100L);
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(1.755012902585341d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int16 = dormandPrince853Integrator15.getOrder();
        double double17 = dormandPrince853Integrator15.getSafety();
        dormandPrince853Integrator15.setSafety((double) (-1));
        int int20 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler26);
        dormandPrince853Integrator15.setSafety((double) (short) 0);
        dormandPrince853Integrator15.setSafety((double) (byte) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator36.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double40 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        dormandPrince853Integrator4.setMaxGrowth(62.30055074422899d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray11 = derivativeException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = derivativeException10.getSuppressed();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, 0.9d, (double) (byte) -1, Double.NaN);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray7 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Class<?> wildcardClass10 = derivativeException9.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 0.0d, (double) (short) 10, 1);
        double double18 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        double double20 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray12);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException13);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException17);
        java.lang.Throwable[] throwableArray19 = integratorException18.getSuppressed();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray27);
        integratorException18.addSuppressed((java.lang.Throwable) integratorException28);
        integratorException13.addSuppressed((java.lang.Throwable) integratorException18);
        java.lang.Throwable[] throwableArray31 = integratorException18.getSuppressed();
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException42);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException43);
        integratorException18.addSuppressed((java.lang.Throwable) derivativeException43);
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException18);
        java.lang.String[] strArray52 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray52);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray52);
        java.lang.String[] strArray59 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException60);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException60);
        java.lang.Object[] objArray63 = derivativeException60.getArguments();
        derivativeException57.addSuppressed((java.lang.Throwable) derivativeException60);
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException57);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray68);
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray72);
        org.apache.commons.math.ode.IntegratorException integratorException74 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException73);
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException74);
        derivativeException70.addSuppressed((java.lang.Throwable) derivativeException75);
        org.apache.commons.math.ode.IntegratorException integratorException77 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException70);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException80 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException80);
        java.lang.String[] strArray84 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException85 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray84);
        org.apache.commons.math.ode.DerivativeException derivativeException86 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray84);
        org.apache.commons.math.ode.DerivativeException derivativeException87 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException86);
        integratorException81.addSuppressed((java.lang.Throwable) derivativeException87);
        java.lang.String str89 = integratorException81.getPattern();
        integratorException77.addSuppressed((java.lang.Throwable) integratorException81);
        derivativeException57.addSuppressed((java.lang.Throwable) integratorException77);
        integratorException46.addSuppressed((java.lang.Throwable) derivativeException57);
        java.lang.String str93 = integratorException46.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str89, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str93, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, 8.94427190999916d, 40.0d, (-1));
        int int25 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        dormandPrince853Integrator4.setInitialStepSize(55.71355310873648d);
        double double12 = dormandPrince853Integrator4.getMinReduction();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        int int13 = dormandPrince853Integrator11.getOrder();
        int int14 = dormandPrince853Integrator11.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double19 = dormandPrince853Integrator4.getSafety();
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        double double21 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        java.lang.Class<?> wildcardClass15 = derivativeException14.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety(0.0d);
        dormandPrince853Integrator4.setMaxGrowth(17.88854381999832d);
        double double18 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) (-1), (double) 8, (double) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (-1.0f), (double) (short) 10, (double) 100L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction10, 16.0d, (double) 'a', (int) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator9.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, 10.0d, (double) (short) -1, 32.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) (byte) 0, 0.0d, 1);
        dormandPrince853Integrator4.setMaxGrowth(40.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.080070288241023d + "'", double13 == 3.080070288241023d);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Throwable[] throwableArray7 = integratorException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = integratorException6.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.String str10 = integratorException6.getPattern();
        java.lang.Object[] objArray11 = integratorException6.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", objArray11);
        java.lang.Throwable[] throwableArray15 = integratorException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = integratorException14.getSuppressed();
        java.lang.String str17 = integratorException14.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str17, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException21);
        java.lang.String str23 = integratorException15.getPattern();
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException30);
        derivativeException11.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.String str33 = derivativeException11.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException35);
        java.lang.String str37 = integratorException35.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException35);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) '4', (double) 'a', 72.11102550927978d);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        double double46 = dormandPrince853Integrator44.getSafety();
        double double47 = dormandPrince853Integrator44.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction48, (double) 8, (double) (byte) -1, (int) (byte) 0);
        java.lang.String str53 = dormandPrince853Integrator44.getName();
        dormandPrince853Integrator44.setMinReduction((double) 10);
        java.lang.String str56 = dormandPrince853Integrator44.getName();
        java.lang.String str57 = dormandPrince853Integrator44.getName();
        dormandPrince853Integrator44.setInitialStepSize((double) (byte) -1);
        double double60 = dormandPrince853Integrator44.getMaxGrowth();
        dormandPrince853Integrator44.setInitialStepSize(0.43558771746928626d);
        double double63 = dormandPrince853Integrator44.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.2d + "'", double47 == 0.2d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((-1.0d));
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (-1L));
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) 100.0f, (double) (byte) 1, (double) 1.0f);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1);
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException(throwable22);
        java.lang.String str24 = integratorException23.getPattern();
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        java.lang.Throwable[] throwableArray29 = integratorException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = integratorException28.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray39);
        java.lang.String str41 = integratorException40.getPattern();
        java.lang.Throwable[] throwableArray42 = integratorException40.getSuppressed();
        integratorException28.addSuppressed((java.lang.Throwable) integratorException40);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        integratorException23.addSuppressed((java.lang.Throwable) integratorException28);
        derivativeException20.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray51);
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray51);
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray51);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("", strArray51);
        java.lang.String[] strArray60 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray60);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray60);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray60);
        org.apache.commons.math.ode.IntegratorException integratorException64 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray60);
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException64);
        derivativeException55.addSuppressed((java.lang.Throwable) derivativeException65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException(throwable67);
        java.lang.String[] strArray71 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray71);
        java.lang.Throwable[] throwableArray73 = derivativeException72.getSuppressed();
        derivativeException68.addSuppressed((java.lang.Throwable) derivativeException72);
        java.lang.String str75 = derivativeException72.getPattern();
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray81);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray81);
        org.apache.commons.math.ode.DerivativeException derivativeException84 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray81);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray81);
        org.apache.commons.math.ode.IntegratorException integratorException86 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray81);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException86);
        derivativeException72.addSuppressed((java.lang.Throwable) integratorException87);
        org.apache.commons.math.ode.DerivativeException derivativeException89 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException87);
        derivativeException65.addSuppressed((java.lang.Throwable) derivativeException89);
        integratorException28.addSuppressed((java.lang.Throwable) derivativeException89);
        org.apache.commons.math.ode.IntegratorException integratorException92 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.0d, 9.486832980505138d, 33.46640106136302d, (double) (short) -1);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(62.30055074422899d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray22);
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException29);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.String str8 = integratorException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String str12 = integratorException11.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        int int21 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setMaxGrowth((double) 0L);
        double double24 = dormandPrince853Integrator20.getMinStep();
        java.lang.Class<?> wildcardClass25 = dormandPrince853Integrator20.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException(throwable22);
        java.lang.String str24 = integratorException23.getPattern();
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        java.lang.Throwable[] throwableArray29 = integratorException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = integratorException28.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray39);
        java.lang.String str41 = integratorException40.getPattern();
        java.lang.Throwable[] throwableArray42 = integratorException40.getSuppressed();
        integratorException28.addSuppressed((java.lang.Throwable) integratorException40);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        integratorException23.addSuppressed((java.lang.Throwable) integratorException28);
        derivativeException20.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.Throwable[] throwableArray47 = derivativeException20.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.Object[] objArray8 = derivativeException7.getArguments();
        java.lang.Throwable[] throwableArray9 = derivativeException7.getSuppressed();
        java.lang.String str10 = derivativeException7.getPattern();
        java.lang.Object[] objArray11 = derivativeException7.getArguments();
        java.lang.Class<?> wildcardClass12 = objArray11.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        double double46 = dormandPrince853Integrator44.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator44.getStepHandler();
        int int48 = dormandPrince853Integrator44.getOrder();
        dormandPrince853Integrator44.setInitialStepSize((double) 0L);
        dormandPrince853Integrator44.setMaxGrowth(23.673797188510488d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray12 = derivativeException11.getArguments();
        java.lang.String str13 = derivativeException11.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Object[] objArray15 = derivativeException11.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        int int22 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.43558771746928626d);
        int int25 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) 1);
        double double28 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(Double.NaN);
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int21 = dormandPrince853Integrator20.getOrder();
        double double22 = dormandPrince853Integrator20.getSafety();
        java.lang.String str23 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int31 = dormandPrince853Integrator30.getOrder();
        double double32 = dormandPrince853Integrator30.getSafety();
        dormandPrince853Integrator30.setSafety((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler35);
        dormandPrince853Integrator20.setSafety((-1.0d));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double44 = dormandPrince853Integrator43.getSafety();
        double double45 = dormandPrince853Integrator43.getMinStep();
        double double46 = dormandPrince853Integrator43.getMinStep();
        double double47 = dormandPrince853Integrator43.getCurrentSignedStepsize();
        int int48 = dormandPrince853Integrator43.getOrder();
        double double49 = dormandPrince853Integrator43.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator43.setMaxGrowth(0.0d);
        int int53 = dormandPrince853Integrator43.getOrder();
        double double54 = dormandPrince853Integrator43.getMaxGrowth();
        dormandPrince853Integrator43.setMinReduction(3.080070288241023d);
        double double57 = dormandPrince853Integrator43.getCurrentSignedStepsize();
        dormandPrince853Integrator43.setSafety(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler60);
        dormandPrince853Integrator4.setStepHandler(stepHandler60);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9d + "'", double44 == 0.9d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator16.setMinReduction((double) 1);
        dormandPrince853Integrator16.setMaxGrowth((double) (byte) -1);
        double double21 = dormandPrince853Integrator16.getMaxGrowth();
        int int22 = dormandPrince853Integrator16.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(55.71355310873648d);
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        int int30 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray8, doubleArray21);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray21, doubleArray42);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray51, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray52, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray21, doubleArray52);
        int int61 = dormandPrince853Integrator60.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator60.addSwitchingFunction(switchingFunction62, (double) 1.0f, 0.0d, 8);
        dormandPrince853Integrator60.setSafety(9.485494822646622d);
        int int69 = dormandPrince853Integrator60.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getSafety();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getSafety();
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(3.138288992714996d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        int int8 = dormandPrince853Integrator4.getOrder();
        int int9 = dormandPrince853Integrator4.getOrder();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations12 = null;
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray30, doubleArray31);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray35, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray31, doubleArray36);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray36, doubleArray41);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray57, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray49, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray41, doubleArray62);
        double[] doubleArray67 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, doubleArray41, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations12, (double) '4', doubleArray16, 9.485494822646622d, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        dormandPrince853Integrator4.setMaxGrowth((double) (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double16 = dormandPrince853Integrator15.getSafety();
        double double17 = dormandPrince853Integrator15.getMinStep();
        dormandPrince853Integrator15.setSafety((double) '#');
        double double20 = dormandPrince853Integrator15.getCurrentStepStart();
        double double21 = dormandPrince853Integrator15.getMaxStep();
        dormandPrince853Integrator15.setMinReduction((double) (short) 10);
        int int24 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction25, (double) 1.0f, 0.0d, (int) '#');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', 0.0d, (double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator34.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double double38 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0.0f, (double) (short) 1, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(16.0d);
        dormandPrince853Integrator4.setMaxGrowth(18.1550495783196d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((-1.0d));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator18.setSafety((double) '#');
        dormandPrince853Integrator18.setMaxGrowth((double) 100.0f);
        java.lang.String str23 = dormandPrince853Integrator18.getName();
        double double24 = dormandPrince853Integrator18.getSafety();
        double double25 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double31 = dormandPrince853Integrator30.getSafety();
        int int32 = dormandPrince853Integrator30.getOrder();
        int int33 = dormandPrince853Integrator30.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator30.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double40 = dormandPrince853Integrator39.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator39.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler46);
        dormandPrince853Integrator18.setStepHandler(stepHandler46);
        dormandPrince853Integrator4.setStepHandler(stepHandler46);
        double double50 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, 97.0d, Double.NaN, (double) '#');
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        int int7 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety(5.623413251903491d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (short) 0, (double) (-1.0f), (double) (short) -1);
        java.lang.String str15 = dormandPrince853Integrator14.getName();
        double double16 = dormandPrince853Integrator14.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        double double23 = dormandPrince853Integrator21.getMinStep();
        dormandPrince853Integrator21.setSafety((double) '#');
        double double26 = dormandPrince853Integrator21.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        double double33 = dormandPrince853Integrator31.getMinStep();
        dormandPrince853Integrator31.setSafety((double) '#');
        double double36 = dormandPrince853Integrator31.getCurrentStepStart();
        double double37 = dormandPrince853Integrator31.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator21.setStepHandler(stepHandler38);
        dormandPrince853Integrator14.setStepHandler(stepHandler38);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 97.0d + "'", double6 == 97.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray20, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray12, doubleArray25);
        double double29 = dormandPrince853Integrator28.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        double double41 = dormandPrince853Integrator39.getMinStep();
        double double42 = dormandPrince853Integrator39.getCurrentStepStart();
        java.lang.String str43 = dormandPrince853Integrator39.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double49 = dormandPrince853Integrator48.getMinStep();
        int int50 = dormandPrince853Integrator48.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double56 = dormandPrince853Integrator55.getSafety();
        double double57 = dormandPrince853Integrator55.getMinStep();
        double double58 = dormandPrince853Integrator55.getMinStep();
        double double59 = dormandPrince853Integrator55.getCurrentSignedStepsize();
        int int60 = dormandPrince853Integrator55.getOrder();
        double double61 = dormandPrince853Integrator55.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler62 = dormandPrince853Integrator55.getStepHandler();
        dormandPrince853Integrator48.setStepHandler(stepHandler62);
        dormandPrince853Integrator39.setStepHandler(stepHandler62);
        dormandPrince853Integrator34.setStepHandler(stepHandler62);
        dormandPrince853Integrator28.setStepHandler(stepHandler62);
        dormandPrince853Integrator4.setStepHandler(stepHandler62);
        double double68 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str69 = dormandPrince853Integrator4.getName();
        java.lang.String str70 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9486832980505138d + "'", double29 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler62);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 1, (double) (byte) 1, (int) (byte) 1);
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) 0.0f, 74.64151198142793d, 2.0870738306760646d);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        java.lang.Throwable[] throwableArray15 = integratorException13.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray15);
        java.lang.String str18 = integratorException17.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: " + "'", str18, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 1, 55.71355310873648d, (double) 100.0f);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 1.6870239755710472d, 2.3713737056616555d, (double) (-1));
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.2988548708655048d + "'", double5 == 1.2988548708655048d);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        double double16 = dormandPrince853Integrator4.getMinReduction();
        double double17 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, Double.NaN, (double) (byte) 0, 58.26662852782886d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth(8.94427190999916d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) '#');
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 0);
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, (double) (-1L), (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = derivativeException8.getSuppressed();
        java.lang.String str11 = derivativeException8.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        java.lang.Object[] objArray14 = integratorException12.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException12);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str11, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(58.26662852782886d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 1.0d, (double) 10L, (int) '#');
        double double18 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 58.26662852782886d + "'", double18 == 58.26662852782886d);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getMinStep();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        java.lang.Object[] objArray11 = integratorException8.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        java.lang.String str19 = integratorException18.getPattern();
        java.lang.Throwable[] throwableArray20 = integratorException18.getSuppressed();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str19, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        java.lang.String str13 = integratorException12.getPattern();
        java.lang.String str14 = integratorException12.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str13, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str14, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        double[] doubleArray2 = null;
        double[] doubleArray3 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.0932702787842112d, 7.113117640155691d, doubleArray2, doubleArray3);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray11 = derivativeException4.getArguments();
        java.lang.String str12 = derivativeException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray14 = derivativeException4.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException(throwable16);
        java.lang.String str18 = integratorException17.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException17);
        java.lang.Throwable[] throwableArray20 = integratorException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray20);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException21);
        java.lang.Throwable[] throwableArray24 = integratorException21.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException21);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray32);
        integratorException25.addSuppressed((java.lang.Throwable) integratorException38);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException4);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray15);
        java.lang.String str17 = integratorException16.getPattern();
        java.lang.Throwable[] throwableArray18 = integratorException16.getSuppressed();
        integratorException4.addSuppressed((java.lang.Throwable) integratorException16);
        java.lang.String str20 = integratorException16.getPattern();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray28);
        java.lang.String str30 = integratorException29.getPattern();
        java.lang.String[] strArray35 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray35);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray35);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray35);
        integratorException29.addSuppressed((java.lang.Throwable) derivativeException39);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException29);
        java.lang.String str42 = integratorException29.getPattern();
        integratorException16.addSuppressed((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.IntegratorException integratorException45 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException29);
        java.lang.Object[] objArray46 = integratorException45.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", objArray46);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray12);
        java.lang.Object[] objArray25 = derivativeException24.getArguments();
        java.lang.String str26 = derivativeException24.getPattern();
        java.lang.Throwable[] throwableArray27 = derivativeException24.getSuppressed();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: " + "'", str26, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getSafety();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        dormandPrince853Integrator13.setMinReduction((double) (short) -1);
        dormandPrince853Integrator13.setInitialStepSize((double) (byte) 1);
        dormandPrince853Integrator13.setSafety(0.9486832980505138d);
        double double21 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator13.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth(31.71666350274487d);
        int int28 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray8);
        java.lang.String str10 = integratorException9.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException13);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        derivativeException15.addSuppressed((java.lang.Throwable) derivativeException18);
        java.lang.String str22 = derivativeException18.getPattern();
        java.lang.Object[] objArray23 = derivativeException18.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray23);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray11 = derivativeException4.getArguments();
        java.lang.String str12 = derivativeException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray14 = derivativeException4.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException(throwable16);
        java.lang.String str18 = integratorException17.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException17);
        java.lang.Throwable[] throwableArray20 = integratorException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray20);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException21);
        java.lang.Throwable[] throwableArray24 = integratorException21.getSuppressed();
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException33);
        integratorException28.addSuppressed((java.lang.Throwable) derivativeException34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        integratorException21.addSuppressed((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        java.lang.String str40 = integratorException28.getPattern();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 'a', 0.0d, 8);
        dormandPrince853Integrator4.setSafety((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) (short) 100, (double) (byte) 1, (int) (byte) -1);
        double double20 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray4);
        java.lang.Object[] objArray9 = derivativeException8.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str11 = integratorException10.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str11, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException4);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = integratorException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        integratorException4.addSuppressed((java.lang.Throwable) integratorException9);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException22);
        integratorException17.addSuppressed((java.lang.Throwable) derivativeException23);
        java.lang.String str25 = integratorException17.getPattern();
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        integratorException17.addSuppressed((java.lang.Throwable) derivativeException32);
        integratorException4.addSuppressed((java.lang.Throwable) derivativeException32);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException32);
        java.lang.Throwable[] throwableArray36 = integratorException35.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException38);
        java.lang.Throwable[] throwableArray40 = derivativeException38.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException38);
        java.lang.Throwable[] throwableArray42 = derivativeException38.getSuppressed();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (short) 100, (double) 100L, (int) (byte) 10);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, 0.4472135954999579d, (double) 10L, (double) (-1));
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, 0.43558771746928626d, 0.0d, (double) 1.0f);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 100);
        dormandPrince853Integrator4.setMinReduction((double) ' ');
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        double[] doubleArray2 = null;
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray17, doubleArray22);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray32, doubleArray33);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray37, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray33, doubleArray38);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray38, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray17, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (byte) -1, doubleArray2, doubleArray38);
        java.lang.String str49 = dormandPrince853Integrator48.getName();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.Object[] objArray5 = derivativeException2.getArguments();
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Object[] objArray18 = derivativeException14.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        derivativeException2.addSuppressed((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Class<?> wildcardClass22 = integratorException21.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray5);
        java.lang.Throwable[] throwableArray11 = derivativeException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = derivativeException10.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 0.2d, 0.0d, (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int18 = dormandPrince853Integrator17.getOrder();
        double double19 = dormandPrince853Integrator17.getSafety();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setMaxGrowth((double) (short) -1);
        double double23 = dormandPrince853Integrator17.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator28.setMaxGrowth(0.0d);
        dormandPrince853Integrator28.setMinReduction((double) 1L);
        double double33 = dormandPrince853Integrator28.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 16.0d, 58.26662852782886d, (double) 8);
        dormandPrince853Integrator38.setMaxGrowth((double) (byte) 1);
        double double41 = dormandPrince853Integrator38.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator38.getStepHandler();
        dormandPrince853Integrator28.setStepHandler(stepHandler42);
        dormandPrince853Integrator17.setStepHandler(stepHandler42);
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        double double46 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.2d + "'", double41 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.2d + "'", double46 == 0.2d);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 28.284271247461902d, 33.46640106136302d, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        java.lang.String str5 = derivativeException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray10 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        java.lang.Throwable[] throwableArray14 = integratorException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = integratorException13.getSuppressed();
        java.lang.Object[] objArray16 = integratorException13.getArguments();
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray22);
        java.lang.Object[] objArray28 = derivativeException27.getArguments();
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException27);
        integratorException4.addSuppressed((java.lang.Throwable) integratorException13);
        java.lang.Object[] objArray31 = integratorException4.getArguments();
        java.lang.String str32 = integratorException4.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str32, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(52.0d);
        double double12 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray3);
        java.lang.Object[] objArray7 = integratorException6.getArguments();
        java.lang.String str8 = integratorException6.getPattern();
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException(throwable10);
        java.lang.String str12 = integratorException11.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Throwable[] throwableArray14 = integratorException11.getSuppressed();
        java.lang.Object[] objArray15 = integratorException11.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Object[] objArray17 = integratorException11.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Throwable[] throwableArray19 = integratorException18.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray19);
        integratorException6.addSuppressed((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray22 = integratorException20.getArguments();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str8, "org.apache.commons.math.ode.IntegratorException: hi!");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 1.755012902585341d, 52.0d, (double) (short) 100);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        double[] doubleArray2 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray25, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray21, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray13, doubleArray26);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray26, doubleArray47);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray57, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray26, doubleArray57);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10L, doubleArray26, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, 5.623413251903491d, doubleArray2, doubleArray26);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction73 = null;
        dormandPrince853Integrator72.addSwitchingFunction(switchingFunction73, 3.1622776601683795d, (double) (byte) 0, (int) (short) 10);
        int int78 = dormandPrince853Integrator72.getOrder();
        java.lang.String str79 = dormandPrince853Integrator72.getName();
        double double80 = dormandPrince853Integrator72.getSafety();
        double double81 = dormandPrince853Integrator72.getCurrentStepStart();
        double double82 = dormandPrince853Integrator72.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.9d + "'", double80 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, (double) 10L, (-1));
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 10);
        dormandPrince853Integrator4.setMaxGrowth(Double.NaN);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) '#');
        double double25 = dormandPrince853Integrator20.getMinStep();
        double double26 = dormandPrince853Integrator20.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        dormandPrince853Integrator4.setInitialStepSize(9.848857801796104d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double36 = dormandPrince853Integrator35.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction37, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator35.getStepHandler();
        int int43 = dormandPrince853Integrator35.getOrder();
        java.lang.String str44 = dormandPrince853Integrator35.getName();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler45);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler45);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        double[] doubleArray2 = null;
        double[] doubleArray3 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, 55.71355310873648d, doubleArray2, doubleArray3);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10L, (double) 100, (int) 'a');
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 23.673797188510488d + "'", double10 == 23.673797188510488d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 16.0d, 58.26662852782886d, (double) 8);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations5 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray16 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray13, doubleArray16);
        double[] doubleArray18 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.94427190999916d, (-1.0d), doubleArray13, doubleArray18);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        double[] doubleArray46 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray42, doubleArray46);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray57, doubleArray62);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray62, doubleArray67);
        double[] doubleArray77 = new double[] {};
        double[] doubleArray78 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray77, doubleArray78);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        double[] doubleArray89 = new double[] {};
        double[] doubleArray90 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray89, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray85, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray77, doubleArray90);
        double[] doubleArray94 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray90, doubleArray94);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) 10, doubleArray67, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) 1, doubleArray42, doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations5, 17.88854381999832d, doubleArray18, (double) 'a', doubleArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 1);
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (byte) 1, 0.0d, (int) ' ');
        double double19 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(7.113117640155691d, (double) 100L, (double) 10L, 9.924141172814958d);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray33, doubleArray34);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray34, doubleArray39);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray44, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray18, doubleArray39);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray58, doubleArray63);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray63, doubleArray68);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray79 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray78, doubleArray79);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray84 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray83, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray79, doubleArray84);
        double[] doubleArray89 = new double[] {};
        double[] doubleArray90 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray89, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray84, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray63, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, (double) (-1L), doubleArray39, doubleArray63);
        double[] doubleArray95 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(18.1550495783196d, (double) 100.0f, doubleArray63, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getSafety();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 3.1622776601683795d, (double) (byte) 0, 0.2d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        double double23 = dormandPrince853Integrator21.getMinStep();
        dormandPrince853Integrator21.setSafety((double) '#');
        double double26 = dormandPrince853Integrator21.getCurrentStepStart();
        double double27 = dormandPrince853Integrator21.getMaxStep();
        double double28 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double34 = dormandPrince853Integrator33.getMinStep();
        int int35 = dormandPrince853Integrator33.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double41 = dormandPrince853Integrator40.getSafety();
        double double42 = dormandPrince853Integrator40.getMinStep();
        double double43 = dormandPrince853Integrator40.getMinStep();
        double double44 = dormandPrince853Integrator40.getCurrentSignedStepsize();
        int int45 = dormandPrince853Integrator40.getOrder();
        double double46 = dormandPrince853Integrator40.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator40.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler47);
        dormandPrince853Integrator21.setStepHandler(stepHandler47);
        dormandPrince853Integrator16.setStepHandler(stepHandler47);
        dormandPrince853Integrator4.setStepHandler(stepHandler47);
        dormandPrince853Integrator4.setSafety(16.0d);
        double double54 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double60 = dormandPrince853Integrator59.getSafety();
        double double61 = dormandPrince853Integrator59.getMinStep();
        double double62 = dormandPrince853Integrator59.getMinStep();
        double double63 = dormandPrince853Integrator59.getCurrentSignedStepsize();
        int int64 = dormandPrince853Integrator59.getOrder();
        double double65 = dormandPrince853Integrator59.getSafety();
        double double66 = dormandPrince853Integrator59.getMaxStep();
        double double67 = dormandPrince853Integrator59.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9d + "'", double41 == 0.9d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 16.0d + "'", double54 == 16.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9d + "'", double60 == 0.9d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9d + "'", double65 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9d + "'", double67 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler68);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) ' ', 3.080070288241023d, 52.0d);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.43558771746928626d, (double) (-1.0f), 5.623413251903491d);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException1 = new org.apache.commons.math.ode.DerivativeException(throwable0);
        java.lang.String[] strArray4 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        java.lang.Throwable[] throwableArray6 = derivativeException5.getSuppressed();
        derivativeException1.addSuppressed((java.lang.Throwable) derivativeException5);
        java.lang.String str8 = derivativeException5.getPattern();
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray22 = integratorException20.getArguments();
        java.lang.String str23 = integratorException20.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str23, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, 100.0d, (double) 'a', (double) '4');
        dormandPrince853Integrator4.setMaxGrowth((double) 10);
        double double7 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray21 = integratorException20.getArguments();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (short) 0, (double) 10.0f, (double) 10.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 0.9d, 0.9d, 0);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), (double) 10, 7.113117640155691d);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        int int13 = dormandPrince853Integrator11.getOrder();
        int int14 = dormandPrince853Integrator11.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        dormandPrince853Integrator4.setSafety((double) (-1));
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, 3.7470125727948562d, (double) (-1L), (int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setMaxGrowth((double) 100);
        double double25 = dormandPrince853Integrator20.getMinReduction();
        dormandPrince853Integrator20.setSafety((double) 100);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 0.9d, (double) (byte) 0, (int) (short) 100);
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str23 = dormandPrince853Integrator4.getName();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations25 = null;
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations25, (double) 0, doubleArray44, 0.4472135954999579d, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.String str19 = derivativeException18.getPattern();
        java.lang.String str20 = derivativeException18.getPattern();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str19, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str20, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        int int46 = dormandPrince853Integrator44.getOrder();
        double double47 = dormandPrince853Integrator44.getMaxGrowth();
        double double48 = dormandPrince853Integrator44.getCurrentStepStart();
        double double49 = dormandPrince853Integrator44.getMaxGrowth();
        double double50 = dormandPrince853Integrator44.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9d + "'", double50 == 0.9d);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        java.lang.String str4 = derivativeException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException7);
        java.lang.String str9 = integratorException7.getPattern();
        java.lang.Throwable[] throwableArray10 = integratorException7.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray10);
        java.lang.String str12 = integratorException11.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: " + "'", str12, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ");
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(0.9d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator16.setInitialStepSize((double) 'a');
        dormandPrince853Integrator16.setInitialStepSize((double) ' ');
        double double21 = dormandPrince853Integrator16.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        double double24 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        int int46 = dormandPrince853Integrator44.getOrder();
        double double47 = dormandPrince853Integrator44.getMaxGrowth();
        double double48 = dormandPrince853Integrator44.getCurrentStepStart();
        dormandPrince853Integrator44.setMaxGrowth((double) 0L);
        dormandPrince853Integrator44.setInitialStepSize(5.623413251903491d);
        dormandPrince853Integrator44.setInitialStepSize((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray12 = derivativeException11.getArguments();
        java.lang.Object[] objArray13 = derivativeException11.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray13);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, 2.0932702787842112d, (double) (short) -1, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize(5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator21.setInitialStepSize((double) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction24, (double) (short) 0, (double) 0.0f, (int) (byte) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction29, 0.0d, (double) 100L, (int) (byte) 100);
        double double34 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize(40.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        double double9 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety(9.848857801796104d);
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", strArray10);
        java.lang.String str21 = derivativeException20.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!" + "'", str21, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.String str8 = integratorException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String str10 = integratorException3.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str10, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 5.916079783099616d, (double) (short) -1, 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: hi!", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 100L, 0.0d, 32.0d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray6, doubleArray40);
        dormandPrince853Integrator44.setSafety(10.0d);
        dormandPrince853Integrator44.setMaxGrowth(Double.NaN);
        int int49 = dormandPrince853Integrator44.getOrder();
        double double50 = dormandPrince853Integrator44.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        java.lang.String str5 = derivativeException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray10 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", objArray10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.Throwable[] throwableArray6 = integratorException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = integratorException5.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException5);
        java.lang.String str9 = integratorException5.getPattern();
        java.lang.Object[] objArray10 = integratorException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray10);
        java.lang.Throwable[] throwableArray13 = integratorException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = integratorException12.getSuppressed();
        java.lang.String str15 = integratorException12.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str15, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException(throwable13);
        java.lang.String str15 = integratorException14.getPattern();
        java.lang.Object[] objArray16 = integratorException14.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        derivativeException12.addSuppressed((java.lang.Throwable) integratorException14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        java.lang.Object[] objArray20 = integratorException19.getArguments();
        java.lang.Throwable[] throwableArray21 = integratorException19.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMinReduction(10.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(3.080070288241023d);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, 0.0d, (double) 1L, 0.9d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.IntegratorException integratorException1 = new org.apache.commons.math.ode.IntegratorException(throwable0);
        org.apache.commons.math.ode.IntegratorException integratorException2 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException1);
        java.lang.String str3 = integratorException1.getPattern();
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = integratorException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray13 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray13);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray25);
        java.lang.Throwable[] throwableArray35 = derivativeException34.getSuppressed();
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException34);
        integratorException1.addSuppressed((java.lang.Throwable) derivativeException34);
        java.lang.String str38 = integratorException1.getPattern();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray8);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray24);
        java.lang.String str26 = integratorException25.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        java.lang.Object[] objArray30 = integratorException25.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        derivativeException16.addSuppressed((java.lang.Throwable) integratorException25);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException11);
        derivativeException8.addSuppressed((java.lang.Throwable) derivativeException11);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException17);
        java.lang.Throwable[] throwableArray20 = derivativeException17.getSuppressed();
        derivativeException11.addSuppressed((java.lang.Throwable) derivativeException17);
        java.lang.Throwable[] throwableArray22 = derivativeException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException17);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '4', (double) 0.0f, 1);
        dormandPrince853Integrator4.setMinReduction((double) (short) 0);
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.IntegratorException integratorException1 = new org.apache.commons.math.ode.IntegratorException(throwable0);
        java.lang.String str2 = integratorException1.getPattern();
        java.lang.Object[] objArray3 = integratorException1.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException1);
        java.lang.Throwable[] throwableArray5 = integratorException1.getSuppressed();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, 31.71666350274487d, (double) (-1L), 28.284271247461902d);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) 10, (double) (short) 1, 100.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) (-1));
        dormandPrince853Integrator4.setInitialStepSize(Double.NaN);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        java.lang.String str17 = integratorException16.getPattern();
        java.lang.Throwable[] throwableArray18 = integratorException16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = integratorException16.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        java.lang.Throwable[] throwableArray21 = derivativeException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = derivativeException20.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException20);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str17, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) '#', (double) 0, 0.9486832980505138d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray10);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, 9.848857801796104d, (double) 0, (-1.0d));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety(35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray23);
        java.lang.String str25 = integratorException24.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException24);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException27);
        java.lang.String str29 = derivativeException27.getPattern();
        java.lang.Throwable[] throwableArray30 = derivativeException27.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray30);
        java.lang.Throwable[] throwableArray32 = integratorException31.getSuppressed();
        integratorException14.addSuppressed((java.lang.Throwable) integratorException31);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException31);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 0.0d, (double) 0L, 10.0d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass6 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double18 = dormandPrince853Integrator17.getSafety();
        dormandPrince853Integrator17.setMinReduction((double) (short) -1);
        dormandPrince853Integrator17.setInitialStepSize((double) (byte) 1);
        java.lang.String str23 = dormandPrince853Integrator17.getName();
        java.lang.String str24 = dormandPrince853Integrator17.getName();
        double double25 = dormandPrince853Integrator17.getCurrentStepStart();
        dormandPrince853Integrator17.setInitialStepSize((-1.0d));
        java.lang.String str28 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setMinReduction((double) ' ');
        dormandPrince853Integrator17.setInitialStepSize((double) (byte) -1);
        double double33 = dormandPrince853Integrator17.getMaxGrowth();
        java.lang.String str34 = dormandPrince853Integrator17.getName();
        java.lang.String str35 = dormandPrince853Integrator17.getName();
        java.lang.String str36 = dormandPrince853Integrator17.getName();
        java.lang.String str37 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setInitialStepSize((double) 0.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator44.setSafety((double) '#');
        dormandPrince853Integrator44.setMaxGrowth((double) 100.0f);
        java.lang.String str49 = dormandPrince853Integrator44.getName();
        double double50 = dormandPrince853Integrator44.getSafety();
        double double51 = dormandPrince853Integrator44.getMaxGrowth();
        double double52 = dormandPrince853Integrator44.getMaxStep();
        double double53 = dormandPrince853Integrator44.getCurrentStepStart();
        double double54 = dormandPrince853Integrator44.getSafety();
        java.lang.String str55 = dormandPrince853Integrator44.getName();
        double double56 = dormandPrince853Integrator44.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler57);
        dormandPrince853Integrator4.setStepHandler(stepHandler57);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.2d + "'", double56 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler57);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException", strArray9);
        java.lang.Object[] objArray19 = derivativeException18.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(1.6870239755710472d);
        dormandPrince853Integrator4.setSafety(0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(31.622776601683793d);
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.Object[] objArray21 = derivativeException18.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException18);
        java.lang.Throwable[] throwableArray23 = integratorException22.getSuppressed();
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException26);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException32);
        integratorException27.addSuppressed((java.lang.Throwable) derivativeException33);
        integratorException22.addSuppressed((java.lang.Throwable) derivativeException33);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException33);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        double double33 = dormandPrince853Integrator31.getMinStep();
        double double34 = dormandPrince853Integrator31.getCurrentStepStart();
        java.lang.String str35 = dormandPrince853Integrator31.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double41 = dormandPrince853Integrator40.getMinStep();
        int int42 = dormandPrince853Integrator40.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double48 = dormandPrince853Integrator47.getSafety();
        double double49 = dormandPrince853Integrator47.getMinStep();
        double double50 = dormandPrince853Integrator47.getMinStep();
        double double51 = dormandPrince853Integrator47.getCurrentSignedStepsize();
        int int52 = dormandPrince853Integrator47.getOrder();
        double double53 = dormandPrince853Integrator47.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator47.getStepHandler();
        dormandPrince853Integrator40.setStepHandler(stepHandler54);
        dormandPrince853Integrator31.setStepHandler(stepHandler54);
        dormandPrince853Integrator26.setStepHandler(stepHandler54);
        dormandPrince853Integrator20.setStepHandler(stepHandler54);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction59, (double) 100, 0.2d, (int) (short) 1);
        int int64 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator71.setMinReduction((double) 1);
        dormandPrince853Integrator71.setMaxGrowth((double) (byte) -1);
        double double76 = dormandPrince853Integrator71.getMaxGrowth();
        java.lang.String str77 = dormandPrince853Integrator71.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction78 = null;
        dormandPrince853Integrator71.addSwitchingFunction(switchingFunction78, (-1.0d), 32.0d, (int) (short) 0);
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator71.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler83);
        java.lang.String str85 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setMaxGrowth((double) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9d + "'", double48 == 0.9d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str85, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, 0.43558771746928626d, 0.43558771746928626d, 0.2d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.43558771746928626d + "'", double5 == 0.43558771746928626d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray11);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray30);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray30);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray30);
        java.lang.Throwable[] throwableArray38 = integratorException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = integratorException37.getSuppressed();
        integratorException22.addSuppressed((java.lang.Throwable) integratorException37);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Throwable[] throwableArray7 = integratorException6.getSuppressed();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray14);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.String str8 = integratorException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray11 = integratorException9.getSuppressed();
        java.lang.Object[] objArray12 = integratorException9.getArguments();
        java.lang.Object[] objArray13 = integratorException9.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator5 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double13 = dormandPrince853Integrator12.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator24.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler27 = null;
        dormandPrince853Integrator24.setStepHandler(stepHandler27);
        java.lang.Class<?> wildcardClass29 = dormandPrince853Integrator24.getClass();
        java.lang.Object[] objArray30 = new java.lang.Object[] { 0L, 0.2d, ' ', (-1L), (byte) 0, dormandPrince853Integrator24 };
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray30);
        java.lang.Throwable[] throwableArray32 = integratorException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = integratorException31.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException31);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException42);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException43);
        derivativeException39.addSuppressed((java.lang.Throwable) derivativeException44);
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException39);
        java.lang.Throwable[] throwableArray47 = derivativeException39.getSuppressed();
        java.lang.Throwable[] throwableArray48 = derivativeException39.getSuppressed();
        derivativeException34.addSuppressed((java.lang.Throwable) derivativeException39);
        java.lang.Object[] objArray50 = derivativeException34.getArguments();
        java.lang.Throwable[] throwableArray51 = derivativeException34.getSuppressed();
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        double double10 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth(35.0d);
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) 100.0f, 10);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator21.setMaxGrowth(0.0d);
        dormandPrince853Integrator21.setMinReduction((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator21.getStepHandler();
        java.lang.String str27 = dormandPrince853Integrator21.getName();
        dormandPrince853Integrator21.setSafety(10.0d);
        double double30 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        java.lang.String str33 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray27);
        java.lang.String str29 = integratorException28.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        java.lang.String str33 = derivativeException31.getPattern();
        java.lang.Throwable[] throwableArray34 = derivativeException31.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray34);
        derivativeException18.addSuppressed((java.lang.Throwable) integratorException35);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException39);
        java.lang.Throwable[] throwableArray41 = integratorException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = integratorException40.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        java.lang.Object[] objArray44 = integratorException40.getArguments();
        integratorException35.addSuppressed((java.lang.Throwable) integratorException40);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray54);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.IntegratorException integratorException62 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray54);
        java.lang.String str63 = integratorException62.getPattern();
        java.lang.Throwable[] throwableArray64 = integratorException62.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException62);
        integratorException40.addSuppressed((java.lang.Throwable) derivativeException65);
        java.lang.Object[] objArray67 = derivativeException65.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str63, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.IntegratorException integratorException1 = new org.apache.commons.math.ode.IntegratorException(throwable0);
        java.lang.String str2 = integratorException1.getPattern();
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Throwable[] throwableArray7 = integratorException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = integratorException6.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray17);
        java.lang.String str19 = integratorException18.getPattern();
        java.lang.Throwable[] throwableArray20 = integratorException18.getSuppressed();
        integratorException6.addSuppressed((java.lang.Throwable) integratorException18);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException6);
        integratorException1.addSuppressed((java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray24 = integratorException6.getSuppressed();
        java.lang.String str25 = integratorException6.getPattern();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        double double18 = dormandPrince853Integrator4.getSafety();
        double double19 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        dormandPrince853Integrator4.setInitialStepSize(40.0d);
        java.lang.Class<?> wildcardClass20 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        java.lang.Throwable[] throwableArray17 = derivativeException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = derivativeException16.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray18);
        java.lang.String str20 = integratorException19.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: " + "'", str20, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ");
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, (double) 10L, (-1));
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 10);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getSafety();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, (-1.0d), 16.0d, 8);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Object[] objArray15 = integratorException14.getArguments();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray7);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 10.0f, 0.43558771746928626d, 0);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double16 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        double double15 = dormandPrince853Integrator4.getMinReduction();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety(18.1550495783196d);
        double double17 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0, (double) '#', (double) (byte) 10);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 100L);
        double double25 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator4.getMinReduction();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.1622776601683795d + "'", double19 == 3.1622776601683795d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.String str5 = integratorException3.getPattern();
        java.lang.Throwable[] throwableArray6 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String str8 = integratorException3.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str8, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, 3.080070288241023d, 55.71355310873648d, (double) (byte) -1);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) (-1L));
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler9);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 100);
        dormandPrince853Integrator4.setMaxGrowth(32.0d);
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray3);
        java.lang.String str7 = integratorException6.getPattern();
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray15);
        java.lang.String str17 = integratorException16.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        integratorException6.addSuppressed((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException19);
        java.lang.Object[] objArray23 = derivativeException19.getArguments();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException11);
        java.lang.Object[] objArray13 = integratorException12.getArguments();
        java.lang.Class<?> wildcardClass14 = objArray13.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 1.755012902585341d, 8.0d, 16.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        java.lang.String str4 = derivativeException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException3);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("", strArray14);
        derivativeException6.addSuppressed((java.lang.Throwable) derivativeException21);
        java.lang.Throwable[] throwableArray23 = derivativeException6.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray23);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray14);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 9.485494822646622d, 52.0d, (double) (byte) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 5.916079783099616d, 97.0d, 10);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass15 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray14);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 8, 3.080070288241023d, 8);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 3.1622776601683795d, (double) (byte) 0, 0.2d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        dormandPrince853Integrator9.setSafety((double) '#');
        double double14 = dormandPrince853Integrator9.getCurrentStepStart();
        double double15 = dormandPrince853Integrator9.getMaxStep();
        double double16 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double22 = dormandPrince853Integrator21.getMinStep();
        int int23 = dormandPrince853Integrator21.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double29 = dormandPrince853Integrator28.getSafety();
        double double30 = dormandPrince853Integrator28.getMinStep();
        double double31 = dormandPrince853Integrator28.getMinStep();
        double double32 = dormandPrince853Integrator28.getCurrentSignedStepsize();
        int int33 = dormandPrince853Integrator28.getOrder();
        double double34 = dormandPrince853Integrator28.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator28.getStepHandler();
        dormandPrince853Integrator21.setStepHandler(stepHandler35);
        dormandPrince853Integrator9.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 8);
        int int41 = dormandPrince853Integrator4.getOrder();
        java.lang.String str42 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str42, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(40.0d, (double) 100.0f, 32.0d, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations6 = null;
        double[] doubleArray10 = null;
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        double[] doubleArray20 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray17, doubleArray20);
        double[] doubleArray22 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.94427190999916d, (-1.0d), doubleArray17, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) 1.0f, doubleArray10, doubleArray17);
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations6, 35.0d, doubleArray10, 31.622776601683793d, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray12);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException13);
        java.lang.Object[] objArray15 = integratorException3.getArguments();
        java.lang.Throwable[] throwableArray16 = integratorException3.getSuppressed();
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray22 = derivativeException21.getArguments();
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException25);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        integratorException26.addSuppressed((java.lang.Throwable) derivativeException32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        derivativeException21.addSuppressed((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException39);
        java.lang.Throwable[] throwableArray41 = integratorException40.getSuppressed();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray49);
        integratorException40.addSuppressed((java.lang.Throwable) integratorException50);
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException40);
        java.lang.Throwable[] throwableArray53 = integratorException40.getSuppressed();
        derivativeException36.addSuppressed((java.lang.Throwable) integratorException40);
        java.lang.String str55 = derivativeException36.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException36);
        integratorException3.addSuppressed((java.lang.Throwable) derivativeException36);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException36);
        java.lang.String[] strArray60 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray60);
        java.lang.String str62 = derivativeException61.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException61);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException61);
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException61);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException65);
        org.apache.commons.math.ode.IntegratorException integratorException67 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException66);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException67);
        java.lang.Throwable[] throwableArray69 = derivativeException68.getSuppressed();
        derivativeException36.addSuppressed((java.lang.Throwable) derivativeException68);
        java.lang.String str71 = derivativeException36.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str62, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str71, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 3.1622776601683795d, (double) (byte) 0, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) 0.0f, 55.71355310873648d, (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.623413251903491d + "'", double6 == 5.623413251903491d);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        double double13 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, Double.NaN, (double) (byte) -1, (double) (-1.0f));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        double double7 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray10);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray28);
        java.lang.String str30 = integratorException29.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException32);
        java.lang.String str34 = derivativeException32.getPattern();
        java.lang.Throwable[] throwableArray35 = derivativeException32.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray35);
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException36);
        java.lang.Throwable[] throwableArray38 = integratorException36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = integratorException36.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray39);
        java.lang.String str41 = integratorException40.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str41, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        java.lang.Throwable[] throwableArray29 = integratorException28.getSuppressed();
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        java.lang.Class<?> wildcardClass19 = strArray9.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray9);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double17 = dormandPrince853Integrator16.getSafety();
        double double18 = dormandPrince853Integrator16.getMinStep();
        dormandPrince853Integrator16.setSafety((double) '#');
        double double21 = dormandPrince853Integrator16.getCurrentStepStart();
        double double22 = dormandPrince853Integrator16.getMaxStep();
        double double23 = dormandPrince853Integrator16.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double29 = dormandPrince853Integrator28.getMinStep();
        int int30 = dormandPrince853Integrator28.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double36 = dormandPrince853Integrator35.getSafety();
        double double37 = dormandPrince853Integrator35.getMinStep();
        double double38 = dormandPrince853Integrator35.getMinStep();
        double double39 = dormandPrince853Integrator35.getCurrentSignedStepsize();
        int int40 = dormandPrince853Integrator35.getOrder();
        double double41 = dormandPrince853Integrator35.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator28.setStepHandler(stepHandler42);
        dormandPrince853Integrator16.setStepHandler(stepHandler42);
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        double double46 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety(97.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        java.lang.String str51 = dormandPrince853Integrator4.getName();
        java.lang.String str52 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str52, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int15 = dormandPrince853Integrator14.getOrder();
        double double16 = dormandPrince853Integrator14.getSafety();
        dormandPrince853Integrator14.setSafety((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        dormandPrince853Integrator4.setSafety((-1.0d));
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) (short) 1);
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray12);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException13);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray18);
        java.lang.String str22 = integratorException21.getPattern();
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray30);
        java.lang.String str32 = integratorException31.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException31);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException31);
        integratorException21.addSuppressed((java.lang.Throwable) derivativeException34);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException34);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException13);
        java.lang.String str38 = integratorException37.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str38, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        java.lang.String str17 = derivativeException16.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str17, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 5.623413251903491d, 16.0d, 1);
        double double21 = dormandPrince853Integrator4.getMinReduction();
        double double22 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException15);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException21);
        integratorException16.addSuppressed((java.lang.Throwable) derivativeException22);
        java.lang.String str24 = integratorException16.getPattern();
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        integratorException16.addSuppressed((java.lang.Throwable) derivativeException31);
        integratorException3.addSuppressed((java.lang.Throwable) derivativeException31);
        java.lang.String str34 = integratorException3.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str34, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        double double33 = dormandPrince853Integrator31.getMinStep();
        double double34 = dormandPrince853Integrator31.getCurrentStepStart();
        java.lang.String str35 = dormandPrince853Integrator31.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double41 = dormandPrince853Integrator40.getMinStep();
        int int42 = dormandPrince853Integrator40.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double48 = dormandPrince853Integrator47.getSafety();
        double double49 = dormandPrince853Integrator47.getMinStep();
        double double50 = dormandPrince853Integrator47.getMinStep();
        double double51 = dormandPrince853Integrator47.getCurrentSignedStepsize();
        int int52 = dormandPrince853Integrator47.getOrder();
        double double53 = dormandPrince853Integrator47.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator47.getStepHandler();
        dormandPrince853Integrator40.setStepHandler(stepHandler54);
        dormandPrince853Integrator31.setStepHandler(stepHandler54);
        dormandPrince853Integrator26.setStepHandler(stepHandler54);
        dormandPrince853Integrator20.setStepHandler(stepHandler54);
        double double59 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        java.lang.String str60 = dormandPrince853Integrator20.getName();
        java.lang.String str61 = dormandPrince853Integrator20.getName();
        double double62 = dormandPrince853Integrator20.getMinReduction();
        double double63 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9d + "'", double48 == 0.9d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9486832980505138d + "'", double59 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str60, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.2d + "'", double62 == 0.2d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.9486832980505138d + "'", double63 == 0.9486832980505138d);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (short) 0, (double) 0.0f, (int) (byte) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, 0.0d, (double) 100L, (int) (byte) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, (double) (short) 100, 16.0d, 100);
        double double22 = dormandPrince853Integrator4.getMinReduction();
        double double23 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray22);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException30);
        java.lang.Object[] objArray33 = derivativeException30.getArguments();
        derivativeException27.addSuppressed((java.lang.Throwable) derivativeException30);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException27);
        derivativeException16.addSuppressed((java.lang.Throwable) derivativeException27);
        java.lang.String str38 = derivativeException16.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray23, doubleArray44);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray53, doubleArray54);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray58, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray54, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, (double) 1L, doubleArray44, doubleArray59);
        double[] doubleArray63 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 10, doubleArray59, doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        double double26 = dormandPrince853Integrator4.getMinReduction();
        double double27 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction28, (double) 1.0f, (double) 10L, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException11);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        double double53 = dormandPrince853Integrator44.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        double double16 = dormandPrince853Integrator14.getMinStep();
        dormandPrince853Integrator14.setSafety((double) '#');
        double double19 = dormandPrince853Integrator14.getCurrentStepStart();
        double double20 = dormandPrince853Integrator14.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler21);
        double double23 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) (-1L));
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.2d + "'", double23 == 0.2d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray11 = integratorException10.getSuppressed();
        java.lang.Object[] objArray12 = integratorException10.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        double double7 = dormandPrince853Integrator4.getMaxStep();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        int int9 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 10.059467437463484d, (double) (short) 100, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator11.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double21 = dormandPrince853Integrator20.getMinStep();
        int int22 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        double double29 = dormandPrince853Integrator27.getMinStep();
        double double30 = dormandPrince853Integrator27.getMinStep();
        double double31 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator27.getOrder();
        double double33 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler34);
        dormandPrince853Integrator11.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        java.lang.String str40 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, (double) (byte) 100, 0.9d, (int) (short) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction46, 16.0d, (double) 0, (int) (byte) 1);
        double double51 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.String str8 = integratorException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray11 = integratorException3.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 1, (double) (-1L), (double) (short) 0);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.9486832980505138d);
        dormandPrince853Integrator4.setSafety(9.848857801796104d);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9486832980505138d + "'", double19 == 0.9486832980505138d);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray9);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException24);
        java.lang.Object[] objArray26 = derivativeException24.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException30);
        java.lang.Throwable[] throwableArray32 = integratorException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = integratorException31.getSuppressed();
        java.lang.Object[] objArray34 = integratorException31.getArguments();
        derivativeException24.addSuppressed((java.lang.Throwable) integratorException31);
        java.lang.String str36 = integratorException31.getPattern();
        java.lang.String str37 = integratorException31.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str37, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        java.lang.String str22 = derivativeException21.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str22, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 'a', 0.0d, 8);
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray31);
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("", strArray31);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray31);
        integratorException20.addSuppressed((java.lang.Throwable) derivativeException41);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray44 = integratorException43.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException43);
        java.lang.String str46 = derivativeException45.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str46, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException4);
        java.lang.Throwable[] throwableArray8 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        integratorException9.addSuppressed((java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException27);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException45 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException44);
        java.lang.String str46 = integratorException45.getPattern();
        java.lang.Throwable[] throwableArray47 = integratorException45.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray47);
        integratorException27.addSuppressed((java.lang.Throwable) integratorException48);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException48);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str46, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, 0.9d, (double) (short) -1, (double) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth(0.43558771746928626d);
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 0L, (double) 100.0f, 10);
        double double13 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException16);
        java.lang.String str18 = derivativeException17.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str18, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        java.lang.String str6 = derivativeException5.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException", objArray11);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.Throwable[] throwableArray18 = integratorException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = integratorException17.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException17);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray28);
        java.lang.String str30 = integratorException29.getPattern();
        java.lang.Throwable[] throwableArray31 = integratorException29.getSuppressed();
        integratorException17.addSuppressed((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException17);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray41);
        java.lang.String str43 = integratorException42.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException42);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException42);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException45);
        java.lang.Throwable[] throwableArray47 = derivativeException46.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException46);
        integratorException17.addSuppressed((java.lang.Throwable) derivativeException46);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException46);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException50);
        java.lang.String str52 = derivativeException50.getPattern();
        java.lang.String[] strArray59 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException65);
        derivativeException50.addSuppressed((java.lang.Throwable) derivativeException66);
        java.lang.Object[] objArray68 = derivativeException66.getArguments();
        java.lang.Object[] objArray69 = derivativeException66.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException70 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", objArray69);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        int int15 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) 10L);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str23 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setInitialStepSize(1.0d);
        int int26 = dormandPrince853Integrator20.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) 100.0f, 10);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        double double17 = dormandPrince853Integrator4.getMaxGrowth();
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        double double25 = dormandPrince853Integrator23.getMinStep();
        dormandPrince853Integrator23.setSafety((double) '#');
        double double28 = dormandPrince853Integrator23.getMinStep();
        java.lang.String str29 = dormandPrince853Integrator23.getName();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler30);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler30);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) 100.0f, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety(0.9486832980505138d);
        dormandPrince853Integrator4.setInitialStepSize(9.848857801796104d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        int int9 = dormandPrince853Integrator4.getOrder();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int16 = dormandPrince853Integrator15.getOrder();
        double double17 = dormandPrince853Integrator15.getSafety();
        dormandPrince853Integrator15.setSafety((double) (-1));
        int int20 = dormandPrince853Integrator15.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator15.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler21);
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = integratorException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = integratorException13.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException13);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray28);
        java.lang.Throwable[] throwableArray35 = derivativeException34.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) throwableArray35);
        integratorException19.addSuppressed((java.lang.Throwable) integratorException36);
        java.lang.String str38 = integratorException36.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException" + "'", str38, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException");
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        integratorException3.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray12 = integratorException3.getArguments();
        java.lang.Object[] objArray13 = integratorException3.getArguments();
        java.lang.Object[] objArray14 = integratorException3.getArguments();
        java.lang.Object[] objArray15 = integratorException3.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, (double) 10L, (-1));
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction((double) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 0.0d, (double) (short) -1, (int) ' ');
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        int int21 = dormandPrince853Integrator4.getOrder();
        double double22 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety(97.0d);
        dormandPrince853Integrator4.setSafety(10.059467437463484d);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        java.lang.String str4 = derivativeException2.getPattern();
        java.lang.Throwable[] throwableArray5 = derivativeException2.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String str8 = derivativeException2.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str8, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(10.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, (double) (-1L), (double) (byte) -1);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        double double22 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        double double23 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        java.lang.String str24 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler25);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) (short) -1, (double) 0L, (int) '#');
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        double double18 = dormandPrince853Integrator4.getMinStep();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        double double20 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.1622776601683795d + "'", double9 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.1622776601683795d + "'", double20 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.Object[] objArray13 = derivativeException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", objArray13);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.String str12 = derivativeException10.getPattern();
        java.lang.Object[] objArray13 = derivativeException10.getArguments();
        java.lang.Throwable[] throwableArray14 = derivativeException10.getSuppressed();
        java.lang.String str15 = derivativeException10.toString();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str12, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str15, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray12 = integratorException10.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        java.lang.Class<?> wildcardClass15 = integratorException14.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int15 = dormandPrince853Integrator14.getOrder();
        double double16 = dormandPrince853Integrator14.getSafety();
        dormandPrince853Integrator14.setSafety((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        dormandPrince853Integrator4.setSafety((-1.0d));
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        int int24 = dormandPrince853Integrator4.getOrder();
        double double25 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray24, doubleArray29);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray29, doubleArray34);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray50, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray42, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray34, doubleArray55);
        double double60 = dormandPrince853Integrator59.getCurrentStepStart();
        dormandPrince853Integrator59.setSafety(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator59.addSwitchingFunction(switchingFunction63, (double) 'a', (double) 1L, (-1));
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        dormandPrince853Integrator4.setSafety(72.11102550927978d);
        java.lang.String str72 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str72, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int22 = dormandPrince853Integrator21.getOrder();
        double double23 = dormandPrince853Integrator21.getSafety();
        dormandPrince853Integrator21.setSafety((double) (-1));
        int int26 = dormandPrince853Integrator21.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        java.lang.String str30 = dormandPrince853Integrator4.getName();
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        double double32 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double38 = dormandPrince853Integrator37.getSafety();
        double double39 = dormandPrince853Integrator37.getMinStep();
        dormandPrince853Integrator37.setSafety((double) '#');
        double double42 = dormandPrince853Integrator37.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double48 = dormandPrince853Integrator47.getSafety();
        double double49 = dormandPrince853Integrator47.getMinStep();
        dormandPrince853Integrator47.setSafety((double) '#');
        double double52 = dormandPrince853Integrator47.getCurrentStepStart();
        double double53 = dormandPrince853Integrator47.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator47.getStepHandler();
        dormandPrince853Integrator37.setStepHandler(stepHandler54);
        dormandPrince853Integrator4.setStepHandler(stepHandler54);
        int int57 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.2d + "'", double32 == 0.2d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9d + "'", double48 == 0.9d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        java.lang.Throwable[] throwableArray35 = integratorException34.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray35);
        derivativeException13.addSuppressed((java.lang.Throwable) integratorException36);
        java.lang.String str38 = integratorException36.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) (short) 100, Double.NaN, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        java.lang.String str16 = integratorException15.getPattern();
        java.lang.Throwable[] throwableArray17 = integratorException15.getSuppressed();
        integratorException3.addSuppressed((java.lang.Throwable) integratorException15);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        java.lang.Throwable[] throwableArray22 = integratorException21.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator11.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double21 = dormandPrince853Integrator20.getMinStep();
        int int22 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        double double29 = dormandPrince853Integrator27.getMinStep();
        double double30 = dormandPrince853Integrator27.getMinStep();
        double double31 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator27.getOrder();
        double double33 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler34);
        dormandPrince853Integrator11.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        double double40 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(0.43558771746928626d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.Object[] objArray14 = integratorException8.getArguments();
        java.lang.Throwable[] throwableArray15 = integratorException8.getSuppressed();
        java.lang.String str16 = integratorException8.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        double double13 = dormandPrince853Integrator4.getMinStep();
        double double14 = dormandPrince853Integrator4.getSafety();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) 1);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        dormandPrince853Integrator4.setMaxGrowth(55.71355310873648d);
        dormandPrince853Integrator4.setInitialStepSize((double) (-1L));
        java.lang.String str23 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.1622776601683795d + "'", double16 == 3.1622776601683795d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray16 = integratorException8.getArguments();
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException27);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException27);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str31 = derivativeException30.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str31, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        java.lang.String str15 = derivativeException14.getPattern();
        java.lang.String str16 = derivativeException14.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str15, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str16, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(3.7470125727948562d);
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, 3.1622776601683795d, (double) (short) 1, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety((double) 10);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.1622776601683795d + "'", double5 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (-1.0f));
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        double double22 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler25);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) 1, 55.71355310873648d, (-1));
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        int int23 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        int int9 = dormandPrince853Integrator4.getOrder();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 10);
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (-1.0f), (double) (short) 10, (int) 'a');
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.1622776601683795d + "'", double7 == 3.1622776601683795d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray6 = derivativeException4.getArguments();
        java.lang.String str7 = derivativeException4.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        double[] doubleArray13 = new double[] { 58.26662852782886d, 9.486832980505138d, 1.0f, 8.0d, 8.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray25, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray21, doubleArray26);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray26, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1.0f), doubleArray13, doubleArray31);
        double[] doubleArray36 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 2.0932702787842112d, doubleArray13, doubleArray36);
        double[] doubleArray40 = null;
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray50, doubleArray55);
        double[] doubleArray60 = new double[] {};
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray60, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray55, doubleArray60);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray71 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray70, doubleArray71);
        double[] doubleArray75 = new double[] {};
        double[] doubleArray76 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray75, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray71, doubleArray76);
        double[] doubleArray81 = new double[] {};
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray81, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray76, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray55, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (byte) -1, doubleArray40, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, 10.0d, doubleArray36, doubleArray76);
        double[] doubleArray88 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.059467437463484d, 0.0d, doubleArray76, doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[58.26662852782886, 9.486832980505138, 1.0, 8.0, 8.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray24, doubleArray29);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray29, doubleArray34);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray50, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray42, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray34, doubleArray55);
        double double60 = dormandPrince853Integrator59.getCurrentStepStart();
        dormandPrince853Integrator59.setSafety(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator59.addSwitchingFunction(switchingFunction63, (double) 'a', (double) 1L, (-1));
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        java.lang.String str70 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int76 = dormandPrince853Integrator75.getOrder();
        dormandPrince853Integrator75.setMaxGrowth((double) 10);
        double double79 = dormandPrince853Integrator75.getMinReduction();
        double double80 = dormandPrince853Integrator75.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double86 = dormandPrince853Integrator85.getSafety();
        double double87 = dormandPrince853Integrator85.getMinStep();
        java.lang.String str88 = dormandPrince853Integrator85.getName();
        double double89 = dormandPrince853Integrator85.getMaxStep();
        dormandPrince853Integrator85.setSafety((-1.0d));
        double double92 = dormandPrince853Integrator85.getMinStep();
        dormandPrince853Integrator85.setMaxGrowth(0.43558771746928626d);
        org.apache.commons.math.ode.StepHandler stepHandler95 = dormandPrince853Integrator85.getStepHandler();
        dormandPrince853Integrator75.setStepHandler(stepHandler95);
        dormandPrince853Integrator4.setStepHandler(stepHandler95);
        double double98 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.2d + "'", double79 == 0.2d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.2d + "'", double80 == 0.2d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.9d + "'", double86 == 0.9d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str88, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler95);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray24, doubleArray29);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray29, doubleArray34);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray50, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray42, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray34, doubleArray55);
        double double60 = dormandPrince853Integrator59.getCurrentStepStart();
        dormandPrince853Integrator59.setSafety(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator59.addSwitchingFunction(switchingFunction63, (double) 'a', (double) 1L, (-1));
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        java.lang.String str70 = dormandPrince853Integrator4.getName();
        double double71 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        java.lang.String str4 = derivativeException3.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException3);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        java.lang.String str10 = derivativeException9.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        derivativeException3.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray15 = derivativeException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", objArray15);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        double double24 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 10, (double) 8, 8);
        int int19 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Throwable[] throwableArray7 = integratorException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = integratorException6.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray10 = integratorException6.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray10);
        java.lang.String str14 = integratorException13.toString();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str14, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, 22.871211309156784d, (double) 8, (int) 'a');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 40.0d, 0.43558771746928626d, (int) (byte) 10);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray13);
        java.lang.String str15 = integratorException14.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        java.lang.String str29 = integratorException28.getPattern();
        integratorException14.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray39);
        java.lang.String str41 = integratorException40.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        java.lang.Object[] objArray43 = derivativeException42.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray43);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray52);
        java.lang.String str54 = integratorException53.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        integratorException44.addSuppressed((java.lang.Throwable) derivativeException57);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException57);
        integratorException14.addSuppressed((java.lang.Throwable) integratorException59);
        java.lang.Throwable[] throwableArray61 = integratorException14.getSuppressed();
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException14);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str29, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String str7 = derivativeException2.getPattern();
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.String str11 = derivativeException10.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("", strArray21);
        derivativeException13.addSuppressed((java.lang.Throwable) derivativeException28);
        derivativeException2.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.Object[] objArray31 = derivativeException2.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (-1.0d), (double) 0, (double) ' ');
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        double double7 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 1.0f, (double) 1L, 8);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray20, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray12, doubleArray25);
        double double29 = dormandPrince853Integrator28.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        double double41 = dormandPrince853Integrator39.getMinStep();
        double double42 = dormandPrince853Integrator39.getCurrentStepStart();
        java.lang.String str43 = dormandPrince853Integrator39.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double49 = dormandPrince853Integrator48.getMinStep();
        int int50 = dormandPrince853Integrator48.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double56 = dormandPrince853Integrator55.getSafety();
        double double57 = dormandPrince853Integrator55.getMinStep();
        double double58 = dormandPrince853Integrator55.getMinStep();
        double double59 = dormandPrince853Integrator55.getCurrentSignedStepsize();
        int int60 = dormandPrince853Integrator55.getOrder();
        double double61 = dormandPrince853Integrator55.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler62 = dormandPrince853Integrator55.getStepHandler();
        dormandPrince853Integrator48.setStepHandler(stepHandler62);
        dormandPrince853Integrator39.setStepHandler(stepHandler62);
        dormandPrince853Integrator34.setStepHandler(stepHandler62);
        dormandPrince853Integrator28.setStepHandler(stepHandler62);
        dormandPrince853Integrator4.setStepHandler(stepHandler62);
        int int68 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) ' ');
        dormandPrince853Integrator4.setMinReduction(2.0932702787842112d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9486832980505138d + "'", double29 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 10L);
        dormandPrince853Integrator4.setSafety((double) (short) 10);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        double double19 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        double double26 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        dormandPrince853Integrator4.setSafety(35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray9);
        java.lang.Throwable[] throwableArray18 = derivativeException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray18);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String str4 = derivativeException2.getPattern();
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        derivativeException2.addSuppressed((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str4, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setSafety((double) 100L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (byte) 100, (double) (-1.0f), (int) (byte) 1);
        dormandPrince853Integrator4.setMaxGrowth(0.9d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator24.setMaxGrowth(0.0d);
        dormandPrince853Integrator24.setMinReduction((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator24.getStepHandler();
        java.lang.String str30 = dormandPrince853Integrator24.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double36 = dormandPrince853Integrator35.getMinStep();
        int int37 = dormandPrince853Integrator35.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double43 = dormandPrince853Integrator42.getSafety();
        double double44 = dormandPrince853Integrator42.getMinStep();
        double double45 = dormandPrince853Integrator42.getMinStep();
        double double46 = dormandPrince853Integrator42.getCurrentSignedStepsize();
        int int47 = dormandPrince853Integrator42.getOrder();
        double double48 = dormandPrince853Integrator42.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler49);
        dormandPrince853Integrator24.setStepHandler(stepHandler49);
        double double52 = dormandPrince853Integrator24.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction53, 0.2d, (double) 'a', (int) (short) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator62.setSafety((double) '#');
        dormandPrince853Integrator62.setMaxGrowth((double) 100.0f);
        java.lang.String str67 = dormandPrince853Integrator62.getName();
        double double68 = dormandPrince853Integrator62.getSafety();
        double double69 = dormandPrince853Integrator62.getMaxGrowth();
        double double70 = dormandPrince853Integrator62.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler71 = dormandPrince853Integrator62.getStepHandler();
        dormandPrince853Integrator24.setStepHandler(stepHandler71);
        dormandPrince853Integrator4.setStepHandler(stepHandler71);
        double double74 = dormandPrince853Integrator4.getMaxStep();
        double double75 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9d + "'", double43 == 0.9d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str67, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler71);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getSafety();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) (short) 1, (double) 8, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        double double7 = dormandPrince853Integrator4.getSafety();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) 1.0f, 17.88854381999832d, 8);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.Throwable[] throwableArray10 = derivativeException8.getSuppressed();
        java.lang.String str11 = derivativeException8.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str14 = derivativeException8.getPattern();
        java.lang.String str15 = derivativeException8.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str11, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str14, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str15, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        java.lang.String str34 = integratorException33.getPattern();
        java.lang.Throwable[] throwableArray35 = integratorException33.getSuppressed();
        integratorException16.addSuppressed((java.lang.Throwable) integratorException33);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str34, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        java.lang.Throwable[] throwableArray14 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray16);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, 0.0d, (double) 100.0f, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray12);
        java.lang.Object[] objArray25 = derivativeException24.getArguments();
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray27);
        java.lang.String str29 = derivativeException28.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException28);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException28);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("", strArray39);
        derivativeException31.addSuppressed((java.lang.Throwable) derivativeException46);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException48);
        derivativeException24.addSuppressed((java.lang.Throwable) derivativeException49);
        java.lang.String str51 = derivativeException24.toString();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: " + "'", str51, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        double double16 = dormandPrince853Integrator14.getMinStep();
        dormandPrince853Integrator14.setSafety((double) '#');
        double double19 = dormandPrince853Integrator14.getMinStep();
        double double20 = dormandPrince853Integrator14.getCurrentStepStart();
        double double21 = dormandPrince853Integrator14.getMaxGrowth();
        double double22 = dormandPrince853Integrator14.getMaxGrowth();
        double double23 = dormandPrince853Integrator14.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        int int26 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray37 = new double[] {};
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray37, doubleArray38);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray42, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray38, doubleArray43);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray48, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray43, doubleArray48);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray63 = new double[] {};
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray63, doubleArray64);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray64, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray56, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray48, doubleArray69);
        double[] doubleArray74 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, doubleArray48, doubleArray74);
        double double76 = dormandPrince853Integrator75.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator75.setStepHandler(stepHandler82);
        dormandPrince853Integrator4.setStepHandler(stepHandler82);
        org.apache.commons.math.ode.StepHandler stepHandler85 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler85);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction87 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction87, 0.0d, 28.284271247461902d, 1);
        double double92 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(10.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 1);
        dormandPrince853Integrator4.setInitialStepSize((double) 8);
        double double20 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(5.656854249492381d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        int int8 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setInitialStepSize(9.924141172814958d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) 1.0f);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations9 = null;
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        double[] doubleArray27 = null;
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray44, doubleArray49);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray64, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray65, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray57, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray49, doubleArray70);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray79, doubleArray80);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray80, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, (double) 1L, doubleArray70, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, 10.0d, doubleArray27, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations9, 1.755012902585341d, doubleArray21, 0.0d, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setMinReduction(1.0d);
        java.lang.String str55 = dormandPrince853Integrator44.getName();
        java.lang.String str56 = dormandPrince853Integrator44.getName();
        java.lang.String str57 = dormandPrince853Integrator44.getName();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        int int22 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.43558771746928626d);
        java.lang.Class<?> wildcardClass25 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", strArray7);
        java.lang.String str15 = derivativeException14.getPattern();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!" + "'", str15, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 0.0d, 9.848857801796104d, (double) (-1));
        dormandPrince853Integrator4.setMinReduction(1.2988548708655048d);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(98.48857801796105d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 'a', (double) 10, (double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        java.lang.String str9 = derivativeException8.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: " + "'", str9, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ");
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 'a');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getSafety();
        double double15 = dormandPrince853Integrator4.getMinStep();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(28.284271247461902d, (double) 1, 1.6870239755710472d, (double) 8);
        dormandPrince853Integrator4.setMaxGrowth(23.673797188510488d);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException21);
        java.lang.Throwable[] throwableArray24 = derivativeException23.getSuppressed();
        java.lang.String str25 = derivativeException23.getPattern();
        derivativeException18.addSuppressed((java.lang.Throwable) derivativeException23);
        java.lang.Object[] objArray27 = derivativeException18.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        double double14 = dormandPrince853Integrator4.getSafety();
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(9.485494822646622d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.924141172814958d, (double) (short) 10, (double) '4', 0.0d);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) '#', (double) (short) 100, (int) (byte) 100);
        dormandPrince853Integrator4.setMaxGrowth(1.755012902585341d);
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray20);
        java.lang.String str22 = derivativeException21.getPattern();
        java.lang.Throwable[] throwableArray23 = derivativeException21.getSuppressed();
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException26);
        java.lang.Throwable[] throwableArray28 = integratorException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = integratorException27.getSuppressed();
        derivativeException21.addSuppressed((java.lang.Throwable) integratorException27);
        integratorException18.addSuppressed((java.lang.Throwable) derivativeException21);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException21);
        java.lang.Class<?> wildcardClass33 = derivativeException21.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray10);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray28);
        java.lang.String str30 = integratorException29.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException32);
        java.lang.String str34 = derivativeException32.getPattern();
        java.lang.Throwable[] throwableArray35 = derivativeException32.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray35);
        derivativeException19.addSuppressed((java.lang.Throwable) integratorException36);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException40);
        java.lang.Throwable[] throwableArray42 = integratorException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = integratorException41.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException41);
        java.lang.Object[] objArray45 = integratorException41.getArguments();
        integratorException36.addSuppressed((java.lang.Throwable) integratorException41);
        java.lang.Object[] objArray47 = integratorException36.getArguments();
        java.lang.Throwable[] throwableArray48 = integratorException36.getSuppressed();
        java.lang.Throwable[] throwableArray49 = integratorException36.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray49);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.Object[] objArray14 = integratorException8.getArguments();
        java.lang.Throwable[] throwableArray15 = integratorException8.getSuppressed();
        java.lang.Class<?> wildcardClass16 = throwableArray15.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray25);
        java.lang.String str27 = integratorException26.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        java.lang.Object[] objArray31 = integratorException26.getArguments();
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray37);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray37);
        integratorException26.addSuppressed((java.lang.Throwable) derivativeException42);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray46);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray50);
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException51);
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException52);
        derivativeException48.addSuppressed((java.lang.Throwable) derivativeException53);
        java.lang.Object[] objArray55 = derivativeException48.getArguments();
        derivativeException42.addSuppressed((java.lang.Throwable) derivativeException48);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException48);
        java.lang.String str58 = derivativeException48.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException48);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double74 = dormandPrince853Integrator73.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction75 = null;
        dormandPrince853Integrator73.addSwitchingFunction(switchingFunction75, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator85.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler88 = null;
        dormandPrince853Integrator85.setStepHandler(stepHandler88);
        java.lang.Class<?> wildcardClass90 = dormandPrince853Integrator85.getClass();
        java.lang.Object[] objArray91 = new java.lang.Object[] { 0L, 0.2d, ' ', (-1L), (byte) 0, dormandPrince853Integrator85 };
        org.apache.commons.math.ode.IntegratorException integratorException92 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray91);
        java.lang.Throwable[] throwableArray93 = integratorException92.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException94 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException92);
        integratorException59.addSuppressed((java.lang.Throwable) integratorException92);
        java.lang.Object[] objArray96 = integratorException92.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException97 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException92);
        java.lang.Throwable[] throwableArray98 = derivativeException97.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray15 = derivativeException12.getSuppressed();
        java.lang.Object[] objArray16 = derivativeException12.getArguments();
        java.lang.Object[] objArray17 = derivativeException12.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.Throwable[] throwableArray20 = derivativeException18.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((-1.0d));
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, (double) (byte) -1, 100.0d, 0.43558771746928626d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setSafety(16.0d);
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth(3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(1.755012902585341d);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(10.0d);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction(0.43558771746928626d);
        double double18 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        int int21 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.43558771746928626d + "'", double18 == 0.43558771746928626d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        java.lang.String str19 = integratorException18.getPattern();
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        derivativeException24.addSuppressed((java.lang.Throwable) derivativeException29);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray33);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException34);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException40);
        integratorException35.addSuppressed((java.lang.Throwable) derivativeException41);
        java.lang.String str43 = integratorException35.getPattern();
        integratorException31.addSuppressed((java.lang.Throwable) integratorException35);
        integratorException18.addSuppressed((java.lang.Throwable) integratorException35);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str19, "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 1, (double) 0, 0.0d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 1.0f, (double) 1L, 8);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        double double21 = dormandPrince853Integrator19.getMinStep();
        dormandPrince853Integrator19.setSafety((double) '#');
        double double24 = dormandPrince853Integrator19.getMinStep();
        double double25 = dormandPrince853Integrator19.getCurrentStepStart();
        double double26 = dormandPrince853Integrator19.getMaxGrowth();
        dormandPrince853Integrator19.setMinReduction((double) 100.0f);
        double double29 = dormandPrince853Integrator19.getMaxStep();
        dormandPrince853Integrator19.setMinReduction((double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double37 = dormandPrince853Integrator36.getMinStep();
        int int38 = dormandPrince853Integrator36.getOrder();
        double double39 = dormandPrince853Integrator36.getCurrentSignedStepsize();
        dormandPrince853Integrator36.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator36.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler42);
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.1622776601683795d + "'", double39 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler42);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        double[] doubleArray2 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray19, doubleArray24);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray63, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray55, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray34, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray24, doubleArray34);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray76, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, 0.0d, doubleArray24, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.059467437463484d, doubleArray2, doubleArray24);
        double double81 = dormandPrince853Integrator80.getSafety();
        java.lang.String str82 = dormandPrince853Integrator80.getName();
        double double83 = dormandPrince853Integrator80.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction84 = null;
        dormandPrince853Integrator80.addSwitchingFunction(switchingFunction84, 1.6870239755710472d, (double) 'a', (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.9d + "'", double81 == 0.9d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray22);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray22);
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException29);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException36);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        derivativeException37.addSuppressed((java.lang.Throwable) derivativeException44);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException37);
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException46);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray49);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException50);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException56);
        integratorException51.addSuppressed((java.lang.Throwable) derivativeException57);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException51);
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException51);
        integratorException47.addSuppressed((java.lang.Throwable) integratorException60);
        java.lang.Object[] objArray62 = integratorException60.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", objArray62);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException63);
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException73 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray72);
        java.lang.String str74 = integratorException73.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException73);
        java.lang.Throwable[] throwableArray76 = integratorException73.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException77 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException73);
        java.lang.Throwable[] throwableArray78 = derivativeException77.getSuppressed();
        java.lang.Object[] objArray79 = derivativeException77.getArguments();
        integratorException63.addSuppressed((java.lang.Throwable) derivativeException77);
        derivativeException14.addSuppressed((java.lang.Throwable) derivativeException77);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        double[] doubleArray2 = null;
        double[] doubleArray3 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 0.0d, doubleArray2, doubleArray3);
        dormandPrince853Integrator4.setMinReduction(1.6870239755710472d);
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray23, doubleArray44);
        double[] doubleArray49 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, doubleArray23, doubleArray49);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray53, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 35.0d, doubleArray23, doubleArray53);
        java.lang.String str57 = dormandPrince853Integrator56.getName();
        double double58 = dormandPrince853Integrator56.getSafety();
        double double59 = dormandPrince853Integrator56.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9d + "'", double58 == 0.9d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 33.46640106136302d + "'", double59 == 33.46640106136302d);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray8);
        java.lang.String str17 = derivativeException16.getPattern();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: " + "'", str17, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray12);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray16 = integratorException3.getSuppressed();
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("", strArray27);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray27);
        integratorException3.addSuppressed((java.lang.Throwable) derivativeException37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray40 = derivativeException39.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray11 = derivativeException10.getArguments();
        java.lang.String str12 = derivativeException10.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        java.lang.Throwable[] throwableArray14 = derivativeException10.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.String str5 = derivativeException2.getPattern();
        java.lang.Object[] objArray6 = derivativeException2.getArguments();
        java.lang.String str7 = derivativeException2.getPattern();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, 16.0d, 100.0d, (double) (short) 100);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException12);
        java.lang.String str14 = derivativeException12.getPattern();
        java.lang.Object[] objArray15 = derivativeException12.getArguments();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray24);
        java.lang.String str26 = integratorException25.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        java.lang.Object[] objArray28 = derivativeException27.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray28);
        derivativeException12.addSuppressed((java.lang.Throwable) integratorException29);
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        double double12 = dormandPrince853Integrator10.getMinStep();
        dormandPrince853Integrator10.setSafety((double) '#');
        double double15 = dormandPrince853Integrator10.getCurrentStepStart();
        double double16 = dormandPrince853Integrator10.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler17);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) (short) 0, 35.0d, 10);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction25, 2.3713737056616555d, 98.48857801796105d, 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(stepHandler24);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (-1), (double) (short) 0, 0);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray25, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray17, doubleArray30);
        double double34 = dormandPrince853Integrator33.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double45 = dormandPrince853Integrator44.getSafety();
        double double46 = dormandPrince853Integrator44.getMinStep();
        double double47 = dormandPrince853Integrator44.getCurrentStepStart();
        java.lang.String str48 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double54 = dormandPrince853Integrator53.getMinStep();
        int int55 = dormandPrince853Integrator53.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double61 = dormandPrince853Integrator60.getSafety();
        double double62 = dormandPrince853Integrator60.getMinStep();
        double double63 = dormandPrince853Integrator60.getMinStep();
        double double64 = dormandPrince853Integrator60.getCurrentSignedStepsize();
        int int65 = dormandPrince853Integrator60.getOrder();
        double double66 = dormandPrince853Integrator60.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator53.setStepHandler(stepHandler67);
        dormandPrince853Integrator44.setStepHandler(stepHandler67);
        dormandPrince853Integrator39.setStepHandler(stepHandler67);
        dormandPrince853Integrator33.setStepHandler(stepHandler67);
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double78 = dormandPrince853Integrator77.getSafety();
        double double79 = dormandPrince853Integrator77.getMinStep();
        double double80 = dormandPrince853Integrator77.getMinStep();
        double double81 = dormandPrince853Integrator77.getCurrentSignedStepsize();
        int int82 = dormandPrince853Integrator77.getOrder();
        double double83 = dormandPrince853Integrator77.getMaxGrowth();
        java.lang.String str84 = dormandPrince853Integrator77.getName();
        java.lang.String str85 = dormandPrince853Integrator77.getName();
        double double86 = dormandPrince853Integrator77.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler87 = dormandPrince853Integrator77.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler87);
        double double89 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double90 = dormandPrince853Integrator4.getMinStep();
        double double91 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double92 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler93 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str94 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9486832980505138d + "'", double34 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.9d + "'", double45 == 0.9d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9d + "'", double61 == 0.9d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.9d + "'", double78 == 0.9d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str84, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str85, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler87);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3.1622776601683795d + "'", double89 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3.1622776601683795d + "'", double91 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str94, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.Throwable[] throwableArray13 = derivativeException4.getSuppressed();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray3);
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            derivativeException6.addSuppressed(throwable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        int int24 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) '4');
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        dormandPrince853Integrator4.setMinReduction(3.1622776601683795d);
        double double31 = dormandPrince853Integrator4.getSafety();
        int int32 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.916079783099616d, 31.71666350274487d, (double) (short) 100, 0.2d);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray6);
        java.lang.String str13 = derivativeException12.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException" + "'", str13, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException");
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        java.lang.String str23 = dormandPrince853Integrator22.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction24, 0.2d, 0.0d, (int) (short) 100);
        double double29 = dormandPrince853Integrator22.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler30);
        double double32 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.924141172814958d, 9.486832980505138d, 52.0d, (double) (byte) 10);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (-1.0d), (double) 1L, (int) 'a');
        double double16 = dormandPrince853Integrator4.getMinStep();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator22.setSafety((double) '#');
        dormandPrince853Integrator22.setMaxGrowth((double) 100.0f);
        java.lang.String str27 = dormandPrince853Integrator22.getName();
        double double28 = dormandPrince853Integrator22.getSafety();
        dormandPrince853Integrator22.setMaxGrowth((double) (short) 1);
        java.lang.String str31 = dormandPrince853Integrator22.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction32, (double) (byte) 1, 0.0d, (int) ' ');
        dormandPrince853Integrator22.setMaxGrowth(1.0d);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler39);
        java.lang.Class<?> wildcardClass41 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double19 = dormandPrince853Integrator18.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double25 = dormandPrince853Integrator24.getSafety();
        double double26 = dormandPrince853Integrator24.getMinStep();
        dormandPrince853Integrator24.setSafety((double) '#');
        double double29 = dormandPrince853Integrator24.getMinStep();
        double double30 = dormandPrince853Integrator24.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator24.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler31);
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        java.lang.String str34 = dormandPrince853Integrator4.getName();
        double double35 = dormandPrince853Integrator4.getMaxGrowth();
        double double36 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(62.30055074422899d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray13);
        java.lang.String str15 = integratorException14.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        java.lang.String str29 = integratorException28.getPattern();
        integratorException14.addSuppressed((java.lang.Throwable) integratorException28);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray39);
        java.lang.String str41 = integratorException40.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        java.lang.Object[] objArray43 = derivativeException42.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray43);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray52);
        java.lang.String str54 = integratorException53.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException53);
        integratorException44.addSuppressed((java.lang.Throwable) derivativeException57);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException57);
        integratorException14.addSuppressed((java.lang.Throwable) integratorException59);
        java.lang.Throwable[] throwableArray61 = integratorException14.getSuppressed();
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException14);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray67);
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray67);
        org.apache.commons.math.ode.IntegratorException integratorException70 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray67);
        org.apache.commons.math.ode.DerivativeException derivativeException71 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray67);
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException71);
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException71);
        java.lang.String[] strArray75 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException76 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray75);
        org.apache.commons.math.ode.IntegratorException integratorException77 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException76);
        java.lang.Throwable[] throwableArray78 = integratorException77.getSuppressed();
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray86);
        integratorException77.addSuppressed((java.lang.Throwable) integratorException87);
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException77);
        derivativeException71.addSuppressed((java.lang.Throwable) integratorException89);
        integratorException14.addSuppressed((java.lang.Throwable) derivativeException71);
        org.apache.commons.math.ode.DerivativeException derivativeException92 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException14);
        java.lang.String str93 = integratorException14.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str29, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str93, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getSafety();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) '4');
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100, (double) (-1.0f), 3.1622776601683795d);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getSafety();
        dormandPrince853Integrator12.setMinReduction((double) (short) -1);
        dormandPrince853Integrator12.setInitialStepSize((double) (byte) 1);
        java.lang.String str18 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 10L);
        double double21 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double27 = dormandPrince853Integrator26.getSafety();
        double double28 = dormandPrince853Integrator26.getMinStep();
        dormandPrince853Integrator26.setMinReduction(0.0d);
        double double31 = dormandPrince853Integrator26.getMaxStep();
        double double32 = dormandPrince853Integrator26.getSafety();
        int int33 = dormandPrince853Integrator26.getOrder();
        double double34 = dormandPrince853Integrator26.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9d + "'", double27 == 0.9d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 1, (double) (-1L), (double) (short) 0);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(98.48857801796105d, (double) 10, 8.0d, 31.71666350274487d);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 10L, (double) 1.0f, 1);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getMinStep();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.848857801796104d, 0.9486832980505138d, 17.88854381999832d, 1.755012902585341d);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 9.848857801796104d + "'", double6 == 9.848857801796104d);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray2, doubleArray3);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 0.2d, 0.0d, (int) (short) 100);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray15 = derivativeException12.getSuppressed();
        java.lang.Object[] objArray16 = derivativeException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray24);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException30);
        java.lang.Object[] objArray32 = derivativeException12.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(8.94427190999916d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setMinReduction(3.080070288241023d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray3);
        java.lang.Object[] objArray7 = derivativeException6.getArguments();
        java.lang.Throwable[] throwableArray8 = derivativeException6.getSuppressed();
        java.lang.String str9 = derivativeException6.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str9, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 1, (double) (byte) 1, (int) (byte) 1);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = integratorException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = integratorException13.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        integratorException8.addSuppressed((java.lang.Throwable) integratorException13);
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray19 = derivativeException4.getArguments();
        java.lang.Throwable[] throwableArray20 = derivativeException4.getSuppressed();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException(throwable21);
        java.lang.String str23 = integratorException22.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException22);
        java.lang.Throwable[] throwableArray26 = derivativeException25.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException25);
        java.lang.String str28 = derivativeException25.getPattern();
        derivativeException4.addSuppressed((java.lang.Throwable) derivativeException25);
        java.lang.Object[] objArray30 = derivativeException4.getArguments();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (-1L), (double) 10L, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException8);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        java.lang.String str27 = integratorException25.getPattern();
        java.lang.Object[] objArray28 = integratorException25.getArguments();
        derivativeException20.addSuppressed((java.lang.Throwable) integratorException25);
        derivativeException9.addSuppressed((java.lang.Throwable) derivativeException20);
        java.lang.Throwable[] throwableArray31 = derivativeException9.getSuppressed();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray12, doubleArray13);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray13, doubleArray18);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray18, doubleArray23);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray31, doubleArray32);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray38, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray39, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray31, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray23, doubleArray44);
        double[] doubleArray49 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, doubleArray23, doubleArray49);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray53, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 35.0d, doubleArray23, doubleArray53);
        java.lang.String str57 = dormandPrince853Integrator56.getName();
        double double58 = dormandPrince853Integrator56.getSafety();
        java.lang.String str59 = dormandPrince853Integrator56.getName();
        java.lang.Class<?> wildcardClass60 = dormandPrince853Integrator56.getClass();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9d + "'", double58 == 0.9d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str59, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.22490309931942d, 23.673797188510488d, 3.138288992714996d, 33.46640106136302d);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setSafety(97.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', 0.0d, (double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler30);
        double double32 = dormandPrince853Integrator20.getSafety();
        double double33 = dormandPrince853Integrator20.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 97.0d + "'", double32 == 97.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (short) -1, 35.0d, 1);
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getMaxStep();
        java.lang.Class<?> wildcardClass19 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(40.0d);
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str23 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str23 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setInitialStepSize(1.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double31 = dormandPrince853Integrator30.getSafety();
        double double32 = dormandPrince853Integrator30.getMinStep();
        double double33 = dormandPrince853Integrator30.getMinStep();
        double double34 = dormandPrince853Integrator30.getCurrentSignedStepsize();
        int int35 = dormandPrince853Integrator30.getOrder();
        double double36 = dormandPrince853Integrator30.getMaxGrowth();
        java.lang.String str37 = dormandPrince853Integrator30.getName();
        java.lang.String str38 = dormandPrince853Integrator30.getName();
        double double39 = dormandPrince853Integrator30.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator30.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler41 = dormandPrince853Integrator30.getStepHandler();
        double double42 = dormandPrince853Integrator30.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler43);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertNotNull(stepHandler41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler43);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        double double13 = dormandPrince853Integrator4.getSafety();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        double double23 = dormandPrince853Integrator21.getMinStep();
        dormandPrince853Integrator21.setSafety((double) '#');
        double double26 = dormandPrince853Integrator21.getCurrentStepStart();
        double double27 = dormandPrince853Integrator21.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator21.getStepHandler();
        double double29 = dormandPrince853Integrator21.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction30, 0.0d, (double) (short) 10, 1);
        double double35 = dormandPrince853Integrator21.getMinReduction();
        int int36 = dormandPrince853Integrator21.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction37, 58.26662852782886d, (double) 0.0f, 1);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.2d + "'", double35 == 0.2d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(stepHandler42);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 100.0f, 0.0d, 3.1622776601683795d);
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Object[] objArray5 = integratorException4.getArguments();
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray11);
        integratorException4.addSuppressed((java.lang.Throwable) derivativeException16);
        java.lang.Class<?> wildcardClass18 = integratorException4.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, 3.080070288241023d, Double.NaN);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray13);
        integratorException4.addSuppressed((java.lang.Throwable) integratorException14);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException14);
        java.lang.Throwable[] throwableArray17 = integratorException14.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray17);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray7, doubleArray12);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray12, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentStepStart();
        double double22 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        java.lang.String str23 = dormandPrince853Integrator20.getName();
        java.lang.String str24 = dormandPrince853Integrator20.getName();
        double double25 = dormandPrince853Integrator20.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.059467437463484d + "'", double22 == 10.059467437463484d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        double[] doubleArray2 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray19, doubleArray24);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray62, doubleArray63);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray63, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray55, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray34, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.9d, doubleArray24, doubleArray34);
        double[] doubleArray79 = new double[] { (short) -1, '4', 8, (byte) 1, (-1.0d) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (byte) 100, doubleArray24, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) 0L, doubleArray2, doubleArray24);
        java.lang.String str82 = dormandPrince853Integrator81.getName();
        double double83 = dormandPrince853Integrator81.getCurrentStepStart();
        double double84 = dormandPrince853Integrator81.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, 8.0, 1.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        java.lang.Class<?> wildcardClass16 = integratorException15.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException4);
        java.lang.Throwable[] throwableArray8 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        integratorException9.addSuppressed((java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException25);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray39);
        integratorException27.addSuppressed((java.lang.Throwable) integratorException50);
        java.lang.Throwable[] throwableArray52 = integratorException50.getSuppressed();
        java.lang.Class<?> wildcardClass53 = integratorException50.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, 28.284271247461902d, 0.43558771746928626d, 2.3713737056616555d);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray8, doubleArray21);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray21, doubleArray42);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray51, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray52, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray21, doubleArray52);
        int int61 = dormandPrince853Integrator60.getOrder();
        double double62 = dormandPrince853Integrator60.getMinReduction();
        dormandPrince853Integrator60.setInitialStepSize(55.71355310873648d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.2d + "'", double62 == 0.2d);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinStep();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, (double) (-1L), (double) (byte) -1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 0.0f, (double) 1L, (int) ' ');
        dormandPrince853Integrator4.setInitialStepSize((double) 10L);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator21.setInitialStepSize((double) 'a');
        double double24 = dormandPrince853Integrator21.getCurrentSignedStepsize();
        double double25 = dormandPrince853Integrator21.getMinReduction();
        int int26 = dormandPrince853Integrator21.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, (double) (byte) -1, 100.0d, 0.43558771746928626d);
        double double32 = dormandPrince853Integrator31.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) (short) 100, (double) 10L, Double.NaN);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator31.setStepHandler(stepHandler38);
        dormandPrince853Integrator21.setStepHandler(stepHandler38);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        int int24 = dormandPrince853Integrator4.getOrder();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        double double26 = dormandPrince853Integrator4.getSafety();
        java.lang.String str27 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) 10, 0.0d, (double) (byte) -1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (-1.0f));
        int int21 = dormandPrince853Integrator4.getOrder();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        double double24 = dormandPrince853Integrator4.getMinStep();
        double double25 = dormandPrince853Integrator4.getMaxGrowth();
        int int26 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, 0.9d, 17.88854381999832d, 8.0d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety(1.0d);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 100, 97.0d, 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) (-1), (double) (short) 100, 0.43558771746928626d);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(32.0d);
        dormandPrince853Integrator4.setSafety(2.0932702787842112d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray7 = integratorException3.getSuppressed();
        java.lang.String str8 = integratorException3.getPattern();
        java.lang.Throwable[] throwableArray9 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator44.setMinReduction(1.0d);
        dormandPrince853Integrator44.setInitialStepSize((double) (byte) 10);
        double double57 = dormandPrince853Integrator44.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        dormandPrince853Integrator4.setInitialStepSize((double) (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray23);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException24);
        java.lang.Throwable[] throwableArray26 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        java.lang.String str29 = integratorException28.getPattern();
        java.lang.String str30 = integratorException28.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) (-1L), (double) 0.0f, 0.2d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException18);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray27);
        java.lang.String str29 = integratorException28.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException28);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray33);
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException34);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException40);
        integratorException35.addSuppressed((java.lang.Throwable) derivativeException41);
        java.lang.String str43 = integratorException35.getPattern();
        java.lang.String[] strArray47 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray47);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray47);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray47);
        integratorException35.addSuppressed((java.lang.Throwable) derivativeException50);
        derivativeException31.addSuppressed((java.lang.Throwable) integratorException35);
        java.lang.Throwable[] throwableArray53 = integratorException35.getSuppressed();
        java.lang.Object[] objArray54 = integratorException35.getArguments();
        integratorException18.addSuppressed((java.lang.Throwable) integratorException35);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.String str19 = derivativeException16.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str19, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException24);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        derivativeException30.addSuppressed((java.lang.Throwable) derivativeException35);
        java.lang.Object[] objArray37 = derivativeException30.getArguments();
        derivativeException24.addSuppressed((java.lang.Throwable) derivativeException30);
        java.lang.Object[] objArray39 = derivativeException30.getArguments();
        java.lang.String[] strArray44 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray44);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray44);
        java.lang.Throwable[] throwableArray49 = integratorException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = integratorException48.getSuppressed();
        java.lang.Object[] objArray51 = integratorException48.getArguments();
        java.lang.String str52 = integratorException48.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException48);
        derivativeException30.addSuppressed((java.lang.Throwable) integratorException53);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str52, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) (short) 100, Double.NaN, (double) 0L);
        dormandPrince853Integrator4.setInitialStepSize(48.655726475421666d);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        java.lang.String str15 = derivativeException14.getPattern();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str15, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray9);
        java.lang.String str11 = integratorException10.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray13 = derivativeException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray13);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray21);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray21);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException26);
        java.lang.String str28 = integratorException26.toString();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str28, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String str7 = integratorException3.getPattern();
        java.lang.Object[] objArray8 = integratorException3.getArguments();
        java.lang.Throwable[] throwableArray9 = integratorException3.getSuppressed();
        java.lang.Object[] objArray10 = integratorException3.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, (double) (-1L), (double) (byte) -1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (short) 0, 16.0d, (int) '4');
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 8, 0.9486832980505138d, 100);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(32.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator44.getStepHandler();
        int int53 = dormandPrince853Integrator44.getOrder();
        dormandPrince853Integrator44.setMinReduction((double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double61 = dormandPrince853Integrator60.getSafety();
        double double62 = dormandPrince853Integrator60.getMinStep();
        double double63 = dormandPrince853Integrator60.getMinStep();
        double double64 = dormandPrince853Integrator60.getCurrentSignedStepsize();
        int int65 = dormandPrince853Integrator60.getOrder();
        double double66 = dormandPrince853Integrator60.getSafety();
        double double67 = dormandPrince853Integrator60.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler68);
        java.lang.String str70 = dormandPrince853Integrator44.getName();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9d + "'", double61 == 0.9d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9d + "'", double66 == 0.9d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException13);
        java.lang.Object[] objArray15 = integratorException14.getArguments();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator4.getStepHandler();
        double double22 = dormandPrince853Integrator4.getMinReduction();
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        int int24 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int8 = dormandPrince853Integrator4.getOrder();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str15 = dormandPrince853Integrator14.getName();
        dormandPrince853Integrator14.setMaxGrowth((double) 0.0f);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray22, doubleArray23);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray30, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray22, doubleArray35);
        double double39 = dormandPrince853Integrator38.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double50 = dormandPrince853Integrator49.getSafety();
        double double51 = dormandPrince853Integrator49.getMinStep();
        double double52 = dormandPrince853Integrator49.getCurrentStepStart();
        java.lang.String str53 = dormandPrince853Integrator49.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double59 = dormandPrince853Integrator58.getMinStep();
        int int60 = dormandPrince853Integrator58.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double66 = dormandPrince853Integrator65.getSafety();
        double double67 = dormandPrince853Integrator65.getMinStep();
        double double68 = dormandPrince853Integrator65.getMinStep();
        double double69 = dormandPrince853Integrator65.getCurrentSignedStepsize();
        int int70 = dormandPrince853Integrator65.getOrder();
        double double71 = dormandPrince853Integrator65.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler72 = dormandPrince853Integrator65.getStepHandler();
        dormandPrince853Integrator58.setStepHandler(stepHandler72);
        dormandPrince853Integrator49.setStepHandler(stepHandler72);
        dormandPrince853Integrator44.setStepHandler(stepHandler72);
        dormandPrince853Integrator38.setStepHandler(stepHandler72);
        dormandPrince853Integrator14.setStepHandler(stepHandler72);
        double double78 = dormandPrince853Integrator14.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler79 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler79);
        double double81 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(33.46640106136302d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9486832980505138d + "'", double39 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9d + "'", double50 == 0.9d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9d + "'", double66 == 0.9d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler72);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 8, (double) 0L, 0);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        double double18 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray19, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) (short) 1, 1.0d, (int) (byte) 10);
        java.lang.String str50 = dormandPrince853Integrator44.getName();
        java.lang.String str51 = dormandPrince853Integrator44.getName();
        double double52 = dormandPrince853Integrator44.getSafety();
        double double53 = dormandPrince853Integrator44.getMaxGrowth();
        double double54 = dormandPrince853Integrator44.getMaxGrowth();
        double double55 = dormandPrince853Integrator44.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9d + "'", double52 == 0.9d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(58.26662852782886d);
        double double13 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setSafety((double) 100L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (byte) 100, (double) (-1.0f), (int) (byte) 1);
        dormandPrince853Integrator4.setSafety((double) (-1.0f));
        double double20 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize(1.755012902585341d);
        double double26 = dormandPrince853Integrator4.getMaxStep();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.1622776601683795d + "'", double27 == 3.1622776601683795d);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.848857801796104d, 0.9486832980505138d, 97.0d, (double) (-1L));
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 100L);
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNull(stepHandler14);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (-1), (double) (short) 0, 0);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.1622776601683795d + "'", double14 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 97.0d, 0.9d, Double.NaN);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 55.71355310873648d + "'", double6 == 55.71355310873648d);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.String str5 = integratorException3.getPattern();
        java.lang.Throwable[] throwableArray6 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        integratorException7.addSuppressed((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException12);
        java.lang.Object[] objArray16 = derivativeException12.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 100);
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = integratorException3.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        java.lang.String str16 = integratorException15.getPattern();
        java.lang.Throwable[] throwableArray17 = integratorException15.getSuppressed();
        integratorException3.addSuppressed((java.lang.Throwable) integratorException15);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        java.lang.String str22 = integratorException19.getPattern();
        java.lang.String str23 = integratorException19.getPattern();
        java.lang.Throwable[] throwableArray24 = integratorException19.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        java.lang.Throwable[] throwableArray17 = derivativeException16.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException16);
        java.lang.String str19 = integratorException18.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: " + "'", str19, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException1 = new org.apache.commons.math.ode.DerivativeException(throwable0);
        java.lang.String[] strArray4 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" };
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        java.lang.Throwable[] throwableArray6 = derivativeException5.getSuppressed();
        derivativeException1.addSuppressed((java.lang.Throwable) derivativeException5);
        java.lang.String str8 = derivativeException5.getPattern();
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException19);
        derivativeException5.addSuppressed((java.lang.Throwable) integratorException20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String str24 = derivativeException5.getPattern();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, (double) (short) 1, (double) 1.0f, Double.NaN);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.Throwable[] throwableArray7 = derivativeException6.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        double[] doubleArray2 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray25, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray21, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray13, doubleArray26);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray42, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray34, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray26, doubleArray47);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray56, doubleArray57);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray57, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) 10, doubleArray26, doubleArray57);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10L, doubleArray26, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.486832980505138d, 8.0d, doubleArray2, doubleArray69);
        double double73 = dormandPrince853Integrator72.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 'a', (double) (-1L), 100);
        double double17 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        double double24 = dormandPrince853Integrator4.getMaxGrowth();
        int int25 = dormandPrince853Integrator4.getOrder();
        int int26 = dormandPrince853Integrator4.getOrder();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, 10.059467437463484d, (-1.0d), (double) (short) 10);
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator32.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler33);
        double double35 = dormandPrince853Integrator4.getSafety();
        double double36 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double37 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.1622776601683795d + "'", double27 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9d + "'", double35 == 0.9d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.1622776601683795d + "'", double36 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray14, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray6, doubleArray19);
        double[] doubleArray23 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 3.080070288241023d, doubleArray19, doubleArray23);
        int int25 = dormandPrince853Integrator24.getOrder();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        java.lang.String str3 = derivativeException2.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException2);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        derivativeException5.addSuppressed((java.lang.Throwable) derivativeException20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException20);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray31);
        java.lang.String str33 = integratorException32.getPattern();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray38);
        integratorException32.addSuppressed((java.lang.Throwable) derivativeException42);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException32);
        java.lang.Throwable[] throwableArray45 = integratorException32.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException46);
        derivativeException22.addSuppressed((java.lang.Throwable) integratorException47);
        java.lang.Throwable[] throwableArray49 = derivativeException22.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str3, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        derivativeException6.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.Object[] objArray15 = derivativeException13.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray15);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray22 = derivativeException21.getArguments();
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException25);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        integratorException26.addSuppressed((java.lang.Throwable) derivativeException32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        derivativeException21.addSuppressed((java.lang.Throwable) integratorException26);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException26);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException39);
        java.lang.Throwable[] throwableArray41 = integratorException40.getSuppressed();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray49);
        integratorException40.addSuppressed((java.lang.Throwable) integratorException50);
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException40);
        java.lang.Throwable[] throwableArray53 = integratorException40.getSuppressed();
        derivativeException36.addSuppressed((java.lang.Throwable) integratorException40);
        java.lang.String str55 = derivativeException36.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException36);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException(throwable57);
        java.lang.String str59 = integratorException58.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException58);
        java.lang.Throwable[] throwableArray61 = integratorException58.getSuppressed();
        java.lang.Object[] objArray62 = integratorException58.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException58);
        integratorException56.addSuppressed((java.lang.Throwable) integratorException63);
        integratorException16.addSuppressed((java.lang.Throwable) integratorException63);
        java.lang.Throwable[] throwableArray66 = integratorException63.getSuppressed();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(17.88854381999832d);
        dormandPrince853Integrator4.setInitialStepSize(3.1622776601683795d);
        dormandPrince853Integrator4.setMinReduction(9.924141172814958d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Throwable[] throwableArray11 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray11);
        java.lang.Object[] objArray13 = integratorException12.getArguments();
        java.lang.Throwable[] throwableArray14 = integratorException12.getSuppressed();
        java.lang.Class<?> wildcardClass15 = integratorException12.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, (double) (byte) 10, 0.9d, (double) 100L);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator21.setMinReduction((double) 1);
        dormandPrince853Integrator21.setMaxGrowth((double) (byte) -1);
        double double26 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        dormandPrince853Integrator31.setMinReduction((double) (short) -1);
        dormandPrince853Integrator31.setInitialStepSize((double) (byte) 1);
        java.lang.String str37 = dormandPrince853Integrator31.getName();
        java.lang.String str38 = dormandPrince853Integrator31.getName();
        double double39 = dormandPrince853Integrator31.getCurrentStepStart();
        dormandPrince853Integrator31.setInitialStepSize((-1.0d));
        java.lang.String str42 = dormandPrince853Integrator31.getName();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator21.setStepHandler(stepHandler43);
        dormandPrince853Integrator4.setStepHandler(stepHandler43);
        dormandPrince853Integrator4.setMaxGrowth(18.1550495783196d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str42, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler43);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException3);
        java.lang.Throwable[] throwableArray5 = integratorException4.getSuppressed();
        java.lang.String str6 = integratorException4.getPattern();
        java.lang.Throwable[] throwableArray7 = integratorException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException4);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException13);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.Throwable[] throwableArray16 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray16);
        java.lang.Throwable[] throwableArray18 = integratorException17.getSuppressed();
        java.lang.String str19 = integratorException17.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str19, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 1);
        dormandPrince853Integrator4.setMinReduction(1.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getSafety();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxGrowth();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize(0.43558771746928626d);
        dormandPrince853Integrator4.setMinReduction(35.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), 2.3713737056616555d, (double) '#', (double) 1);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 14.029236038238938d, 2.3713737056616555d, 0.0d);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getMinStep();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 1.0f, 0.0d, (int) '#');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', 0.0d, (double) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double26 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(0.9d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator16.setInitialStepSize((double) 'a');
        dormandPrince853Integrator16.setInitialStepSize((double) ' ');
        double double21 = dormandPrince853Integrator16.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        java.lang.Class<?> wildcardClass24 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray5, doubleArray10);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        java.lang.String str14 = dormandPrince853Integrator12.getName();
        java.lang.String str15 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setInitialStepSize(22.871211309156784d);
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        double double25 = dormandPrince853Integrator23.getMinStep();
        dormandPrince853Integrator23.setSafety((double) '#');
        double double28 = dormandPrince853Integrator23.getMinStep();
        double double29 = dormandPrince853Integrator23.getCurrentStepStart();
        double double30 = dormandPrince853Integrator23.getMaxStep();
        dormandPrince853Integrator23.setSafety((-1.0d));
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler33);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler33);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) (-1L), (double) '4', 10);
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.1622776601683795d + "'", double11 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1622776601683795d + "'", double15 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        dormandPrince853Integrator4.setSafety(3.7470125727948562d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(9.485494822646622d, 3.138288992714996d, 52.0d, (double) ' ');
        dormandPrince853Integrator4.setMinReduction(55.71355310873648d);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(22.871211309156784d, (double) (short) 0, 31.71666350274487d, 3.1622776601683795d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getSafety();
        double double22 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setSafety(97.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double30 = dormandPrince853Integrator29.getSafety();
        double double31 = dormandPrince853Integrator29.getMinStep();
        dormandPrince853Integrator29.setSafety((double) '#');
        double double34 = dormandPrince853Integrator29.getCurrentStepStart();
        double double35 = dormandPrince853Integrator29.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator29.getStepHandler();
        double double37 = dormandPrince853Integrator29.getMinReduction();
        dormandPrince853Integrator29.setInitialStepSize((double) 100L);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler40);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator20.getStepHandler();
        java.lang.String str43 = dormandPrince853Integrator20.getName();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.9d + "'", double30 == 0.9d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.2d + "'", double37 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray12 = derivativeException11.getArguments();
        java.lang.String str13 = derivativeException11.getPattern();
        java.lang.String str14 = derivativeException11.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException11);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int18 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.String str20 = derivativeException18.toString();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!" + "'", str20, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) 8, (double) '#', 32.0d);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.Class<?> wildcardClass6 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator16.setMinReduction((double) 1);
        dormandPrince853Integrator16.setMaxGrowth((double) (byte) -1);
        double double21 = dormandPrince853Integrator16.getMaxGrowth();
        int int22 = dormandPrince853Integrator16.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety(5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException11);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray16 = derivativeException12.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray15, doubleArray16);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray16, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray8, doubleArray21);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray37, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray29, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) -1, doubleArray8, doubleArray42);
        double[] doubleArray49 = null;
        double[] doubleArray58 = new double[] {};
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray58, doubleArray59);
        double[] doubleArray63 = new double[] {};
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray63, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray59, doubleArray64);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray64, doubleArray69);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray79, doubleArray80);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray84, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray80, doubleArray85);
        double[] doubleArray90 = new double[] {};
        double[] doubleArray91 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray90, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray85, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 0, doubleArray64, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (byte) -1, doubleArray49, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 10.0d, doubleArray42, doubleArray49);
        double double97 = dormandPrince853Integrator96.getSafety();
        dormandPrince853Integrator96.setMinReduction(52.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.9d + "'", double97 == 0.9d);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray4);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        java.lang.String str10 = integratorException9.getPattern();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray19);
        java.lang.String str21 = integratorException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException20);
        java.lang.Object[] objArray23 = derivativeException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray23);
        integratorException9.addSuppressed((java.lang.Throwable) integratorException24);
        java.lang.Throwable[] throwableArray26 = integratorException9.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException27);
        java.lang.Throwable[] throwableArray29 = integratorException28.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException28);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, 35.0d, 32.0d, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) '4', (double) 1.0f, 0.2d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        double double12 = dormandPrince853Integrator10.getMinStep();
        dormandPrince853Integrator10.setSafety((double) '#');
        double double15 = dormandPrince853Integrator10.getCurrentStepStart();
        double double16 = dormandPrince853Integrator10.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator10.getStepHandler();
        double double18 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction19, 0.0d, (double) (short) 10, 1);
        double double24 = dormandPrince853Integrator10.getMinReduction();
        double double25 = dormandPrince853Integrator10.getMinReduction();
        double double26 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator31.setSafety((double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler34 = null;
        dormandPrince853Integrator31.setStepHandler(stepHandler34);
        double double36 = dormandPrince853Integrator31.getMinReduction();
        java.lang.String str37 = dormandPrince853Integrator31.getName();
        dormandPrince853Integrator31.setSafety((double) 10L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (short) 10, 3.1622776601683795d, (double) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 'a', (-1.0d), 0.0d);
        dormandPrince853Integrator49.setMinReduction((double) 1);
        dormandPrince853Integrator49.setMinReduction((double) (byte) 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int59 = dormandPrince853Integrator58.getOrder();
        double double60 = dormandPrince853Integrator58.getSafety();
        dormandPrince853Integrator58.setSafety((double) (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double68 = dormandPrince853Integrator67.getSafety();
        dormandPrince853Integrator67.setInitialStepSize((double) 0.0f);
        int int71 = dormandPrince853Integrator67.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double77 = dormandPrince853Integrator76.getSafety();
        double double78 = dormandPrince853Integrator76.getMinStep();
        double double79 = dormandPrince853Integrator76.getMinStep();
        double double80 = dormandPrince853Integrator76.getCurrentSignedStepsize();
        int int81 = dormandPrince853Integrator76.getOrder();
        double double82 = dormandPrince853Integrator76.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator76.getStepHandler();
        dormandPrince853Integrator67.setStepHandler(stepHandler83);
        dormandPrince853Integrator58.setStepHandler(stepHandler83);
        dormandPrince853Integrator49.setStepHandler(stepHandler83);
        dormandPrince853Integrator44.setStepHandler(stepHandler83);
        dormandPrince853Integrator31.setStepHandler(stepHandler83);
        dormandPrince853Integrator10.setStepHandler(stepHandler83);
        dormandPrince853Integrator4.setStepHandler(stepHandler83);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.2d + "'", double26 == 0.2d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.2d + "'", double36 == 0.2d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9d + "'", double60 == 0.9d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.9d + "'", double68 == 0.9d);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.9d + "'", double77 == 0.9d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler83);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        java.lang.Throwable[] throwableArray4 = integratorException3.getSuppressed();
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray12);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException15);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, true, -1, NaN, 1, -1]");
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getSafety();
        double double20 = dormandPrince853Integrator18.getMinStep();
        dormandPrince853Integrator18.setSafety((double) '#');
        double double23 = dormandPrince853Integrator18.getMinStep();
        double double24 = dormandPrince853Integrator18.getMaxStep();
        double double25 = dormandPrince853Integrator18.getMinStep();
        double double26 = dormandPrince853Integrator18.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        double double24 = dormandPrince853Integrator4.getMaxGrowth();
        int int25 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, 10.059467437463484d, 0.9486832980505138d, (int) 'a');
        int int31 = dormandPrince853Integrator4.getOrder();
        java.lang.String str32 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.String str12 = integratorException8.getPattern();
        java.lang.String str13 = integratorException8.getPattern();
        java.lang.Throwable[] throwableArray14 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray16 = integratorException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (-1));
        int int9 = dormandPrince853Integrator4.getOrder();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(0.9d);
        dormandPrince853Integrator4.setInitialStepSize((double) 0L);
        double double17 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double23 = dormandPrince853Integrator22.getMinStep();
        int int24 = dormandPrince853Integrator22.getOrder();
        double double25 = dormandPrince853Integrator22.getCurrentSignedStepsize();
        dormandPrince853Integrator22.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction28, (double) (-1.0f), (double) (short) 10, (int) 'a');
        dormandPrince853Integrator22.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        int int40 = dormandPrince853Integrator39.getOrder();
        double double41 = dormandPrince853Integrator39.getSafety();
        dormandPrince853Integrator39.setSafety((double) (-1));
        int int44 = dormandPrince853Integrator39.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator39.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator39.getStepHandler();
        dormandPrince853Integrator22.setStepHandler(stepHandler46);
        java.lang.String str48 = dormandPrince853Integrator22.getName();
        java.lang.String str49 = dormandPrince853Integrator22.getName();
        double double50 = dormandPrince853Integrator22.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double56 = dormandPrince853Integrator55.getSafety();
        double double57 = dormandPrince853Integrator55.getMinStep();
        dormandPrince853Integrator55.setSafety((double) '#');
        double double60 = dormandPrince853Integrator55.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double66 = dormandPrince853Integrator65.getSafety();
        double double67 = dormandPrince853Integrator65.getMinStep();
        dormandPrince853Integrator65.setSafety((double) '#');
        double double70 = dormandPrince853Integrator65.getCurrentStepStart();
        double double71 = dormandPrince853Integrator65.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler72 = dormandPrince853Integrator65.getStepHandler();
        dormandPrince853Integrator55.setStepHandler(stepHandler72);
        dormandPrince853Integrator22.setStepHandler(stepHandler72);
        dormandPrince853Integrator4.setStepHandler(stepHandler72);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.1622776601683795d + "'", double25 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9d + "'", double41 == 0.9d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.2d + "'", double50 == 0.2d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9d + "'", double66 == 0.9d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler72);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (-1), (double) (short) 0, 0);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray17, doubleArray18);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray24, doubleArray25);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray25, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray17, doubleArray30);
        double double34 = dormandPrince853Integrator33.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double45 = dormandPrince853Integrator44.getSafety();
        double double46 = dormandPrince853Integrator44.getMinStep();
        double double47 = dormandPrince853Integrator44.getCurrentStepStart();
        java.lang.String str48 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double54 = dormandPrince853Integrator53.getMinStep();
        int int55 = dormandPrince853Integrator53.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double61 = dormandPrince853Integrator60.getSafety();
        double double62 = dormandPrince853Integrator60.getMinStep();
        double double63 = dormandPrince853Integrator60.getMinStep();
        double double64 = dormandPrince853Integrator60.getCurrentSignedStepsize();
        int int65 = dormandPrince853Integrator60.getOrder();
        double double66 = dormandPrince853Integrator60.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator53.setStepHandler(stepHandler67);
        dormandPrince853Integrator44.setStepHandler(stepHandler67);
        dormandPrince853Integrator39.setStepHandler(stepHandler67);
        dormandPrince853Integrator33.setStepHandler(stepHandler67);
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator77.setSafety((double) '#');
        dormandPrince853Integrator77.setMaxGrowth((double) 100.0f);
        java.lang.String str82 = dormandPrince853Integrator77.getName();
        double double83 = dormandPrince853Integrator77.getSafety();
        dormandPrince853Integrator77.setMaxGrowth((double) 0.0f);
        double double86 = dormandPrince853Integrator77.getMinStep();
        double double87 = dormandPrince853Integrator77.getSafety();
        java.lang.String str88 = dormandPrince853Integrator77.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction89 = null;
        dormandPrince853Integrator77.addSwitchingFunction(switchingFunction89, 1.755012902585341d, 1.6870239755710472d, (int) ' ');
        org.apache.commons.math.ode.StepHandler stepHandler94 = dormandPrince853Integrator77.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler94);
        double double96 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9486832980505138d + "'", double34 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.9d + "'", double45 == 0.9d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9d + "'", double61 == 0.9d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str88, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler94);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int8 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) 10);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) -1);
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 14.029236038238938d, 3.7470125727948562d, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator4.setSafety((double) '#');
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler11 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler11);
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNull(stepHandler12);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, 0.0d, (double) (byte) -1, 35.0d);
        java.lang.Class<?> wildcardClass5 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        java.lang.Throwable[] throwableArray9 = integratorException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        integratorException3.addSuppressed((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException3);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException19);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException37);
        integratorException13.addSuppressed((java.lang.Throwable) derivativeException38);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray47);
        java.lang.String str49 = integratorException48.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException48);
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException48);
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException48);
        java.lang.Object[] objArray53 = integratorException48.getArguments();
        java.lang.String[] strArray59 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray59);
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray59);
        integratorException48.addSuppressed((java.lang.Throwable) derivativeException64);
        org.apache.commons.math.ode.IntegratorException integratorException66 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException48);
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException76 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray75);
        java.lang.String str77 = integratorException76.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException76);
        java.lang.Object[] objArray79 = derivativeException78.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException80 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray79);
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray88);
        java.lang.String str90 = integratorException89.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException89);
        org.apache.commons.math.ode.DerivativeException derivativeException92 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException89);
        org.apache.commons.math.ode.DerivativeException derivativeException93 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException89);
        integratorException80.addSuppressed((java.lang.Throwable) derivativeException93);
        org.apache.commons.math.ode.IntegratorException integratorException95 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException93);
        integratorException66.addSuppressed((java.lang.Throwable) integratorException95);
        org.apache.commons.math.ode.IntegratorException integratorException97 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException66);
        integratorException13.addSuppressed((java.lang.Throwable) integratorException66);
        org.apache.commons.math.ode.DerivativeException derivativeException99 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException66);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler9 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler9);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        java.lang.Object[] objArray20 = derivativeException18.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException18);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler8);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray6);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException15);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException21);
        integratorException16.addSuppressed((java.lang.Throwable) derivativeException22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        java.lang.Object[] objArray25 = integratorException16.getArguments();
        java.lang.Object[] objArray26 = integratorException16.getArguments();
        java.lang.Throwable[] throwableArray27 = integratorException16.getSuppressed();
        integratorException12.addSuppressed((java.lang.Throwable) integratorException16);
        java.lang.Object[] objArray29 = integratorException12.getArguments();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        dormandPrince853Integrator4.setMaxGrowth(1.755012902585341d);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int19 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.4472135954999579d);
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        derivativeException6.addSuppressed((java.lang.Throwable) derivativeException13);
        java.lang.Object[] objArray15 = derivativeException13.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray15);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (-1.0d), (double) 1L, (int) 'a');
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getMinReduction();
        double[] doubleArray29 = new double[] {};
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray29, doubleArray30);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray30, doubleArray35);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray35, doubleArray40);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray48, doubleArray49);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray55, doubleArray56);
        double[] doubleArray60 = new double[] {};
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray60, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray56, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray48, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray40, doubleArray61);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray71 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray70, doubleArray71);
        double[] doubleArray75 = new double[] {};
        double[] doubleArray76 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray75, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray71, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.080070288241023d, (double) 1L, doubleArray61, doubleArray76);
        dormandPrince853Integrator79.setSafety(0.9486832980505138d);
        java.lang.String str82 = dormandPrince853Integrator79.getName();
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator79.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler83);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction85 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction85, 58.26662852782886d, (double) (byte) 100, (-1));
        double double90 = dormandPrince853Integrator4.getMinStep();
        int int91 = dormandPrince853Integrator4.getOrder();
        double double92 = dormandPrince853Integrator4.getMaxGrowth();
        double double93 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler83);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.0d + "'", double90 == 10.0d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 16.0d, 0.0d, (int) (short) 10);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.1622776601683795d + "'", double18 == 3.1622776601683795d);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        dormandPrince853Integrator4.setMinReduction(5.623413251903491d);
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) '#');
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (-1.0f));
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: hi!", strArray12);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException", strArray8);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        java.lang.Throwable[] throwableArray21 = integratorException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = integratorException20.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException23);
        derivativeException15.addSuppressed((java.lang.Throwable) integratorException23);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException23);
        java.lang.Object[] objArray27 = integratorException23.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray27);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray17 = integratorException16.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray17);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray11, doubleArray12);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray12, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray4, doubleArray17);
        double double21 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        dormandPrince853Integrator20.setMinReduction((double) (byte) 10);
        java.lang.String str24 = dormandPrince853Integrator20.getName();
        double double25 = dormandPrince853Integrator20.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9486832980505138d + "'", double21 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, Double.NaN, (double) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 0.4472135954999579d, 2.3713737056616555d, (int) (byte) 100);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException16);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException(throwable19);
        java.lang.String str21 = integratorException20.getPattern();
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        java.lang.Throwable[] throwableArray26 = integratorException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = integratorException25.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException25);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray36);
        java.lang.String str38 = integratorException37.getPattern();
        java.lang.Throwable[] throwableArray39 = integratorException37.getSuppressed();
        integratorException25.addSuppressed((java.lang.Throwable) integratorException37);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException25);
        integratorException20.addSuppressed((java.lang.Throwable) integratorException25);
        java.lang.Throwable[] throwableArray43 = integratorException25.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray43);
        derivativeException17.addSuppressed((java.lang.Throwable) integratorException44);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray4, doubleArray5);
        double[] doubleArray7 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 100.0d, doubleArray4, doubleArray7);
        double double9 = dormandPrince853Integrator8.getSafety();
        double double10 = dormandPrince853Integrator8.getSafety();
        dormandPrince853Integrator8.setMinReduction(0.43558771746928626d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100L, true, (-1), Double.NaN, 1, (-1) };
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray7);
        java.lang.String str9 = integratorException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException8);
        java.lang.Object[] objArray13 = integratorException8.getArguments();
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray19);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray19);
        integratorException8.addSuppressed((java.lang.Throwable) derivativeException24);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray32);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException34);
        derivativeException30.addSuppressed((java.lang.Throwable) derivativeException35);
        java.lang.Object[] objArray37 = derivativeException30.getArguments();
        derivativeException24.addSuppressed((java.lang.Throwable) derivativeException30);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException24);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, true, -1, NaN, 1, -1]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth((double) '4');
        int int13 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(9.485494822646622d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 40.0d, 8.94427190999916d, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator11.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double21 = dormandPrince853Integrator20.getMinStep();
        int int22 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        double double29 = dormandPrince853Integrator27.getMinStep();
        double double30 = dormandPrince853Integrator27.getMinStep();
        double double31 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator27.getOrder();
        double double33 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler34);
        dormandPrince853Integrator11.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        java.lang.String str40 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, (double) (byte) 100, 0.9d, (int) (short) 1);
        java.lang.String str46 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str46, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (byte) 0, (double) (byte) 100, (double) 10L);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator11.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double21 = dormandPrince853Integrator20.getMinStep();
        int int22 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        double double29 = dormandPrince853Integrator27.getMinStep();
        double double30 = dormandPrince853Integrator27.getMinStep();
        double double31 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator27.getOrder();
        double double33 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler34);
        dormandPrince853Integrator11.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        java.lang.String str40 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, (double) (byte) 100, 0.9d, (int) (short) 1);
        double double46 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations8 = null;
        double[] doubleArray10 = null;
        double[] doubleArray14 = null;
        double[] doubleArray21 = new double[] {};
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray21, doubleArray22);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray26, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray22, doubleArray27);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray36, doubleArray37);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray43, doubleArray44);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray48, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray44, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray36, doubleArray49);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray57, doubleArray58);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray64, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray65, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray57, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 100, doubleArray49, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) 0L, doubleArray27, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '#', (double) 0, doubleArray14, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations8, 8.94427190999916d, doubleArray10, 0.9d, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        java.lang.Object[] objArray19 = derivativeException18.getArguments();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler5);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety(0.4472135954999579d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray8, doubleArray9);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray9, doubleArray14);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.1622776601683795d, (double) ' ', doubleArray14, doubleArray19);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray27, doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray34, doubleArray35);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) 1.0f, doubleArray39, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 'a', doubleArray35, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) 1L, doubleArray27, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 0.0f, doubleArray19, doubleArray40);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        double double46 = dormandPrince853Integrator44.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator44.getStepHandler();
        int int48 = dormandPrince853Integrator44.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator44.getStepHandler();
        double double50 = dormandPrince853Integrator44.getSafety();
        double double51 = dormandPrince853Integrator44.getMaxStep();
        double double52 = dormandPrince853Integrator44.getMinReduction();
        double double53 = dormandPrince853Integrator44.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9d + "'", double50 == 0.9d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.2d + "'", double52 == 0.2d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        double double13 = dormandPrince853Integrator11.getMinStep();
        double double14 = dormandPrince853Integrator11.getMinStep();
        double double15 = dormandPrince853Integrator11.getCurrentSignedStepsize();
        int int16 = dormandPrince853Integrator11.getOrder();
        double double17 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        dormandPrince853Integrator27.setSafety((double) '#');
        dormandPrince853Integrator27.setMaxGrowth((double) 100.0f);
        java.lang.String str32 = dormandPrince853Integrator27.getName();
        double double33 = dormandPrince853Integrator27.getSafety();
        double double34 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        int int41 = dormandPrince853Integrator39.getOrder();
        int int42 = dormandPrince853Integrator39.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator39.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (byte) 10, (double) (short) 1, (double) 0L);
        double double49 = dormandPrince853Integrator48.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator48.addSwitchingFunction(switchingFunction50, (double) (-1L), (double) '4', 10);
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator48.getStepHandler();
        dormandPrince853Integrator39.setStepHandler(stepHandler55);
        dormandPrince853Integrator27.setStepHandler(stepHandler55);
        dormandPrince853Integrator4.setStepHandler(stepHandler55);
        double double59 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray1);
        org.apache.commons.math.ode.IntegratorException integratorException3 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException14);
        java.lang.Throwable[] throwableArray16 = integratorException15.getSuppressed();
        derivativeException4.addSuppressed((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray18 = integratorException15.getArguments();
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray23);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray23);
        integratorException15.addSuppressed((java.lang.Throwable) integratorException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException15);
        java.lang.Throwable[] throwableArray30 = integratorException15.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
    }
}

